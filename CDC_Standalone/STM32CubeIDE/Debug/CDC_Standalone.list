
CDC_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b338  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b474  0800b474  0001b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5bc  0800b5bc  0001b5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b5c0  0800b5c0  0001b5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000194  20000008  0800b5c4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000019bc  2000019c  0800b758  0002019c  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  20001b58  0800b758  00021b58  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029e53  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000048bf  00000000  00000000  0004a01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ee0  00000000  00000000  0004e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d48  00000000  00000000  000507c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026814  00000000  00000000  00052508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000204ea  00000000  00000000  00078d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e6df0  00000000  00000000  00099206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0017fff6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000081ec  00000000  00000000  0018004c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000019c 	.word	0x2000019c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b45c 	.word	0x0800b45c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a0 	.word	0x200001a0
 8000178:	0800b45c 	.word	0x0800b45c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468c      	mov	ip, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	f040 8083 	bne.w	80002c2 <__udivmoddi4+0x116>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4617      	mov	r7, r2
 80001c0:	d947      	bls.n	8000252 <__udivmoddi4+0xa6>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b142      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c8:	f1c2 0020 	rsb	r0, r2, #32
 80001cc:	fa24 f000 	lsr.w	r0, r4, r0
 80001d0:	4091      	lsls	r1, r2
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea40 0c01 	orr.w	ip, r0, r1
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbc f6f8 	udiv	r6, ip, r8
 80001e4:	fa1f fe87 	uxth.w	lr, r7
 80001e8:	fb08 c116 	mls	r1, r8, r6, ip
 80001ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f0:	fb06 f10e 	mul.w	r1, r6, lr
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18fb      	adds	r3, r7, r3
 80001fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80001fe:	f080 8119 	bcs.w	8000434 <__udivmoddi4+0x288>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8116 	bls.w	8000434 <__udivmoddi4+0x288>
 8000208:	3e02      	subs	r6, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	45a6      	cmp	lr, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8105 	bcs.w	8000438 <__udivmoddi4+0x28c>
 800022e:	45a6      	cmp	lr, r4
 8000230:	f240 8102 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800023c:	eba4 040e 	sub.w	r4, r4, lr
 8000240:	2600      	movs	r6, #0
 8000242:	b11d      	cbz	r5, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c5 4300 	strd	r4, r3, [r5]
 800024c:	4631      	mov	r1, r6
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	b902      	cbnz	r2, 8000256 <__udivmoddi4+0xaa>
 8000254:	deff      	udf	#255	; 0xff
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	2a00      	cmp	r2, #0
 800025c:	d150      	bne.n	8000300 <__udivmoddi4+0x154>
 800025e:	1bcb      	subs	r3, r1, r7
 8000260:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000264:	fa1f f887 	uxth.w	r8, r7
 8000268:	2601      	movs	r6, #1
 800026a:	fbb3 fcfe 	udiv	ip, r3, lr
 800026e:	0c21      	lsrs	r1, r4, #16
 8000270:	fb0e 331c 	mls	r3, lr, ip, r3
 8000274:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000278:	fb08 f30c 	mul.w	r3, r8, ip
 800027c:	428b      	cmp	r3, r1
 800027e:	d907      	bls.n	8000290 <__udivmoddi4+0xe4>
 8000280:	1879      	adds	r1, r7, r1
 8000282:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000286:	d202      	bcs.n	800028e <__udivmoddi4+0xe2>
 8000288:	428b      	cmp	r3, r1
 800028a:	f200 80e9 	bhi.w	8000460 <__udivmoddi4+0x2b4>
 800028e:	4684      	mov	ip, r0
 8000290:	1ac9      	subs	r1, r1, r3
 8000292:	b2a3      	uxth	r3, r4
 8000294:	fbb1 f0fe 	udiv	r0, r1, lr
 8000298:	fb0e 1110 	mls	r1, lr, r0, r1
 800029c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002a0:	fb08 f800 	mul.w	r8, r8, r0
 80002a4:	45a0      	cmp	r8, r4
 80002a6:	d907      	bls.n	80002b8 <__udivmoddi4+0x10c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x10a>
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	f200 80d9 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002b6:	4618      	mov	r0, r3
 80002b8:	eba4 0408 	sub.w	r4, r4, r8
 80002bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c0:	e7bf      	b.n	8000242 <__udivmoddi4+0x96>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80b1 	beq.w	800042e <__udivmoddi4+0x282>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x1cc>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b8 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0103 	sbc.w	r1, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	468c      	mov	ip, r1
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0a8      	beq.n	800024c <__udivmoddi4+0xa0>
 80002fa:	e9c5 4c00 	strd	r4, ip, [r5]
 80002fe:	e7a5      	b.n	800024c <__udivmoddi4+0xa0>
 8000300:	f1c2 0320 	rsb	r3, r2, #32
 8000304:	fa20 f603 	lsr.w	r6, r0, r3
 8000308:	4097      	lsls	r7, r2
 800030a:	fa01 f002 	lsl.w	r0, r1, r2
 800030e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000312:	40d9      	lsrs	r1, r3
 8000314:	4330      	orrs	r0, r6
 8000316:	0c03      	lsrs	r3, r0, #16
 8000318:	fbb1 f6fe 	udiv	r6, r1, lr
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	fb0e 1116 	mls	r1, lr, r6, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb06 f108 	mul.w	r1, r6, r8
 800032c:	4299      	cmp	r1, r3
 800032e:	fa04 f402 	lsl.w	r4, r4, r2
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x19c>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f106 3cff 	add.w	ip, r6, #4294967295
 800033a:	f080 808d 	bcs.w	8000458 <__udivmoddi4+0x2ac>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 808a 	bls.w	8000458 <__udivmoddi4+0x2ac>
 8000344:	3e02      	subs	r6, #2
 8000346:	443b      	add	r3, r7
 8000348:	1a5b      	subs	r3, r3, r1
 800034a:	b281      	uxth	r1, r0
 800034c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000350:	fb0e 3310 	mls	r3, lr, r0, r3
 8000354:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000358:	fb00 f308 	mul.w	r3, r0, r8
 800035c:	428b      	cmp	r3, r1
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	1879      	adds	r1, r7, r1
 8000362:	f100 3cff 	add.w	ip, r0, #4294967295
 8000366:	d273      	bcs.n	8000450 <__udivmoddi4+0x2a4>
 8000368:	428b      	cmp	r3, r1
 800036a:	d971      	bls.n	8000450 <__udivmoddi4+0x2a4>
 800036c:	3802      	subs	r0, #2
 800036e:	4439      	add	r1, r7
 8000370:	1acb      	subs	r3, r1, r3
 8000372:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000376:	e778      	b.n	800026a <__udivmoddi4+0xbe>
 8000378:	f1c6 0c20 	rsb	ip, r6, #32
 800037c:	fa03 f406 	lsl.w	r4, r3, r6
 8000380:	fa22 f30c 	lsr.w	r3, r2, ip
 8000384:	431c      	orrs	r4, r3
 8000386:	fa20 f70c 	lsr.w	r7, r0, ip
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000392:	fa21 f10c 	lsr.w	r1, r1, ip
 8000396:	431f      	orrs	r7, r3
 8000398:	0c3b      	lsrs	r3, r7, #16
 800039a:	fbb1 f9fe 	udiv	r9, r1, lr
 800039e:	fa1f f884 	uxth.w	r8, r4
 80003a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003a6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003aa:	fb09 fa08 	mul.w	sl, r9, r8
 80003ae:	458a      	cmp	sl, r1
 80003b0:	fa02 f206 	lsl.w	r2, r2, r6
 80003b4:	fa00 f306 	lsl.w	r3, r0, r6
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x220>
 80003ba:	1861      	adds	r1, r4, r1
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	d248      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 80003c2:	458a      	cmp	sl, r1
 80003c4:	d946      	bls.n	8000454 <__udivmoddi4+0x2a8>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4421      	add	r1, r4
 80003cc:	eba1 010a 	sub.w	r1, r1, sl
 80003d0:	b2bf      	uxth	r7, r7
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003de:	fb00 f808 	mul.w	r8, r0, r8
 80003e2:	45b8      	cmp	r8, r7
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x24a>
 80003e6:	19e7      	adds	r7, r4, r7
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d22e      	bcs.n	800044c <__udivmoddi4+0x2a0>
 80003ee:	45b8      	cmp	r8, r7
 80003f0:	d92c      	bls.n	800044c <__udivmoddi4+0x2a0>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4427      	add	r7, r4
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	eba7 0708 	sub.w	r7, r7, r8
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	454f      	cmp	r7, r9
 8000404:	46c6      	mov	lr, r8
 8000406:	4649      	mov	r1, r9
 8000408:	d31a      	bcc.n	8000440 <__udivmoddi4+0x294>
 800040a:	d017      	beq.n	800043c <__udivmoddi4+0x290>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x27a>
 800040e:	ebb3 020e 	subs.w	r2, r3, lr
 8000412:	eb67 0701 	sbc.w	r7, r7, r1
 8000416:	fa07 fc0c 	lsl.w	ip, r7, ip
 800041a:	40f2      	lsrs	r2, r6
 800041c:	ea4c 0202 	orr.w	r2, ip, r2
 8000420:	40f7      	lsrs	r7, r6
 8000422:	e9c5 2700 	strd	r2, r7, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	462e      	mov	r6, r5
 8000430:	4628      	mov	r0, r5
 8000432:	e70b      	b.n	800024c <__udivmoddi4+0xa0>
 8000434:	4606      	mov	r6, r0
 8000436:	e6e9      	b.n	800020c <__udivmoddi4+0x60>
 8000438:	4618      	mov	r0, r3
 800043a:	e6fd      	b.n	8000238 <__udivmoddi4+0x8c>
 800043c:	4543      	cmp	r3, r8
 800043e:	d2e5      	bcs.n	800040c <__udivmoddi4+0x260>
 8000440:	ebb8 0e02 	subs.w	lr, r8, r2
 8000444:	eb69 0104 	sbc.w	r1, r9, r4
 8000448:	3801      	subs	r0, #1
 800044a:	e7df      	b.n	800040c <__udivmoddi4+0x260>
 800044c:	4608      	mov	r0, r1
 800044e:	e7d2      	b.n	80003f6 <__udivmoddi4+0x24a>
 8000450:	4660      	mov	r0, ip
 8000452:	e78d      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000454:	4681      	mov	r9, r0
 8000456:	e7b9      	b.n	80003cc <__udivmoddi4+0x220>
 8000458:	4666      	mov	r6, ip
 800045a:	e775      	b.n	8000348 <__udivmoddi4+0x19c>
 800045c:	4630      	mov	r0, r6
 800045e:	e74a      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000460:	f1ac 0c02 	sub.w	ip, ip, #2
 8000464:	4439      	add	r1, r7
 8000466:	e713      	b.n	8000290 <__udivmoddi4+0xe4>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	e724      	b.n	80002b8 <__udivmoddi4+0x10c>
 800046e:	bf00      	nop

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800047c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800048c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000498:	68fb      	ldr	r3, [r7, #12]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f001 f9b1 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f809 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 f86b 	bl	800058c <MX_GPIO_Init>
  MX_USB_Device_Init();
 80004b6:	f000 fa8b 	bl	80009d0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED3);
 80004ba:	2002      	movs	r0, #2
 80004bc:	f001 f940 	bl	8001740 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x1a>
	...

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09a      	sub	sp, #104	; 0x68
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0320 	add.w	r3, r7, #32
 80004ce:	2248      	movs	r2, #72	; 0x48
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f00a ffba 	bl	800b44c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ea:	4b27      	ldr	r3, [pc, #156]	; (8000588 <SystemClock_Config+0xc4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004f2:	4a25      	ldr	r2, [pc, #148]	; (8000588 <SystemClock_Config+0xc4>)
 80004f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4b23      	ldr	r3, [pc, #140]	; (8000588 <SystemClock_Config+0xc4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000506:	2320      	movs	r3, #32
 8000508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800050e:	2300      	movs	r3, #0
 8000510:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000512:	2360      	movs	r3, #96	; 0x60
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800051a:	2301      	movs	r3, #1
 800051c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000522:	2320      	movs	r3, #32
 8000524:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000526:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800052a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000530:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000532:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000536:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0320 	add.w	r3, r7, #32
 800053c:	4618      	mov	r0, r3
 800053e:	f004 fa41 	bl	80049c4 <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000548:	f000 f827 	bl	800059a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800054c:	236f      	movs	r3, #111	; 0x6f
 800054e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2303      	movs	r3, #3
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2103      	movs	r1, #3
 800056c:	4618      	mov	r0, r3
 800056e:	f004 fdb5 	bl	80050dc <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000578:	f000 f80f 	bl	800059a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800057c:	f005 f888 	bl	8005690 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000580:	bf00      	nop
 8000582:	3768      	adds	r7, #104	; 0x68
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	58000400 	.word	0x58000400

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ff6f 	bl	8000474 <LL_AHB2_GRP1_EnableClock>

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}

0800059a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  BSP_LED_On(LED3);
 800059e:	2002      	movs	r0, #2
 80005a0:	f001 f908 	bl	80017b4 <BSP_LED_On>
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0xa>

080005a6 <LL_AHB1_GRP1_EnableClock>:
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4013      	ands	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ca:	68fb      	ldr	r3, [r7, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <LL_AHB2_GRP1_EnableClock>:
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4013      	ands	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800060a:	b480      	push	{r7}
 800060c:	b085      	sub	sp, #20
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000616:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4313      	orrs	r3, r2
 8000620:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4013      	ands	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800064a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4313      	orrs	r3, r2
 8000652:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000660:	68fb      	ldr	r3, [r7, #12]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4313      	orrs	r3, r2
 8000684:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800069a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800069e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	43db      	mvns	r3, r3
 80006a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006a8:	4013      	ands	r3, r2
 80006aa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <HAL_TIM_Base_MspInit>:
  *           - Peripheral's clock enable
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /*##-1- Enable peripheral clock #################################*/
  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 80006c0:	2001      	movs	r0, #1
 80006c2:	f7ff ffa2 	bl	800060a <LL_APB1_GRP1_EnableClock>

  /*##-2- Configure the NVIC for TIMx ########################################*/
  /* Set the TIMx priority */
  HAL_NVIC_SetPriority(TIMx_IRQn, 3, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2103      	movs	r1, #3
 80006ca:	201c      	movs	r0, #28
 80006cc:	f001 fa25 	bl	8001b1a <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80006d0:	201c      	movs	r0, #28
 80006d2:	f001 fa3c 	bl	8001b4e <HAL_NVIC_EnableIRQ>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80006e8:	2002      	movs	r0, #2
 80006ea:	f7ff ff75 	bl	80005d8 <LL_AHB2_GRP1_EnableClock>
  USARTx_RX_GPIO_CLK_ENABLE();
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff ff72 	bl	80005d8 <LL_AHB2_GRP1_EnableClock>

  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80006f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006f8:	f7ff ffa0 	bl	800063c <LL_APB2_GRP1_EnableClock>

  /* Enable DMA clock */
  DMAx_CLK_ENABLE();
 80006fc:	2001      	movs	r0, #1
 80006fe:	f7ff ff52 	bl	80005a6 <LL_AHB1_GRP1_EnableClock>
 8000702:	2004      	movs	r0, #4
 8000704:	f7ff ff4f 	bl	80005a6 <LL_AHB1_GRP1_EnableClock>

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000710:	2301      	movs	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000718:	2307      	movs	r3, #7
 800071a:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4822      	ldr	r0, [pc, #136]	; (80007ac <HAL_UART_MspInit+0xcc>)
 8000724:	f001 fe04 	bl	8002330 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800072c:	2307      	movs	r3, #7
 800072e:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <HAL_UART_MspInit+0xcc>)
 8000738:	f001 fdfa 	bl	8002330 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for UART ########################################*/
  HAL_NVIC_SetPriority(USARTx_IRQn, 5, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2105      	movs	r1, #5
 8000740:	2024      	movs	r0, #36	; 0x24
 8000742:	f001 f9ea 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8000746:	2024      	movs	r0, #36	; 0x24
 8000748:	f001 fa01 	bl	8001b4e <HAL_NVIC_EnableIRQ>

  /*##-4- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <HAL_UART_MspInit+0xd4>)
 8000750:	601a      	str	r2, [r3, #0]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000754:	2210      	movs	r2, #16
 8000756:	609a      	str	r2, [r3, #8]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	611a      	str	r2, [r3, #16]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 800077e:	220f      	movs	r2, #15
 8000780:	605a      	str	r2, [r3, #4]

  HAL_DMA_Init(&hdma_tx);
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000784:	f001 fa0c 	bl	8001ba0 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 800078c:	679a      	str	r2, [r3, #120]	; 0x78
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_UART_MspInit+0xd0>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6293      	str	r3, [r2, #40]	; 0x28

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 6, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2106      	movs	r1, #6
 8000798:	200b      	movs	r0, #11
 800079a:	f001 f9be 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800079e:	200b      	movs	r0, #11
 80007a0:	f001 f9d5 	bl	8001b4e <HAL_NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	48000400 	.word	0x48000400
 80007b0:	200001b8 	.word	0x200001b8
 80007b4:	40020008 	.word	0x40020008

080007b8 <HAL_UART_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  /*##-1- Reset peripherals ##################################################*/
  USARTx_FORCE_RESET();
 80007c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007c4:	f7ff ff53 	bl	800066e <LL_APB2_GRP1_ForceReset>
  USARTx_RELEASE_RESET();
 80007c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007cc:	f7ff ff61 	bl	8000692 <LL_APB2_GRP1_ReleaseReset>

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-Initialize UART Tx as alternate function  */
  HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <HAL_UART_MspDeInit+0x44>)
 80007d4:	f001 ff1c 	bl	8002610 <HAL_GPIO_DeInit>
  /* De-Initialize UART Rx as alternate function  */
  HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <HAL_UART_MspDeInit+0x44>)
 80007dc:	f001 ff18 	bl	8002610 <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA Channels ###########################################*/
  /* De-Initialize the DMA Channel associated to reception process */
  HAL_DMA_DeInit(&hdma_tx);
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <HAL_UART_MspDeInit+0x48>)
 80007e2:	f001 fa85 	bl	8001cf0 <HAL_DMA_DeInit>

  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
 80007e6:	200b      	movs	r0, #11
 80007e8:	f001 f9bf 	bl	8001b6a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(USARTx_RX_IRQn);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f001 f9bc 	bl	8001b6a <HAL_NVIC_DisableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	48000400 	.word	0x48000400
 8000800:	200001b8 	.word	0x200001b8

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <HardFault_Handler+0x4>

0800081e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <BusFault_Handler+0x4>

0800082a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f001 f831 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <USB_LP_IRQHandler+0x10>)
 800086e:	f002 f8cc 	bl	8002a0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001860 	.word	0x20001860

0800087c <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <TIM2_IRQHandler+0x10>)
 8000882:	f004 ffeb 	bl	800585c <HAL_TIM_IRQHandler>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200017ac 	.word	0x200017ac

08000890 <DMA1_Channel1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <DMA1_Channel1_IRQHandler+0x14>)
 8000896:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fbf8 	bl	800208e <HAL_DMA_IRQHandler>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000714 	.word	0x20000714

080008a8 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART1_IRQHandler+0x10>)
 80008ae:	f005 fb33 	bl	8005f18 <HAL_UART_IRQHandler>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000714 	.word	0x20000714

080008bc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80008bc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008be:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c0:	3304      	adds	r3, #4

080008c2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80008c6:	d3f9      	bcc.n	80008bc <CopyDataInit>
  bx lr
 80008c8:	4770      	bx	lr

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80008ca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80008cc:	3004      	adds	r0, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80008ce:	4288      	cmp	r0, r1
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
  bx lr
 80008d2:	4770      	bx	lr

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f000 ff86 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <LoopForever+0x8>)
 80008de:	490c      	ldr	r1, [pc, #48]	; (8000910 <LoopForever+0xc>)
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <LoopForever+0x10>)
 80008e2:	2300      	movs	r3, #0
 80008e4:	f7ff ffed 	bl	80008c2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80008e8:	480b      	ldr	r0, [pc, #44]	; (8000918 <LoopForever+0x14>)
 80008ea:	490c      	ldr	r1, [pc, #48]	; (800091c <LoopForever+0x18>)
 80008ec:	2300      	movs	r3, #0
 80008ee:	f7ff ffee 	bl	80008ce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <LoopForever+0x1c>)
 80008f4:	490b      	ldr	r1, [pc, #44]	; (8000924 <LoopForever+0x20>)
 80008f6:	2300      	movs	r3, #0
 80008f8:	f7ff ffe9 	bl	80008ce <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fc:	f00a fd82 	bl	800b404 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000900:	f7ff fdd1 	bl	80004a6 <main>

08000904 <LoopForever>:

LoopForever:
  b LoopForever
 8000904:	e7fe      	b.n	8000904 <LoopForever>
 8000906:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000908:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800090c:	20000008 	.word	0x20000008
 8000910:	2000019c 	.word	0x2000019c
 8000914:	0800b5c4 	.word	0x0800b5c4
  INIT_BSS _sbss, _ebss
 8000918:	2000019c 	.word	0x2000019c
 800091c:	20001b58 	.word	0x20001b58
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000920:	20030000 	.word	0x20030000
 8000924:	20030000 	.word	0x20030000

08000928 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_IRQHandler>

0800092a <LL_APB1_GRP1_EnableClock>:
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4313      	orrs	r3, r2
 8000940:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b098      	sub	sp, #96	; 0x60
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	2248      	movs	r2, #72	; 0x48
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00a fd6e 	bl	800b44c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000980:	2340      	movs	r3, #64	; 0x40
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	2300      	movs	r3, #0
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800098c:	f107 0318 	add.w	r3, r7, #24
 8000990:	4618      	mov	r0, r3
 8000992:	f004 f817 	bl	80049c4 <HAL_RCC_OscConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800099c:	f7ff fdfd 	bl	800059a <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 80009a0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80009a4:	f7ff ffc1 	bl	800092a <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80009ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009b0:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 80009b2:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80009b6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80009b8:	2322      	movs	r3, #34	; 0x22
 80009ba:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80009bc:	2320      	movs	r3, #32
 80009be:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 80009c0:	463b      	mov	r3, r7
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 fe6a 	bl	800569c <HAL_RCCEx_CRSConfig>
}
 80009c8:	bf00      	nop
 80009ca:	3760      	adds	r7, #96	; 0x60
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 80009d4:	f7ff ffc2 	bl	800095c <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80009d8:	2200      	movs	r2, #0
 80009da:	4912      	ldr	r1, [pc, #72]	; (8000a24 <MX_USB_Device_Init+0x54>)
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_USB_Device_Init+0x58>)
 80009de:	f009 fc1b 	bl	800a218 <USBD_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USB_Device_Init+0x1c>
    Error_Handler();
 80009e8:	f7ff fdd7 	bl	800059a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80009ec:	490f      	ldr	r1, [pc, #60]	; (8000a2c <MX_USB_Device_Init+0x5c>)
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_USB_Device_Init+0x58>)
 80009f0:	f009 fc42 	bl	800a278 <USBD_RegisterClass>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USB_Device_Init+0x2e>
    Error_Handler();
 80009fa:	f7ff fdce 	bl	800059a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80009fe:	490c      	ldr	r1, [pc, #48]	; (8000a30 <MX_USB_Device_Init+0x60>)
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_USB_Device_Init+0x58>)
 8000a02:	f009 fb63 	bl	800a0cc <USBD_CDC_RegisterInterface>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8000a0c:	f7ff fdc5 	bl	800059a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USB_Device_Init+0x58>)
 8000a12:	f009 fc58 	bl	800a2c6 <USBD_Start>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8000a1c:	f7ff fdbd 	bl	800059a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000024 	.word	0x20000024
 8000a28:	2000043c 	.word	0x2000043c
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	20000010 	.word	0x20000010

08000a34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
      - Word Length = 8 Bits
      - Stop Bit    = One Stop bit
      - Parity      = No parity
      - BaudRate    = 115200 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance          = USARTx;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	; (8000aa8 <CDC_Init_FS+0x74>)
 8000a3c:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate     = 115200;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a60:	220c      	movs	r2, #12
 8000a62:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a66:	f005 f8e3 	bl	8005c30 <HAL_UART_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <CDC_Init_FS+0x40>
  {
    /* Initialization Error */
    Error_Handler();
 8000a70:	f7ff fd93 	bl	800059a <Error_Handler>
  }

  /*##-2- Put UART peripheral in IT reception process ########################*/
  /* Any data received will be stored in "UserTxBufferFS" buffer  */
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8000a74:	2201      	movs	r2, #1
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <CDC_Init_FS+0x78>)
 8000a78:	480a      	ldr	r0, [pc, #40]	; (8000aa4 <CDC_Init_FS+0x70>)
 8000a7a:	f005 f965 	bl	8005d48 <HAL_UART_Receive_IT>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <CDC_Init_FS+0x54>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8000a84:	f7ff fd89 	bl	800059a <Error_Handler>
  }

  /*##-3- Configure the TIM Base generation  #################################*/
  TIM_Config();
 8000a88:	f000 f988 	bl	8000d9c <TIM_Config>

  /*##-5- Set Application Buffers ############################################*/
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4907      	ldr	r1, [pc, #28]	; (8000aac <CDC_Init_FS+0x78>)
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <CDC_Init_FS+0x7c>)
 8000a92:	f009 fb30 	bl	800a0f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000a96:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <CDC_Init_FS+0x80>)
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <CDC_Init_FS+0x7c>)
 8000a9a:	f009 fb4a 	bl	800a132 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000a9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000714 	.word	0x20000714
 8000aa8:	40013800 	.word	0x40013800
 8000aac:	20000fa4 	.word	0x20000fa4
 8000ab0:	2000043c 	.word	0x2000043c
 8000ab4:	200007a4 	.word	0x200007a4

08000ab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  /* DeInitialize the UART peripheral */
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <CDC_DeInit_FS+0x1c>)
 8000abe:	f005 f907 	bl	8005cd0 <HAL_UART_DeInit>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <CDC_DeInit_FS+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 8000ac8:	f7ff fd67 	bl	800059a <Error_Handler>
  }
  return (USBD_OK);
 8000acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000714 	.word	0x20000714

08000ad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2b23      	cmp	r3, #35	; 0x23
 8000aec:	f200 809a 	bhi.w	8000c24 <CDC_Control_FS+0x14c>
 8000af0:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <CDC_Control_FS+0x20>)
 8000af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af6:	bf00      	nop
 8000af8:	08000c25 	.word	0x08000c25
 8000afc:	08000c25 	.word	0x08000c25
 8000b00:	08000c25 	.word	0x08000c25
 8000b04:	08000c25 	.word	0x08000c25
 8000b08:	08000c25 	.word	0x08000c25
 8000b0c:	08000c25 	.word	0x08000c25
 8000b10:	08000c25 	.word	0x08000c25
 8000b14:	08000c25 	.word	0x08000c25
 8000b18:	08000c25 	.word	0x08000c25
 8000b1c:	08000c25 	.word	0x08000c25
 8000b20:	08000c25 	.word	0x08000c25
 8000b24:	08000c25 	.word	0x08000c25
 8000b28:	08000c25 	.word	0x08000c25
 8000b2c:	08000c25 	.word	0x08000c25
 8000b30:	08000c25 	.word	0x08000c25
 8000b34:	08000c25 	.word	0x08000c25
 8000b38:	08000c25 	.word	0x08000c25
 8000b3c:	08000c25 	.word	0x08000c25
 8000b40:	08000c25 	.word	0x08000c25
 8000b44:	08000c25 	.word	0x08000c25
 8000b48:	08000c25 	.word	0x08000c25
 8000b4c:	08000c25 	.word	0x08000c25
 8000b50:	08000c25 	.word	0x08000c25
 8000b54:	08000c25 	.word	0x08000c25
 8000b58:	08000c25 	.word	0x08000c25
 8000b5c:	08000c25 	.word	0x08000c25
 8000b60:	08000c25 	.word	0x08000c25
 8000b64:	08000c25 	.word	0x08000c25
 8000b68:	08000c25 	.word	0x08000c25
 8000b6c:	08000c25 	.word	0x08000c25
 8000b70:	08000c25 	.word	0x08000c25
 8000b74:	08000c25 	.word	0x08000c25
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000bd1 	.word	0x08000bd1
 8000b80:	08000c25 	.word	0x08000c25
 8000b84:	08000c25 	.word	0x08000c25
    case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  	case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	3302      	adds	r3, #2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	041b      	lsls	r3, r3, #16
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8000ba0:	431a      	orrs	r2, r3
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3303      	adds	r3, #3
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	061b      	lsls	r3, r3, #24
 8000baa:	4313      	orrs	r3, r2
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bb0:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	791a      	ldrb	r2, [r3, #4]
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bb8:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	795a      	ldrb	r2, [r3, #5]
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bc0:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	799a      	ldrb	r2, [r3, #6]
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bc8:	719a      	strb	r2, [r3, #6]

    /* Set the new configuration */
    ComPort_Config();
 8000bca:	f000 f867 	bl	8000c9c <ComPort_Config>
    break;
 8000bce:	e02a      	b.n	8000c26 <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0a1a      	lsrs	r2, r3, #8
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	0c1a      	lsrs	r2, r3, #16
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <CDC_Control_FS+0x158>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	0e1a      	lsrs	r2, r3, #24
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	701a      	strb	r2, [r3, #0]
    pbuf[4] = LineCoding.format;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	3304      	adds	r3, #4
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <CDC_Control_FS+0x158>)
 8000c0a:	7912      	ldrb	r2, [r2, #4]
 8000c0c:	701a      	strb	r2, [r3, #0]
    pbuf[5] = LineCoding.paritytype;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3305      	adds	r3, #5
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <CDC_Control_FS+0x158>)
 8000c14:	7952      	ldrb	r2, [r2, #5]
 8000c16:	701a      	strb	r2, [r3, #0]
    pbuf[6] = LineCoding.datatype;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <CDC_Control_FS+0x158>)
 8000c1e:	7992      	ldrb	r2, [r2, #6]
 8000c20:	701a      	strb	r2, [r3, #0]
    break;
 8000c22:	e000      	b.n	8000c26 <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:
    /* Add your code here */
    break;

  default:
    break;
 8000c24:	bf00      	nop
  }

  return (USBD_OK);
 8000c26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000008 	.word	0x20000008

08000c34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  HAL_UART_Transmit_DMA(&UartHandle, Buf, *Len);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <CDC_Receive_FS+0x24>)
 8000c4a:	f005 f8d3 	bl	8005df4 <HAL_UART_Transmit_DMA>
  return (USBD_OK);
 8000c4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000714 	.word	0x20000714

08000c5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <HAL_UART_TxCpltCallback+0x18>)
 8000c8a:	f009 fa9b 	bl	800a1c4 <USBD_CDC_ReceivePacket>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000043c 	.word	0x2000043c

08000c9c <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8000ca0:	483a      	ldr	r0, [pc, #232]	; (8000d8c <ComPort_Config+0xf0>)
 8000ca2:	f005 f815 	bl	8005cd0 <HAL_UART_DeInit>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 8000cac:	f7ff fc75 	bl	800059a <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <ComPort_Config+0xf4>)
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <ComPort_Config+0x22>
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d004      	beq.n	8000cc6 <ComPort_Config+0x2a>
 8000cbc:	e008      	b.n	8000cd0 <ComPort_Config+0x34>
  {
  case 0:
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000cbe:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <ComPort_Config+0xf0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
    break;
 8000cc4:	e008      	b.n	8000cd8 <ComPort_Config+0x3c>
  case 2:
    UartHandle.Init.StopBits = UART_STOPBITS_2;
 8000cc6:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <ComPort_Config+0xf0>)
 8000cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ccc:	60da      	str	r2, [r3, #12]
    break;
 8000cce:	e003      	b.n	8000cd8 <ComPort_Config+0x3c>
  default :
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <ComPort_Config+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
    break;
 8000cd6:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <ComPort_Config+0xf4>)
 8000cda:	795b      	ldrb	r3, [r3, #5]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d00f      	beq.n	8000d00 <ComPort_Config+0x64>
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	dc12      	bgt.n	8000d0a <ComPort_Config+0x6e>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <ComPort_Config+0x52>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d004      	beq.n	8000cf6 <ComPort_Config+0x5a>
 8000cec:	e00d      	b.n	8000d0a <ComPort_Config+0x6e>
  {
  case 0:
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <ComPort_Config+0xf0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
    break;
 8000cf4:	e00d      	b.n	8000d12 <ComPort_Config+0x76>
  case 1:
    UartHandle.Init.Parity = UART_PARITY_ODD;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <ComPort_Config+0xf0>)
 8000cf8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000cfc:	611a      	str	r2, [r3, #16]
    break;
 8000cfe:	e008      	b.n	8000d12 <ComPort_Config+0x76>
  case 2:
    UartHandle.Init.Parity = UART_PARITY_EVEN;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <ComPort_Config+0xf0>)
 8000d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d06:	611a      	str	r2, [r3, #16]
    break;
 8000d08:	e003      	b.n	8000d12 <ComPort_Config+0x76>
  default :
    UartHandle.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <ComPort_Config+0xf0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
    break;
 8000d10:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <ComPort_Config+0xf4>)
 8000d14:	799b      	ldrb	r3, [r3, #6]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d002      	beq.n	8000d20 <ComPort_Config+0x84>
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d004      	beq.n	8000d28 <ComPort_Config+0x8c>
 8000d1e:	e010      	b.n	8000d42 <ComPort_Config+0xa6>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <ComPort_Config+0xf0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    break;
 8000d26:	e010      	b.n	8000d4a <ComPort_Config+0xae>
  case 0x08:
    if(UartHandle.Init.Parity == UART_PARITY_NONE)
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <ComPort_Config+0xf0>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <ComPort_Config+0x9c>
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <ComPort_Config+0xf0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
    else
    {
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8000d36:	e008      	b.n	8000d4a <ComPort_Config+0xae>
      UartHandle.Init.WordLength = UART_WORDLENGTH_9B;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <ComPort_Config+0xf0>)
 8000d3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d3e:	609a      	str	r2, [r3, #8]
    break;
 8000d40:	e003      	b.n	8000d4a <ComPort_Config+0xae>
  default :
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <ComPort_Config+0xf0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
    break;
 8000d48:	bf00      	nop
  }

  UartHandle.Init.BaudRate     = LineCoding.bitrate;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <ComPort_Config+0xf4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <ComPort_Config+0xf0>)
 8000d50:	6053      	str	r3, [r2, #4]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <ComPort_Config+0xf0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <ComPort_Config+0xf0>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <ComPort_Config+0xf0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <ComPort_Config+0xf0>)
 8000d66:	f004 ff63 	bl	8005c30 <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <ComPort_Config+0xd8>
  {
    /* Initialization Error */
    Error_Handler();
 8000d70:	f7ff fc13 	bl	800059a <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&UartHandle, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <ComPort_Config+0xf8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <ComPort_Config+0xfc>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <ComPort_Config+0xf0>)
 8000d82:	f004 ffe1 	bl	8005d48 <HAL_UART_Receive_IT>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000714 	.word	0x20000714
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200017f8 	.word	0x200017f8
 8000d98:	20000fa4 	.word	0x20000fa4

08000d9c <TIM_Config>:
  * @brief  TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
 void TIM_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
      2) by calling HAL API function HAL_RCC_GetSysClockFreq()
      3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value to have TIMx counter clock equal to 10000 Hz */
  uwPrescalerValue = (uint32_t)(SystemCoreClock / 10000) - 1;
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <TIM_Config+0x6c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <TIM_Config+0x70>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0b5b      	lsrs	r3, r3, #13
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <TIM_Config+0x74>)
 8000db0:	6013      	str	r3, [r2, #0]

  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <TIM_Config+0x78>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = (SystemCoreClock/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period            = 10000 - 1;
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <TIM_Config+0x78>)
 8000dbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dc0:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler         = uwPrescalerValue;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <TIM_Config+0x74>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <TIM_Config+0x78>)
 8000dc8:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision     = 0;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <TIM_Config+0x78>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <TIM_Config+0x78>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  TimHandle.Init.RepetitionCounter = 0;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <TIM_Config+0x78>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <TIM_Config+0x78>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8000de2:	480c      	ldr	r0, [pc, #48]	; (8000e14 <TIM_Config+0x78>)
 8000de4:	f004 fc94 	bl	8005710 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <TIM_Config+0x56>
  {
    /* Initialization Error */
    Error_Handler();
 8000dee:	f7ff fbd4 	bl	800059a <Error_Handler>
  }

  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  /* Start Channel1 */
  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <TIM_Config+0x78>)
 8000df4:	f004 fce4 	bl	80057c0 <HAL_TIM_Base_Start_IT>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <TIM_Config+0x66>
  {
    /* Starting Error */
    Error_Handler();
 8000dfe:	f7ff fbcc 	bl	800059a <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000080 	.word	0x20000080
 8000e0c:	d1b71759 	.word	0xd1b71759
 8000e10:	200017a8 	.word	0x200017a8
 8000e14:	200017ac 	.word	0x200017ac

08000e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Transfer error occurred in reception and/or transmission process */
  Error_Handler();
 8000e20:	f7ff fbbb 	bl	800059a <Error_Handler>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d030      	beq.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x76>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d905      	bls.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e005      	b.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x38>
    }
    else
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e76:	f009 f93e 	bl	800a0f6 <USBD_CDC_SetTxBuffer>

    if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e7c:	f009 f972 	bl	800a164 <USBD_CDC_TransmitPacket>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10d      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x76>
    {
      UserTxBufPtrOut += buffsize;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e90:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e9a:	d102      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x76>
      {
        UserTxBufPtrOut = 0;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200017a4 	.word	0x200017a4
 8000eb0:	200017f8 	.word	0x200017f8
 8000eb4:	20000fa4 	.word	0x20000fa4
 8000eb8:	2000043c 	.word	0x2000043c

08000ebc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ed6:	d102      	bne.n	8000ede <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_UART_RxCpltCallback+0x3c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_UART_RxCpltCallback+0x40>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f004 ff2c 	bl	8005d48 <HAL_UART_Receive_IT>


}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200017f8 	.word	0x200017f8
 8000efc:	20000fa4 	.word	0x20000fa4

08000f00 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2212      	movs	r2, #18
 8000f10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8000f12:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	20000040 	.word	0x20000040

08000f24 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2204      	movs	r2, #4
 8000f34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000f36:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	20000054 	.word	0x20000054

08000f48 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <USBD_CDC_ProductStrDescriptor+0x34>)
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <USBD_CDC_ProductStrDescriptor+0x38>)
 8000f60:	f00a f96f 	bl	800b242 <USBD_GetString>
 8000f64:	e004      	b.n	8000f70 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <USBD_CDC_ProductStrDescriptor+0x34>)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <USBD_CDC_ProductStrDescriptor+0x38>)
 8000f6c:	f00a f969 	bl	800b242 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200017fc 	.word	0x200017fc
 8000f80:	0800b474 	.word	0x0800b474

08000f84 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	4904      	ldr	r1, [pc, #16]	; (8000fa4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8000f96:	f00a f954 	bl	800b242 <USBD_GetString>
  return USBD_StrDesc;
 8000f9a:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200017fc 	.word	0x200017fc
 8000fa8:	0800b498 	.word	0x0800b498

08000fac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	221a      	movs	r2, #26
 8000fbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000fbe:	f000 f843 	bl	8001048 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8000fc2:	4b02      	ldr	r3, [pc, #8]	; (8000fcc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000058 	.word	0x20000058

08000fd0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8000fe8:	f00a f92b 	bl	800b242 <USBD_GetString>
 8000fec:	e004      	b.n	8000ff8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	4904      	ldr	r1, [pc, #16]	; (8001004 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8000ff4:	f00a f925 	bl	800b242 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200017fc 	.word	0x200017fc
 8001008:	0800b4ac 	.word	0x0800b4ac

0800100c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8001024:	f00a f90d 	bl	800b242 <USBD_GetString>
 8001028:	e004      	b.n	8001034 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8001030:	f00a f907 	bl	800b242 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200017fc 	.word	0x200017fc
 8001044:	0800b4b8 	.word	0x0800b4b8

08001048 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <Get_SerialNum+0x44>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <Get_SerialNum+0x48>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <Get_SerialNum+0x4c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d009      	beq.n	8001082 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800106e:	2208      	movs	r2, #8
 8001070:	4909      	ldr	r1, [pc, #36]	; (8001098 <Get_SerialNum+0x50>)
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f814 	bl	80010a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001078:	2204      	movs	r2, #4
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <Get_SerialNum+0x54>)
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f000 f80f 	bl	80010a0 <IntToUnicode>
  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	1fff7590 	.word	0x1fff7590
 8001090:	1fff7594 	.word	0x1fff7594
 8001094:	1fff7598 	.word	0x1fff7598
 8001098:	2000005a 	.word	0x2000005a
 800109c:	2000006a 	.word	0x2000006a

080010a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	4613      	mov	r3, r2
 80010ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	75fb      	strb	r3, [r7, #23]
 80010b6:	e027      	b.n	8001108 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	0f1b      	lsrs	r3, r3, #28
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d80b      	bhi.n	80010d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	0f1b      	lsrs	r3, r3, #28
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	7dfb      	ldrb	r3, [r7, #23]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	440b      	add	r3, r1
 80010d0:	3230      	adds	r2, #48	; 0x30
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e00a      	b.n	80010ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	0f1b      	lsrs	r3, r3, #28
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	440b      	add	r3, r1
 80010e8:	3237      	adds	r2, #55	; 0x37
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	3301      	adds	r3, #1
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	3301      	adds	r3, #1
 8001106:	75fb      	strb	r3, [r7, #23]
 8001108:	7dfa      	ldrb	r2, [r7, #23]
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3d3      	bcc.n	80010b8 <IntToUnicode+0x18>
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_AHB2_GRP1_EnableClock>:
{
 800111e:	b480      	push	{r7}
 8001120:	b085      	sub	sp, #20
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4013      	ands	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_APB1_GRP1_EnableClock>:
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800115e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a13      	ldr	r2, [pc, #76]	; (80011f0 <HAL_PCD_MspInit+0x6c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d120      	bne.n	80011e8 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ffb9 	bl	800111e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011be:	230a      	movs	r3, #10
 80011c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f001 f8b0 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011d0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80011d4:	f7ff ffbc 	bl	8001150 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 6, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2106      	movs	r1, #6
 80011dc:	2014      	movs	r0, #20
 80011de:	f000 fc9c 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80011e2:	2014      	movs	r0, #20
 80011e4:	f000 fcb3 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40006800 	.word	0x40006800

080011f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f009 f8a6 	bl	800a35c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	4619      	mov	r1, r3
 8001242:	f009 f8e0 	bl	800a406 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8001260:	78fa      	ldrb	r2, [r7, #3]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	333c      	adds	r3, #60	; 0x3c
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	4619      	mov	r1, r3
 8001276:	f009 f929 	bl	800a4cc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fa3d 	bl	800a710 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d001      	beq.n	80012b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80012b2:	f7ff f972 	bl	800059a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f009 f9e7 	bl	800a694 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f009 f993 	bl	800a5f8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f009 f9e2 	bl	800a6b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_PCD_SuspendCallback+0x30>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_PCD_SuspendCallback+0x30>)
 80012fe:	f043 0306 	orr.w	r3, r3, #6
 8001302:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_PCD_ResumeCallback+0x34>)
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_PCD_ResumeCallback+0x34>)
 8001326:	f023 0306 	bic.w	r3, r3, #6
 800132a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800132c:	f000 f9ba 	bl	80016a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8001336:	4618      	mov	r0, r3
 8001338:	f009 f9d2 	bl	800a6e0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8001350:	4a26      	ldr	r2, [pc, #152]	; (80013ec <USBD_LL_Init+0xa4>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <USBD_LL_Init+0xa4>)
 800135c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8001360:	f002 ffaa 	bl	80042b8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <USBD_LL_Init+0xa4>)
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <USBD_LL_Init+0xa8>)
 8001368:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <USBD_LL_Init+0xa4>)
 800136c:	2208      	movs	r2, #8
 800136e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <USBD_LL_Init+0xa4>)
 8001372:	2202      	movs	r2, #2
 8001374:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <USBD_LL_Init+0xa4>)
 8001378:	2202      	movs	r2, #2
 800137a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <USBD_LL_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <USBD_LL_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <USBD_LL_Init+0xa4>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <USBD_LL_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001394:	4815      	ldr	r0, [pc, #84]	; (80013ec <USBD_LL_Init+0xa4>)
 8001396:	f001 fa31 	bl	80027fc <HAL_PCD_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80013a0:	f7ff f8fb 	bl	800059a <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x00 , PCD_SNG_BUF, 0x14);
 80013a4:	2314      	movs	r3, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	4810      	ldr	r0, [pc, #64]	; (80013ec <USBD_LL_Init+0xa4>)
 80013ac:	f002 feec 	bl	8004188 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, 0x80 , PCD_SNG_BUF, 0x54);
 80013b0:	2354      	movs	r3, #84	; 0x54
 80013b2:	2200      	movs	r2, #0
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <USBD_LL_Init+0xa4>)
 80013b8:	f002 fee6 	bl	8004188 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, CDC_IN_EP, PCD_SNG_BUF, 0x94);
 80013bc:	2394      	movs	r3, #148	; 0x94
 80013be:	2200      	movs	r2, #0
 80013c0:	2181      	movs	r1, #129	; 0x81
 80013c2:	480a      	ldr	r0, [pc, #40]	; (80013ec <USBD_LL_Init+0xa4>)
 80013c4:	f002 fee0 	bl	8004188 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, CDC_OUT_EP, PCD_SNG_BUF, 0xD4);
 80013c8:	23d4      	movs	r3, #212	; 0xd4
 80013ca:	2200      	movs	r2, #0
 80013cc:	2101      	movs	r1, #1
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <USBD_LL_Init+0xa4>)
 80013d0:	f002 feda 	bl	8004188 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(&hpcd_USB_FS, CDC_CMD_EP, PCD_SNG_BUF, 0x114);
 80013d4:	f44f 738a 	mov.w	r3, #276	; 0x114
 80013d8:	2200      	movs	r2, #0
 80013da:	2182      	movs	r1, #130	; 0x82
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <USBD_LL_Init+0xa4>)
 80013de:	f002 fed3 	bl	8004188 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20001860 	.word	0x20001860
 80013f0:	40006800 	.word	0x40006800

080013f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fadb 	bl	80029c6 <HAL_PCD_Start>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f94c 	bl	80016b4 <USBD_Get_USB_Status>
 800141c:	4603      	mov	r3, r0
 800141e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001420:	7bbb      	ldrb	r3, [r7, #14]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	4608      	mov	r0, r1
 8001434:	4611      	mov	r1, r2
 8001436:	461a      	mov	r2, r3
 8001438:	4603      	mov	r3, r0
 800143a:	70fb      	strb	r3, [r7, #3]
 800143c:	460b      	mov	r3, r1
 800143e:	70bb      	strb	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001452:	78bb      	ldrb	r3, [r7, #2]
 8001454:	883a      	ldrh	r2, [r7, #0]
 8001456:	78f9      	ldrb	r1, [r7, #3]
 8001458:	f001 fc23 	bl	8002ca2 <HAL_PCD_EP_Open>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f926 	bl	80016b4 <USBD_Get_USB_Status>
 8001468:	4603      	mov	r3, r0
 800146a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800146c:	7bbb      	ldrb	r3, [r7, #14]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001490:	78fa      	ldrb	r2, [r7, #3]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f001 fc6a 	bl	8002d6e <HAL_PCD_EP_Close>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f907 	bl	80016b4 <USBD_Get_USB_Status>
 80014a6:	4603      	mov	r3, r0
 80014a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80014ce:	78fa      	ldrb	r2, [r7, #3]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fd2b 	bl	8002f2e <HAL_PCD_EP_SetStall>
 80014d8:	4603      	mov	r3, r0
 80014da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f8e8 	bl	80016b4 <USBD_Get_USB_Status>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f001 fd5e 	bl	8002fd2 <HAL_PCD_EP_ClrStall>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f8c9 	bl	80016b4 <USBD_Get_USB_Status>
 8001522:	4603      	mov	r3, r0
 8001524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001526:	7bbb      	ldrb	r3, [r7, #14]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001542:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001548:	2b00      	cmp	r3, #0
 800154a:	da0c      	bge.n	8001566 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800154c:	78fb      	ldrb	r3, [r7, #3]
 800154e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3302      	adds	r3, #2
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	e00b      	b.n	800157e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800156c:	68f9      	ldr	r1, [r7, #12]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800157c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fb55 	bl	8002c58 <HAL_PCD_SetAddress>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f87d 	bl	80016b4 <USBD_Get_USB_Status>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80015be:	7bbb      	ldrb	r3, [r7, #14]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	460b      	mov	r3, r1
 80015d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80015e6:	7af9      	ldrb	r1, [r7, #11]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	f001 fc5c 	bl	8002ea8 <HAL_PCD_EP_Transmit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f85c 	bl	80016b4 <USBD_Get_USB_Status>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001600:	7dbb      	ldrb	r3, [r7, #22]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	460b      	mov	r3, r1
 8001618:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8001628:	7af9      	ldrb	r1, [r7, #11]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f001 fbe6 	bl	8002dfe <HAL_PCD_EP_Receive>
 8001632:	4603      	mov	r3, r0
 8001634:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f83b 	bl	80016b4 <USBD_Get_USB_Status>
 800163e:	4603      	mov	r3, r0
 8001640:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001642:	7dbb      	ldrb	r3, [r7, #22]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fc08 	bl	8002e78 <HAL_PCD_EP_GetRxCount>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <USBD_static_malloc+0x18>)
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000218 	.word	0x20000218

08001690 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80016a8:	f7fe ff0c 	bl	80004c4 <SystemClock_Config>
  USBD_Clock_Config();
 80016ac:	f7ff f956 	bl	800095c <USBD_Clock_Config>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d817      	bhi.n	80016f8 <USBD_Get_USB_Status+0x44>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <USBD_Get_USB_Status+0x1c>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016e7 	.word	0x080016e7
 80016d8:	080016ed 	.word	0x080016ed
 80016dc:	080016f3 	.word	0x080016f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
    break;
 80016e4:	e00b      	b.n	80016fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80016e6:	2303      	movs	r3, #3
 80016e8:	73fb      	strb	r3, [r7, #15]
    break;
 80016ea:	e008      	b.n	80016fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
    break;
 80016f0:	e005      	b.n	80016fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80016f2:	2303      	movs	r3, #3
 80016f4:	73fb      	strb	r3, [r7, #15]
    break;
 80016f6:	e002      	b.n	80016fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80016f8:	2303      	movs	r3, #3
 80016fa:	73fb      	strb	r3, [r7, #15]
    break;
 80016fc:	bf00      	nop
  }
  return usb_status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_AHB2_GRP1_EnableClock>:
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800175a:	2002      	movs	r0, #2
 800175c:	f7ff ffd6 	bl	800170c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <BSP_LED_Init+0x6c>)
 8001764:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001768:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <BSP_LED_Init+0x70>)
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	f107 020c 	add.w	r2, r7, #12
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fdd3 	bl	8002330 <HAL_GPIO_Init>
  
//  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <BSP_LED_Init+0x70>)
 800178e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a05      	ldr	r2, [pc, #20]	; (80017ac <BSP_LED_Init+0x6c>)
 8001796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179a:	2201      	movs	r2, #1
 800179c:	4619      	mov	r1, r3
 800179e:	f001 f815 	bl	80027cc <HAL_GPIO_WritePin>
}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	0800b4f4 	.word	0x0800b4f4
 80017b0:	20000074 	.word	0x20000074

080017b4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <BSP_LED_On+0x2c>)
 80017c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <BSP_LED_On+0x30>)
 80017ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4619      	mov	r1, r3
 80017d2:	f000 fffb 	bl	80027cc <HAL_GPIO_WritePin>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000074 	.word	0x20000074
 80017e4:	0800b4f4 	.word	0x0800b4f4

080017e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <SystemInit+0x24>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x24>)
 80017f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <SystemInit+0x24>)
 80017fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_Init+0x3c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_Init+0x3c>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001826:	2003      	movs	r0, #3
 8001828:	f000 f96c 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182c:	2000      	movs	r0, #0
 800182e:	f000 f80f 	bl	8001850 <HAL_InitTick>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	e001      	b.n	8001842 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183e:	f7fe ffe1 	bl	8000804 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001842:	79fb      	ldrb	r3, [r7, #7]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	58004000 	.word	0x58004000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_InitTick+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d024      	beq.n	80018ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001864:	f003 fde8 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_InitTick+0x6c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001874:	fbb3 f3f1 	udiv	r3, r3, r1
 8001878:	fbb2 f3f3 	udiv	r3, r2, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f982 	bl	8001b86 <HAL_SYSTICK_Config>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10f      	bne.n	80018a8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	d809      	bhi.n	80018a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188e:	2200      	movs	r2, #0
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
 8001896:	f000 f940 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_InitTick+0x70>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e007      	b.n	80018b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e004      	b.n	80018b2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e001      	b.n	80018b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000088 	.word	0x20000088
 80018c0:	20000084 	.word	0x20000084

080018c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000088 	.word	0x20000088
 80018e8:	20001b54 	.word	0x20001b54

080018ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20001b54 	.word	0x20001b54

08001904 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTickPrio+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000084 	.word	0x20000084

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db12      	blt.n	80019f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <__NVIC_DisableIRQ+0x44>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	3320      	adds	r3, #32
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019e8:	f3bf 8f4f 	dsb	sy
}
 80019ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ee:	f3bf 8f6f 	isb	sy
}
 80019f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff05 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff1c 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff0f 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff1f 	bl	80019bc <__NVIC_DisableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff96 	bl	8001ac0 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e08e      	b.n	8001cd0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_DMA_Init+0x138>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d80f      	bhi.n	8001bde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <HAL_DMA_Init+0x13c>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_DMA_Init+0x140>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_DMA_Init+0x144>)
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	e00e      	b.n	8001bfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_DMA_Init+0x148>)
 8001be6:	4413      	add	r3, r2
 8001be8:	4a3d      	ldr	r2, [pc, #244]	; (8001ce0 <HAL_DMA_Init+0x140>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	009a      	lsls	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <HAL_DMA_Init+0x14c>)
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 fb0a 	bl	8002268 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5c:	d102      	bne.n	8001c64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001c70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <HAL_DMA_Init+0x106>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d80c      	bhi.n	8001ca6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fb29 	bl	80022e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	e008      	b.n	8001cb8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40020407 	.word	0x40020407
 8001cdc:	bffdfff8 	.word	0xbffdfff8
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	bffdfbf8 	.word	0xbffdfbf8
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e07b      	b.n	8001dfa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0201 	bic.w	r2, r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_DMA_DeInit+0x114>)
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d80f      	bhi.n	8001d3e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_DMA_DeInit+0x118>)
 8001d26:	4413      	add	r3, r2
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_DMA_DeInit+0x11c>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	009a      	lsls	r2, r3, #2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_DMA_DeInit+0x120>)
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d3c:	e00e      	b.n	8001d5c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <HAL_DMA_DeInit+0x124>)
 8001d46:	4413      	add	r3, r2
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_DMA_DeInit+0x11c>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	009a      	lsls	r2, r3, #2
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_DMA_DeInit+0x128>)
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 021c 	and.w	r2, r3, #28
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 fa75 	bl	8002268 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d8e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00f      	beq.n	8001db8 <HAL_DMA_DeInit+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d80b      	bhi.n	8001db8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fa9f 	bl	80022e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001db6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020407 	.word	0x40020407
 8001e08:	bffdfff8 	.word	0xbffdfff8
 8001e0c:	cccccccd 	.word	0xcccccccd
 8001e10:	40020000 	.word	0x40020000
 8001e14:	bffdfbf8 	.word	0xbffdfbf8
 8001e18:	40020400 	.word	0x40020400

08001e1c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA_Start_IT+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e066      	b.n	8001f0a <HAL_DMA_Start_IT+0xee>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d155      	bne.n	8001efc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0201 	bic.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f9b9 	bl	80021ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 020e 	orr.w	r2, r2, #14
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e00f      	b.n	8001eb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0204 	bic.w	r2, r2, #4
 8001ea2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 020a 	orr.w	r2, r2, #10
 8001eb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e005      	b.n	8001f08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04f      	b.n	8001fc4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e040      	b.n	8001fc4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 020e 	bic.w	r2, r2, #14
 8001f50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f003 021c 	and.w	r2, r3, #28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00c      	beq.n	8001fb2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d005      	beq.n	8001ff4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2204      	movs	r2, #4
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e047      	b.n	8002084 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020e 	bic.w	r2, r2, #14
 8002002:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f003 021c 	and.w	r2, r3, #28
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002040:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002058:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002062:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
    }
  }
  return status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 031c 	and.w	r3, r3, #28
 80020ae:	2204      	movs	r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d026      	beq.n	8002108 <HAL_DMA_IRQHandler+0x7a>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d021      	beq.n	8002108 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0204 	bic.w	r2, r2, #4
 80020e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f003 021c 	and.w	r2, r3, #28
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2104      	movs	r1, #4
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d071      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002106:	e06c      	b.n	80021e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f003 031c 	and.w	r3, r3, #28
 8002110:	2202      	movs	r2, #2
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d02e      	beq.n	800217a <HAL_DMA_IRQHandler+0xec>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d029      	beq.n	800217a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 020a 	bic.w	r2, r2, #10
 8002142:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f003 021c 	and.w	r2, r3, #28
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	2102      	movs	r1, #2
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d038      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002178:	e033      	b.n	80021e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 031c 	and.w	r3, r3, #28
 8002182:	2208      	movs	r2, #8
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x156>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d025      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020e 	bic.w	r2, r2, #14
 80021a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	f003 021c 	and.w	r2, r3, #28
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	2101      	movs	r1, #1
 80021b6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
}
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002202:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002214:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f003 021c 	and.w	r2, r3, #28
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f202 	lsl.w	r2, r1, r2
 8002228:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d108      	bne.n	800224c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800224a:	e007      	b.n	800225c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	60da      	str	r2, [r3, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002278:	429a      	cmp	r2, r3
 800227a:	d80a      	bhi.n	8002292 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002288:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6493      	str	r3, [r2, #72]	; 0x48
 8002290:	e007      	b.n	80022a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	009a      	lsls	r2, r3, #2
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800229c:	4413      	add	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3b08      	subs	r3, #8
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40020407 	.word	0x40020407
 80022d8:	4002081c 	.word	0x4002081c
 80022dc:	cccccccd 	.word	0xcccccccd
 80022e0:	40020880 	.word	0x40020880

080022e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002308:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3b01      	subs	r3, #1
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	1000823f 	.word	0x1000823f
 800232c:	40020940 	.word	0x40020940

08002330 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e14c      	b.n	80025da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 813e 	beq.w	80025d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d005      	beq.n	8002370 <HAL_GPIO_Init+0x40>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d130      	bne.n	80023d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a6:	2201      	movs	r2, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0201 	and.w	r2, r3, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d017      	beq.n	800240e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d123      	bne.n	8002462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 8098 	beq.w	80025d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x2c8>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ce:	d019      	beq.n	8002504 <HAL_GPIO_Init+0x1d4>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_GPIO_Init+0x2cc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_GPIO_Init+0x1d0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2d0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00d      	beq.n	80024fc <HAL_GPIO_Init+0x1cc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2d4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <HAL_GPIO_Init+0x1c8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_GPIO_Init+0x2d8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_GPIO_Init+0x1c4>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x1d6>
 80024f4:	2307      	movs	r3, #7
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x1d6>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1d6>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1d6>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1d6>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002516:	4938      	ldr	r1, [pc, #224]	; (80025f8 <HAL_GPIO_Init+0x2c8>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_GPIO_Init+0x2dc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002548:	4a30      	ldr	r2, [pc, #192]	; (800260c <HAL_GPIO_Init+0x2dc>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800254e:	4b2f      	ldr	r3, [pc, #188]	; (800260c <HAL_GPIO_Init+0x2dc>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_GPIO_Init+0x2dc>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_GPIO_Init+0x2dc>)
 800257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80025a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_GPIO_Init+0x2dc>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f aeab 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40010000 	.word	0x40010000
 80025fc:	48000400 	.word	0x48000400
 8002600:	48000800 	.word	0x48000800
 8002604:	48000c00 	.word	0x48000c00
 8002608:	48001000 	.word	0x48001000
 800260c:	58000800 	.word	0x58000800

08002610 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800261e:	e0bb      	b.n	8002798 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002620:	2201      	movs	r2, #1
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	4013      	ands	r3, r2
 800262c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80ae 	beq.w	8002792 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002636:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_GPIO_DeInit+0x1a4>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800265e:	d019      	beq.n	8002694 <HAL_GPIO_DeInit+0x84>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <HAL_GPIO_DeInit+0x1a8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_DeInit+0x80>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a54      	ldr	r2, [pc, #336]	; (80027bc <HAL_GPIO_DeInit+0x1ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_DeInit+0x7c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a53      	ldr	r2, [pc, #332]	; (80027c0 <HAL_GPIO_DeInit+0x1b0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_DeInit+0x78>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a52      	ldr	r2, [pc, #328]	; (80027c4 <HAL_GPIO_DeInit+0x1b4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_DeInit+0x74>
 8002680:	2304      	movs	r3, #4
 8002682:	e008      	b.n	8002696 <HAL_GPIO_DeInit+0x86>
 8002684:	2307      	movs	r3, #7
 8002686:	e006      	b.n	8002696 <HAL_GPIO_DeInit+0x86>
 8002688:	2303      	movs	r3, #3
 800268a:	e004      	b.n	8002696 <HAL_GPIO_DeInit+0x86>
 800268c:	2302      	movs	r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_DeInit+0x86>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <HAL_GPIO_DeInit+0x86>
 8002694:	2300      	movs	r3, #0
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	f002 0203 	and.w	r2, r2, #3
 800269c:	0092      	lsls	r2, r2, #2
 800269e:	4093      	lsls	r3, r2
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d136      	bne.n	8002714 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	4945      	ldr	r1, [pc, #276]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	4941      	ldr	r1, [pc, #260]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	493d      	ldr	r1, [pc, #244]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	4939      	ldr	r1, [pc, #228]	; (80027c8 <HAL_GPIO_DeInit+0x1b8>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	220f      	movs	r2, #15
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80026f6:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_GPIO_DeInit+0x1a4>)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43da      	mvns	r2, r3
 8002706:	482b      	ldr	r0, [pc, #172]	; (80027b4 <HAL_GPIO_DeInit+0x1a4>)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	400a      	ands	r2, r1
 800270e:	3302      	adds	r3, #2
 8002710:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2103      	movs	r1, #3
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	08d2      	lsrs	r2, r2, #3
 8002748:	4019      	ands	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2103      	movs	r1, #3
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	401a      	ands	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2103      	movs	r1, #3
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	401a      	ands	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f47f af3d 	bne.w	8002620 <HAL_GPIO_DeInit+0x10>
  }
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40010000 	.word	0x40010000
 80027b8:	48000400 	.word	0x48000400
 80027bc:	48000800 	.word	0x48000800
 80027c0:	48000c00 	.word	0x48000c00
 80027c4:	48001000 	.word	0x48001000
 80027c8:	58000800 	.word	0x58000800

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	b08b      	sub	sp, #44	; 0x2c
 8002800:	af06      	add	r7, sp, #24
 8002802:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0d7      	b.n	80029be <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fcae 	bl	8001184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f005 f972 	bl	8007b1e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e04c      	b.n	80028da <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	3301      	adds	r3, #1
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	b298      	uxth	r0, r3
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	3336      	adds	r3, #54	; 0x36
 800287e:	4602      	mov	r2, r0
 8002880:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	3303      	adds	r3, #3
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	3338      	adds	r3, #56	; 0x38
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	333c      	adds	r3, #60	; 0x3c
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	3340      	adds	r3, #64	; 0x40
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	3301      	adds	r3, #1
 80028d8:	73fb      	strb	r3, [r7, #15]
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d3ad      	bcc.n	8002840 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e044      	b.n	8002974 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	440b      	add	r3, r1
 800290e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	3301      	adds	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d3b5      	bcc.n	80028ea <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	687e      	ldr	r6, [r7, #4]
 8002986:	466d      	mov	r5, sp
 8002988:	f106 0410 	add.w	r4, r6, #16
 800298c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	1d33      	adds	r3, r6, #4
 8002996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f005 f8db 	bl	8007b54 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d102      	bne.n	80029bc <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f001 fc29 	bl	800420e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_Start+0x16>
 80029d8:	2302      	movs	r3, #2
 80029da:	e012      	b.n	8002a02 <HAL_PCD_Start+0x3c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f005 f881 	bl	8007af0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f007 f836 	bl	8009a64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f007 f83b 	bl	8009a92 <USB_ReadInterrupts>
 8002a1c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fb26 	bl	800307a <PCD_EP_ISR_Handler>

    return;
 8002a2e:	e110      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4c:	b292      	uxth	r2, r2
 8002a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fc23 	bl	800129e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8fc 	bl	8002c58 <HAL_PCD_SetAddress>

    return;
 8002a60:	e0f7      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002a84:	e0e5      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002aa8:	e0d3      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d034      	beq.n	8002b1e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0204 	bic.w	r2, r2, #4
 8002ac6:	b292      	uxth	r2, r2
 8002ac8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0208 	bic.w	r2, r2, #8
 8002ade:	b292      	uxth	r2, r2
 8002ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002af6:	2100      	movs	r1, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 fbb2 	bl	8004262 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fc06 	bl	8001310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b16:	b292      	uxth	r2, r2
 8002b18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002b1c:	e099      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d027      	beq.n	8002b78 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	b292      	uxth	r2, r2
 8002b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0204 	orr.w	r2, r2, #4
 8002b6a:	b292      	uxth	r2, r2
 8002b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fe fbb3 	bl	80012dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002b76:	e06c      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d040      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b94:	b292      	uxth	r2, r2
 8002b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0204 	orr.w	r2, r2, #4
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0208 	orr.w	r2, r2, #8
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f001 fb34 	bl	8004262 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002bfa:	e02a      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fb6d 	bl	80012dc <HAL_PCD_SuspendCallback>
    return;
 8002c02:	e026      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00f      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fb2b 	bl	8001282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c2c:	e011      	b.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00c      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002c50:	bf00      	nop
  }
}
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_PCD_SetAddress+0x1a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e013      	b.n	8002c9a <HAL_PCD_SetAddress+0x42>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fed6 	bl	8009a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	4608      	mov	r0, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	70fb      	strb	r3, [r7, #3]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	803b      	strh	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da0e      	bge.n	8002ce6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	705a      	strb	r2, [r3, #1]
 8002ce4:	e00e      	b.n	8002d04 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	f003 0207 	and.w	r2, r3, #7
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d10:	883a      	ldrh	r2, [r7, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	78ba      	ldrb	r2, [r7, #2]
 8002d1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d102      	bne.n	8002d3a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_EP_Open+0xa6>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e00e      	b.n	8002d66 <HAL_PCD_EP_Open+0xc4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 ff1e 	bl	8007b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d64:	7afb      	ldrb	r3, [r7, #11]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0e      	bge.n	8002da0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	705a      	strb	r2, [r3, #1]
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 0207 	and.w	r2, r3, #7
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_PCD_EP_Close+0x6a>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e00e      	b.n	8002df6 <HAL_PCD_EP_Close+0x88>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f005 fa6a 	bl	80082c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 0207 	and.w	r2, r3, #7
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3e:	7afb      	ldrb	r3, [r7, #11]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e4a:	7afb      	ldrb	r3, [r7, #11]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6979      	ldr	r1, [r7, #20]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f005 fc1d 	bl	800869a <USB_EPStartXfer>
 8002e60:	e005      	b.n	8002e6e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fc16 	bl	800869a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	7afb      	ldrb	r3, [r7, #11]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	7afb      	ldrb	r3, [r7, #11]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fbc2 	bl	800869a <USB_EPStartXfer>
 8002f16:	e005      	b.n	8002f24 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6979      	ldr	r1, [r7, #20]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f005 fbbb 	bl	800869a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 0207 	and.w	r2, r3, #7
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d901      	bls.n	8002f4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e03e      	b.n	8002fca <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da0e      	bge.n	8002f72 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	705a      	strb	r2, [r3, #1]
 8002f70:	e00c      	b.n	8002f8c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_PCD_EP_SetStall+0x7e>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e00e      	b.n	8002fca <HAL_PCD_EP_SetStall+0x9c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f006 fc3f 	bl	800983e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d901      	bls.n	8002ff0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e040      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0e      	bge.n	8003016 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0207 	and.w	r2, r3, #7
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_EP_ClrStall+0x82>
 8003050:	2302      	movs	r3, #2
 8003052:	e00e      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f006 fc3c 	bl	80098e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b096      	sub	sp, #88	; 0x58
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003082:	e39c      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800308c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800309e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 815e 	bne.w	8003364 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d150      	bne.n	8003156 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	81fb      	strh	r3, [r7, #14]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	89fb      	ldrh	r3, [r7, #14]
 80030cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3328      	adds	r3, #40	; 0x28
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	441a      	add	r2, r3
 8003110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003112:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003114:	2100      	movs	r1, #0
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe f899 	bl	800124e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 834a 	beq.w	80037be <PCD_EP_ISR_Handler+0x744>
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8345 	bne.w	80037be <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b292      	uxth	r2, r2
 8003148:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003154:	e333      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800315c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003168:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800316c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003170:	2b00      	cmp	r3, #0
 8003172:	d032      	beq.n	80031da <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	4413      	add	r3, r2
 800318e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f006 fcc1 	bl	8009b36 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031c0:	4013      	ands	r3, r2
 80031c2:	823b      	strh	r3, [r7, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	8a3a      	ldrh	r2, [r7, #16]
 80031ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ce:	b292      	uxth	r2, r2
 80031d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fe f80e 	bl	80011f4 <HAL_PCD_SetupStageCallback>
 80031d8:	e2f1      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031da:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f280 82ed 	bge.w	80037be <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031f0:	4013      	ands	r3, r2
 80031f2:	83fb      	strh	r3, [r7, #30]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	8bfa      	ldrh	r2, [r7, #30]
 80031fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031fe:	b292      	uxth	r2, r2
 8003200:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4413      	add	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	4413      	add	r3, r2
 800321c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800322a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <PCD_EP_ISR_Handler+0x1ec>
 8003232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d015      	beq.n	8003266 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	6959      	ldr	r1, [r3, #20]
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003248:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800324a:	b29b      	uxth	r3, r3
 800324c:	f006 fc73 	bl	8009b36 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	441a      	add	r2, r3
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800325e:	2100      	movs	r1, #0
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7fd ffd9 	bl	8001218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 82a3 	bne.w	80037be <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003286:	b29b      	uxth	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b3e      	cmp	r3, #62	; 0x3e
 800329e:	d918      	bls.n	80032d2 <PCD_EP_ISR_Handler+0x258>
 80032a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
 80032a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <PCD_EP_ISR_Handler+0x240>
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	3b01      	subs	r3, #1
 80032b8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032bc:	b29b      	uxth	r3, r3
 80032be:	029b      	lsls	r3, r3, #10
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	801a      	strh	r2, [r3, #0]
 80032d0:	e029      	b.n	8003326 <PCD_EP_ISR_Handler+0x2ac>
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d112      	bne.n	8003300 <PCD_EP_ISR_Handler+0x286>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	801a      	strh	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	e012      	b.n	8003326 <PCD_EP_ISR_Handler+0x2ac>
 8003300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
 8003308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <PCD_EP_ISR_Handler+0x2a0>
 8003314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003316:	3301      	adds	r3, #1
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
 800331a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331c:	b29b      	uxth	r3, r3
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	b29a      	uxth	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	827b      	strh	r3, [r7, #18]
 8003338:	8a7b      	ldrh	r3, [r7, #18]
 800333a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800333e:	827b      	strh	r3, [r7, #18]
 8003340:	8a7b      	ldrh	r3, [r7, #18]
 8003342:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003346:	827b      	strh	r3, [r7, #18]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	8a7b      	ldrh	r3, [r7, #18]
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
 8003362:	e22c      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003378:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800337c:	2b00      	cmp	r3, #0
 800337e:	f280 80f6 	bge.w	800356e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29a      	uxth	r2, r3
 8003394:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003398:	4013      	ands	r3, r2
 800339a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80033b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b4:	b292      	uxth	r2, r2
 80033b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033b8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d0:	7b1b      	ldrb	r3, [r3, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d123      	bne.n	800341e <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80033fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 808e 	beq.w	8003524 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800340e:	6959      	ldr	r1, [r3, #20]
 8003410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003412:	88da      	ldrh	r2, [r3, #6]
 8003414:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003418:	f006 fb8d 	bl	8009b36 <USB_ReadPMA>
 800341c:	e082      	b.n	8003524 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10a      	bne.n	800343c <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003426:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800342a:	461a      	mov	r2, r3
 800342c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9d3 	bl	80037da <HAL_PCD_EP_DB_Receive>
 8003434:	4603      	mov	r3, r0
 8003436:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800343a:	e073      	b.n	8003524 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d022      	beq.n	80034e0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80034c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d02c      	beq.n	8003524 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d0:	6959      	ldr	r1, [r3, #20]
 80034d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d4:	891a      	ldrh	r2, [r3, #8]
 80034d6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034da:	f006 fb2c 	bl	8009b36 <USB_ReadPMA>
 80034de:	e021      	b.n	8003524 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	4413      	add	r3, r2
 80034fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003504:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003508:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003516:	6959      	ldr	r1, [r3, #20]
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	895a      	ldrh	r2, [r3, #10]
 800351c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003520:	f006 fb09 	bl	8009b36 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800352c:	441a      	add	r2, r3
 800352e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003530:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800353a:	441a      	add	r2, r3
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <PCD_EP_ISR_Handler+0x4da>
 8003548:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800354c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d206      	bcs.n	8003562 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd fe5c 	bl	8001218 <HAL_PCD_DataOutStageCallback>
 8003560:	e005      	b.n	800356e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003568:	4618      	mov	r0, r3
 800356a:	f005 f896 	bl	800869a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800356e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8121 	beq.w	80037be <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800357c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80035c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80035cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ce:	78db      	ldrb	r3, [r3, #3]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	f000 80a2 	beq.w	800371a <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035de:	7b1b      	ldrb	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8093 	beq.w	800370c <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d046      	beq.n	8003680 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d126      	bne.n	8003648 <PCD_EP_ISR_Handler+0x5ce>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003608:	b29b      	uxth	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	4413      	add	r3, r2
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	00da      	lsls	r2, r3, #3
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	4413      	add	r3, r2
 800361c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003620:	623b      	str	r3, [r7, #32]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362c:	b29a      	uxth	r2, r3
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003640:	b29a      	uxth	r2, r3
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e061      	b.n	800370c <PCD_EP_ISR_Handler+0x692>
 8003648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d15d      	bne.n	800370c <PCD_EP_ISR_Handler+0x692>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	4413      	add	r3, r2
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	4413      	add	r3, r2
 8003672:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	2200      	movs	r2, #0
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	e045      	b.n	800370c <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003688:	785b      	ldrb	r3, [r3, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d126      	bne.n	80036dc <PCD_EP_ISR_Handler+0x662>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	4413      	add	r3, r2
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
 80036a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ae:	4413      	add	r3, r2
 80036b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	801a      	strh	r2, [r3, #0]
 80036da:	e017      	b.n	800370c <PCD_EP_ISR_Handler+0x692>
 80036dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d113      	bne.n	800370c <PCD_EP_ISR_Handler+0x692>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	4413      	add	r3, r2
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	00da      	lsls	r2, r3, #3
 80036fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fe:	4413      	add	r3, r2
 8003700:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2200      	movs	r2, #0
 800370a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800370c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fd9b 	bl	800124e <HAL_PCD_DataInStageCallback>
 8003718:	e051      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800371a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d144      	bne.n	80037b0 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372e:	b29b      	uxth	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	4413      	add	r3, r2
 8003740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003756:	429a      	cmp	r2, r3
 8003758:	d907      	bls.n	800376a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800375a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003766:	619a      	str	r2, [r3, #24]
 8003768:	e002      	b.n	8003770 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800376a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fd65 	bl	800124e <HAL_PCD_DataInStageCallback>
 8003784:	e01b      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800378e:	441a      	add	r2, r3
 8003790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003792:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003796:	69da      	ldr	r2, [r3, #28]
 8003798:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800379c:	441a      	add	r2, r3
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 ff76 	bl	800869a <USB_EPStartXfer>
 80037ae:	e006      	b.n	80037be <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b4:	461a      	mov	r2, r3
 80037b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f917 	bl	80039ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f6ff ac5a 	blt.w	8003084 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3758      	adds	r7, #88	; 0x58
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	4613      	mov	r3, r2
 80037e6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d07c      	beq.n	80038ec <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	4413      	add	r3, r2
 800380c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003816:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	8b7b      	ldrh	r3, [r7, #26]
 800381e:	429a      	cmp	r2, r3
 8003820:	d306      	bcc.n	8003830 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	8b7b      	ldrh	r3, [r7, #26]
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	619a      	str	r2, [r3, #24]
 800382e:	e002      	b.n	8003836 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d123      	bne.n	8003886 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	b29b      	uxth	r3, r3
 8003850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003858:	833b      	strh	r3, [r7, #24]
 800385a:	8b3b      	ldrh	r3, [r7, #24]
 800385c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003860:	833b      	strh	r3, [r7, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	441a      	add	r2, r3
 8003870:	8b3b      	ldrh	r3, [r7, #24]
 8003872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800387a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003882:	b29b      	uxth	r3, r3
 8003884:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01f      	beq.n	80038d0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	82fb      	strh	r3, [r7, #22]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038d0:	8b7b      	ldrh	r3, [r7, #26]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8085 	beq.w	80039e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6959      	ldr	r1, [r3, #20]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	891a      	ldrh	r2, [r3, #8]
 80038e4:	8b7b      	ldrh	r3, [r7, #26]
 80038e6:	f006 f926 	bl	8009b36 <USB_ReadPMA>
 80038ea:	e07a      	b.n	80039e2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	4413      	add	r3, r2
 8003906:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003910:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	8b7b      	ldrh	r3, [r7, #26]
 8003918:	429a      	cmp	r2, r3
 800391a:	d306      	bcc.n	800392a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	8b7b      	ldrh	r3, [r7, #26]
 8003922:	1ad2      	subs	r2, r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	619a      	str	r2, [r3, #24]
 8003928:	e002      	b.n	8003930 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d123      	bne.n	8003980 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29b      	uxth	r3, r3
 800394a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	83fb      	strh	r3, [r7, #30]
 8003954:	8bfb      	ldrh	r3, [r7, #30]
 8003956:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800395a:	83fb      	strh	r3, [r7, #30]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	8bfb      	ldrh	r3, [r7, #30]
 800396c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397c:	b29b      	uxth	r3, r3
 800397e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d11f      	bne.n	80039ca <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a4:	83bb      	strh	r3, [r7, #28]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	8bbb      	ldrh	r3, [r7, #28]
 80039b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039ca:	8b7b      	ldrh	r3, [r7, #26]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6959      	ldr	r1, [r3, #20]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	895a      	ldrh	r2, [r3, #10]
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	f006 f8aa 	bl	8009b36 <USB_ReadPMA>
    }
  }

  return count;
 80039e2:	8b7b      	ldrh	r3, [r7, #26]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b0a2      	sub	sp, #136	; 0x88
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 81c5 	beq.w	8003d90 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d907      	bls.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a42:	1ad2      	subs	r2, r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	619a      	str	r2, [r3, #24]
 8003a48:	e002      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 80b9 	bne.w	8003bcc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d126      	bne.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a76:	4413      	add	r3, r2
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	4413      	add	r3, r2
 8003a84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e01a      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d116      	bne.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	4413      	add	r3, r2
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	00da      	lsls	r2, r3, #3
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d126      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x156>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	4413      	add	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	00da      	lsls	r2, r3, #3
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e017      	b.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d113      	bne.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x186>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	4413      	add	r3, r2
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	00da      	lsls	r2, r3, #3
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b6a:	61fb      	str	r3, [r7, #28]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7fd fb68 	bl	800124e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 82d2 	beq.w	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba4:	827b      	strh	r3, [r7, #18]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	441a      	add	r2, r3
 8003bb4:	8a7b      	ldrh	r3, [r7, #18]
 8003bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	8013      	strh	r3, [r2, #0]
 8003bca:	e2b0      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 8284 	bne.w	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c2e:	441a      	add	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d309      	bcc.n	8003c62 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	621a      	str	r2, [r3, #32]
 8003c60:	e015      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8003c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c78:	e009      	b.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d155      	bne.n	8003d42 <HAL_PCD_EP_DB_Transmit+0x356>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	4413      	add	r3, r2
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	00da      	lsls	r2, r3, #3
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	2b3e      	cmp	r3, #62	; 0x3e
 8003cc2:	d916      	bls.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0x306>
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <HAL_PCD_EP_DB_Transmit+0x2ee>
 8003cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	e043      	b.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d112      	bne.n	8003d1e <HAL_PCD_EP_DB_Transmit+0x332>
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	e02d      	b.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_PCD_EP_DB_Transmit+0x348>
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d30:	3301      	adds	r3, #1
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	e01b      	b.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	785b      	ldrb	r3, [r3, #1]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d117      	bne.n	8003d7a <HAL_PCD_EP_DB_Transmit+0x38e>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5e:	4413      	add	r3, r2
 8003d60:	643b      	str	r3, [r7, #64]	; 0x40
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	00da      	lsls	r2, r3, #3
 8003d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6959      	ldr	r1, [r3, #20]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	891a      	ldrh	r2, [r3, #8]
 8003d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f005 fe92 	bl	8009ab2 <USB_WritePMA>
 8003d8e:	e1ce      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d307      	bcc.n	8003dd4 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	619a      	str	r2, [r3, #24]
 8003dd2:	e002      	b.n	8003dda <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 80c4 	bne.w	8003f6c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d126      	bne.n	8003e3a <HAL_PCD_EP_DB_Transmit+0x44e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e00:	4413      	add	r3, r2
 8003e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	00da      	lsls	r2, r3, #3
 8003e0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e12:	667b      	str	r3, [r7, #100]	; 0x64
 8003e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	e01a      	b.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x484>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d116      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x484>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	673b      	str	r3, [r7, #112]	; 0x70
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e56:	4413      	add	r3, r2
 8003e58:	673b      	str	r3, [r7, #112]	; 0x70
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	00da      	lsls	r2, r3, #3
 8003e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e62:	4413      	add	r3, r2
 8003e64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12f      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e96:	4413      	add	r3, r2
 8003e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	00da      	lsls	r2, r3, #3
 8003ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec2:	801a      	strh	r2, [r3, #0]
 8003ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	e017      	b.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x522>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d113      	bne.n	8003f0e <HAL_PCD_EP_DB_Transmit+0x522>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ef4:	4413      	add	r3, r2
 8003ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	00da      	lsls	r2, r3, #3
 8003efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f00:	4413      	add	r3, r2
 8003f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f06:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7fd f99a 	bl	800124e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8104 	bne.w	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]
 8003f6a:	e0e0      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d121      	bne.n	8003fba <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f90:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	f040 80b4 	bne.w	800412e <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fce:	441a      	add	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fdc:	441a      	add	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6a1a      	ldr	r2, [r3, #32]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d309      	bcc.n	8004002 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	621a      	str	r2, [r3, #32]
 8004000:	e015      	b.n	800402e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800400a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800400e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004018:	e009      	b.n	800402e <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	663b      	str	r3, [r7, #96]	; 0x60
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d155      	bne.n	80040e8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	65bb      	str	r3, [r7, #88]	; 0x58
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004050:	4413      	add	r3, r2
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00da      	lsls	r2, r3, #3
 800405a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800405c:	4413      	add	r3, r2
 800405e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
 8004064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004066:	2b3e      	cmp	r3, #62	; 0x3e
 8004068:	d916      	bls.n	8004098 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	677b      	str	r3, [r7, #116]	; 0x74
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	f003 031f 	and.w	r3, r3, #31
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <HAL_PCD_EP_DB_Transmit+0x694>
 800407a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407c:	3b01      	subs	r3, #1
 800407e:	677b      	str	r3, [r7, #116]	; 0x74
 8004080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004082:	b29b      	uxth	r3, r3
 8004084:	029b      	lsls	r3, r3, #10
 8004086:	b29b      	uxth	r3, r3
 8004088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004090:	b29a      	uxth	r2, r3
 8004092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004094:	801a      	strh	r2, [r3, #0]
 8004096:	e040      	b.n	800411a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d112      	bne.n	80040c4 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800409e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040bc:	b29a      	uxth	r2, r3
 80040be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	e02a      	b.n	800411a <HAL_PCD_EP_DB_Transmit+0x72e>
 80040c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c6:	085b      	lsrs	r3, r3, #1
 80040c8:	677b      	str	r3, [r7, #116]	; 0x74
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_PCD_EP_DB_Transmit+0x6ee>
 80040d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d6:	3301      	adds	r3, #1
 80040d8:	677b      	str	r3, [r7, #116]	; 0x74
 80040da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040dc:	b29b      	uxth	r3, r3
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	e018      	b.n	800411a <HAL_PCD_EP_DB_Transmit+0x72e>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	785b      	ldrb	r3, [r3, #1]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d114      	bne.n	800411a <HAL_PCD_EP_DB_Transmit+0x72e>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fe:	4413      	add	r3, r2
 8004100:	663b      	str	r3, [r7, #96]	; 0x60
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00da      	lsls	r2, r3, #3
 8004108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800410a:	4413      	add	r3, r2
 800410c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004114:	b29a      	uxth	r2, r3
 8004116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004118:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6959      	ldr	r1, [r3, #20]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	895a      	ldrh	r2, [r3, #10]
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	f005 fcc2 	bl	8009ab2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004148:	823b      	strh	r3, [r7, #16]
 800414a:	8a3b      	ldrh	r3, [r7, #16]
 800414c:	f083 0310 	eor.w	r3, r3, #16
 8004150:	823b      	strh	r3, [r7, #16]
 8004152:	8a3b      	ldrh	r3, [r7, #16]
 8004154:	f083 0320 	eor.w	r3, r3, #32
 8004158:	823b      	strh	r3, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	441a      	add	r2, r3
 8004168:	8a3b      	ldrh	r3, [r7, #16]
 800416a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417a:	b29b      	uxth	r3, r3
 800417c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3788      	adds	r7, #136	; 0x88
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	817b      	strh	r3, [r7, #10]
 8004196:	4613      	mov	r3, r2
 8004198:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4413      	add	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e009      	b.n	80041d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041be:	897a      	ldrh	r2, [r7, #10]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d107      	bne.n	80041e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	80da      	strh	r2, [r3, #6]
 80041e6:	e00b      	b.n	8004200 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2201      	movs	r2, #1
 80041ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004232:	b29b      	uxth	r3, r3
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004246:	b29b      	uxth	r3, r3
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	58000400 	.word	0x58000400

0800429c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	58000400 	.word	0x58000400

080042b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c6:	6053      	str	r3, [r2, #4]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	58000400 	.word	0x58000400

080042d8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ea:	d101      	bne.n	80042f0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
}
 800432e:	bf00      	nop
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800434a:	d101      	bne.n	8004350 <LL_RCC_HSE_IsReady+0x18>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <LL_RCC_HSE_IsReady+0x1a>
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6013      	str	r3, [r2, #0]
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043aa:	d101      	bne.n	80043b0 <LL_RCC_HSI_IsReady+0x18>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_RCC_HSI_IsReady+0x1a>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80043fe:	bf00      	nop
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004418:	f023 0301 	bic.w	r3, r3, #1
 800441c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800442e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d101      	bne.n	8004442 <LL_RCC_HSI48_IsReady+0x18>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_RCC_HSI48_IsReady+0x1a>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <LL_RCC_LSE_IsReady+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_RCC_LSE_IsReady+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d101      	bne.n	8004556 <LL_RCC_LSI1_IsReady+0x18>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <LL_RCC_LSI1_IsReady+0x1a>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d101      	bne.n	80045be <LL_RCC_LSI2_IsReady+0x18>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <LL_RCC_LSI2_IsReady+0x1a>
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6013      	str	r3, [r2, #0]
}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800461a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d101      	bne.n	800464a <LL_RCC_MSI_IsReady+0x16>
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <LL_RCC_MSI_IsReady+0x18>
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2bb0      	cmp	r3, #176	; 0xb0
 8004694:	d901      	bls.n	800469a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004696:	23b0      	movs	r3, #176	; 0xb0
 8004698:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800469a:	687b      	ldr	r3, [r7, #4]
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80046b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 0203 	bic.w	r2, r3, #3
 80046e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80046fa:	b480      	push	{r7}
 80046fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 030c 	and.w	r3, r3, #12
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800474a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004804:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004866:	b480      	push	{r7}
 8004868:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800486a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004878:	6013      	str	r3, [r2, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004896:	d101      	bne.n	800489c <LL_RCC_PLL_IsReady+0x18>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <LL_RCC_PLL_IsReady+0x1a>
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80048c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491c:	d101      	bne.n	8004922 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004942:	d101      	bne.n	8004948 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004968:	d101      	bne.n	800496e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800498c:	d101      	bne.n	8004992 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049b0:	d101      	bne.n	80049b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b08d      	sub	sp, #52	; 0x34
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e37e      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8092 	beq.w	8004b08 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e4:	f7ff fe89 	bl	80046fa <LL_RCC_GetSysClkSource>
 80049e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ea:	f7ff ff82 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 80049ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x3e>
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	d14c      	bne.n	8004a96 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d149      	bne.n	8004a96 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a02:	f7ff fe17 	bl	8004634 <LL_RCC_MSI_IsReady>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_OscConfig+0x54>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e35d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004a1c:	f7ff fe2f 	bl	800467e <LL_RCC_MSI_GetRange>
 8004a20:	4603      	mov	r3, r0
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d914      	bls.n	8004a50 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fd44 	bl	80054b8 <RCC_SetFlashLatencyFromMSIRange>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e34c      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fe09 	bl	8004656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fe2d 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>
 8004a4e:	e013      	b.n	8004a78 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fdfe 	bl	8004656 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fe22 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fd25 	bl	80054b8 <RCC_SetFlashLatencyFromMSIRange>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e32d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a78:	f000 fcde 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4ab3      	ldr	r2, [pc, #716]	; (8004d4c <HAL_RCC_OscConfig+0x388>)
 8004a80:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a82:	4bb3      	ldr	r3, [pc, #716]	; (8004d50 <HAL_RCC_OscConfig+0x38c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fc fee2 	bl	8001850 <HAL_InitTick>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d039      	beq.n	8004b06 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e31e      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01e      	beq.n	8004adc <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a9e:	f7ff fdab 	bl	80045f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aa2:	f7fc ff23 	bl	80018ec <HAL_GetTick>
 8004aa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aaa:	f7fc ff1f 	bl	80018ec <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e30b      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004abc:	f7ff fdba 	bl	8004634 <LL_RCC_MSI_IsReady>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f1      	beq.n	8004aaa <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fdc3 	bl	8004656 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fde7 	bl	80046a8 <LL_RCC_MSI_SetCalibTrimming>
 8004ada:	e015      	b.n	8004b08 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004adc:	f7ff fd9b 	bl	8004616 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae0:	f7fc ff04 	bl	80018ec <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ae8:	f7fc ff00 	bl	80018ec <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e2ec      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004afa:	f7ff fd9b 	bl	8004634 <LL_RCC_MSI_IsReady>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f1      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x124>
 8004b04:	e000      	b.n	8004b08 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b06:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d04e      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b14:	f7ff fdf1 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004b18:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b1a:	f7ff feea 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 8004b1e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d005      	beq.n	8004b32 <HAL_RCC_OscConfig+0x16e>
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d10d      	bne.n	8004b48 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d10a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b32:	f7ff fc01 	bl	8004338 <LL_RCC_HSE_IsReady>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d039      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x1ec>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d135      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e2c5      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b50:	d102      	bne.n	8004b58 <HAL_RCC_OscConfig+0x194>
 8004b52:	f7ff fbd3 	bl	80042fc <LL_RCC_HSE_Enable>
 8004b56:	e001      	b.n	8004b5c <HAL_RCC_OscConfig+0x198>
 8004b58:	f7ff fbdf 	bl	800431a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d012      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fc fec2 	bl	80018ec <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fc febe 	bl	80018ec <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e2aa      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004b7e:	f7ff fbdb 	bl	8004338 <LL_RCC_HSE_IsReady>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f1      	beq.n	8004b6c <HAL_RCC_OscConfig+0x1a8>
 8004b88:	e013      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fc feaf 	bl	80018ec <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b92:	f7fc feab 	bl	80018ec <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	; 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e297      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ba4:	f7ff fbc8 	bl	8004338 <LL_RCC_HSE_IsReady>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f1      	bne.n	8004b92 <HAL_RCC_OscConfig+0x1ce>
 8004bae:	e000      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d051      	beq.n	8004c62 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bbe:	f7ff fd9c 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004bc2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bc4:	f7ff fe95 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 8004bc8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d005      	beq.n	8004bdc <HAL_RCC_OscConfig+0x218>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b0c      	cmp	r3, #12
 8004bd4:	d113      	bne.n	8004bfe <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d110      	bne.n	8004bfe <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bdc:	f7ff fbdc 	bl	8004398 <LL_RCC_HSI_IsReady>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e270      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff fbe0 	bl	80043bc <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bfc:	e031      	b.n	8004c62 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c06:	f7ff fba9 	bl	800435c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fc fe6f 	bl	80018ec <HAL_GetTick>
 8004c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fc fe6b 	bl	80018ec <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e257      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c24:	f7ff fbb8 	bl	8004398 <LL_RCC_HSI_IsReady>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f1      	beq.n	8004c12 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff fbc2 	bl	80043bc <LL_RCC_HSI_SetCalibTrimming>
 8004c38:	e013      	b.n	8004c62 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	f7ff fb9e 	bl	800437a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fc fe55 	bl	80018ec <HAL_GetTick>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fc fe51 	bl	80018ec <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e23d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004c58:	f7ff fb9e 	bl	8004398 <LL_RCC_HSI_IsReady>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f1      	bne.n	8004c46 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d106      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 80a3 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d076      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d046      	beq.n	8004d1e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004c90:	f7ff fc55 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d113      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004c9a:	f7ff fc2e 	bl	80044fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9e:	f7fc fe25 	bl	80018ec <HAL_GetTick>
 8004ca2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ca6:	f7fc fe21 	bl	80018ec <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e20d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004cb8:	f7ff fc41 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f1      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004cc2:	f7ff fc4e 	bl	8004562 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fc fe11 	bl	80018ec <HAL_GetTick>
 8004cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cce:	f7fc fe0d 	bl	80018ec <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e1f9      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ce0:	f7ff fc61 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f1      	beq.n	8004cce <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fc6b 	bl	80045ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004cf4:	f7ff fc12 	bl	800451c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fc fdf8 	bl	80018ec <HAL_GetTick>
 8004cfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d00:	f7fc fdf4 	bl	80018ec <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1e0      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d12:	f7ff fc14 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f1      	bne.n	8004d00 <HAL_RCC_OscConfig+0x33c>
 8004d1c:	e051      	b.n	8004dc2 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004d1e:	f7ff fbec 	bl	80044fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7fc fde3 	bl	80018ec <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d2a:	f7fc fddf 	bl	80018ec <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e1cb      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004d3c:	f7ff fbff 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f1      	beq.n	8004d2a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004d46:	f7ff fc1d 	bl	8004584 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d4a:	e00c      	b.n	8004d66 <HAL_RCC_OscConfig+0x3a2>
 8004d4c:	20000080 	.word	0x20000080
 8004d50:	20000084 	.word	0x20000084
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d54:	f7fc fdca 	bl	80018ec <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1b6      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004d66:	f7ff fc1e 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f1      	bne.n	8004d54 <HAL_RCC_OscConfig+0x390>
 8004d70:	e027      	b.n	8004dc2 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004d72:	f7ff fc07 	bl	8004584 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d76:	f7fc fdb9 	bl	80018ec <HAL_GetTick>
 8004d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d7e:	f7fc fdb5 	bl	80018ec <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e1a1      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004d90:	f7ff fc09 	bl	80045a6 <LL_RCC_LSI2_IsReady>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f1      	bne.n	8004d7e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004d9a:	f7ff fbbf 	bl	800451c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9e:	f7fc fda5 	bl	80018ec <HAL_GetTick>
 8004da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004da6:	f7fc fda1 	bl	80018ec <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e18d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004db8:	f7ff fbc1 	bl	800453e <LL_RCC_LSI1_IsReady>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f1      	bne.n	8004da6 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d05b      	beq.n	8004e86 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dce:	4bb5      	ldr	r3, [pc, #724]	; (80050a4 <HAL_RCC_OscConfig+0x6e0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d114      	bne.n	8004e04 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004dda:	f7ff fa4f 	bl	800427c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fc fd85 	bl	80018ec <HAL_GetTick>
 8004de2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fc fd81 	bl	80018ec <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e16d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4baa      	ldr	r3, [pc, #680]	; (80050a4 <HAL_RCC_OscConfig+0x6e0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCC_OscConfig+0x44e>
 8004e0c:	f7ff fb1f 	bl	800444e <LL_RCC_LSE_Enable>
 8004e10:	e00c      	b.n	8004e2c <HAL_RCC_OscConfig+0x468>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d104      	bne.n	8004e24 <HAL_RCC_OscConfig+0x460>
 8004e1a:	f7ff fb3a 	bl	8004492 <LL_RCC_LSE_EnableBypass>
 8004e1e:	f7ff fb16 	bl	800444e <LL_RCC_LSE_Enable>
 8004e22:	e003      	b.n	8004e2c <HAL_RCC_OscConfig+0x468>
 8004e24:	f7ff fb24 	bl	8004470 <LL_RCC_LSE_Disable>
 8004e28:	f7ff fb44 	bl	80044b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d014      	beq.n	8004e5e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fc fd5a 	bl	80018ec <HAL_GetTick>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fc fd56 	bl	80018ec <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e140      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004e52:	f7ff fb40 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ef      	beq.n	8004e3c <HAL_RCC_OscConfig+0x478>
 8004e5c:	e013      	b.n	8004e86 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7fc fd45 	bl	80018ec <HAL_GetTick>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fc fd41 	bl	80018ec <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e12b      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004e7c:	f7ff fb2b 	bl	80044d6 <LL_RCC_LSE_IsReady>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ef      	bne.n	8004e66 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02c      	beq.n	8004eec <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e9a:	f7ff faa4 	bl	80043e6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fc fd25 	bl	80018ec <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ea6:	f7fc fd21 	bl	80018ec <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e10d      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004eb8:	f7ff fab7 	bl	800442a <LL_RCC_HSI48_IsReady>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f1      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4e2>
 8004ec2:	e013      	b.n	8004eec <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ec4:	f7ff faa0 	bl	8004408 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fc fd10 	bl	80018ec <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ed0:	f7fc fd0c 	bl	80018ec <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0f8      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004ee2:	f7ff faa2 	bl	800442a <LL_RCC_HSI48_IsReady>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f1      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80ee 	beq.w	80050d2 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	f7ff fc00 	bl	80046fa <LL_RCC_GetSysClkSource>
 8004efa:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f040 80af 	bne.w	800506c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d123      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d11c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d114      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d10d      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d05d      	beq.n	8005020 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d058      	beq.n	800501c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0ab      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f7c:	f7ff fc73 	bl	8004866 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f80:	f7fc fcb4 	bl	80018ec <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fc fcb0 	bl	80018ec <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e09c      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ef      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <HAL_RCC_OscConfig+0x6e4>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc0:	0212      	lsls	r2, r2, #8
 8004fc2:	4311      	orrs	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fc8:	4311      	orrs	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fde:	f7ff fc33 	bl	8004848 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ff2:	f7fc fc7b 	bl	80018ec <HAL_GetTick>
 8004ff6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc fc77 	bl	80018ec <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e063      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ef      	beq.n	8004ffa <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501a:	e05a      	b.n	80050d2 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e059      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d151      	bne.n	80050d2 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800502e:	f7ff fc0b 	bl	8004848 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005042:	f7fc fc53 	bl	80018ec <HAL_GetTick>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800504a:	f7fc fc4f 	bl	80018ec <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e03b      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <HAL_RCC_OscConfig+0x686>
 800506a:	e032      	b.n	80050d2 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d02d      	beq.n	80050ce <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	f7ff fbf8 	bl	8004866 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005080:	f023 0303 	bic.w	r3, r3, #3
 8005084:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005090:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005098:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fc fc27 	bl	80018ec <HAL_GetTick>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a0:	e00d      	b.n	80050be <HAL_RCC_OscConfig+0x6fa>
 80050a2:	bf00      	nop
 80050a4:	58000400 	.word	0x58000400
 80050a8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fc fc1e 	bl	80018ec <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1ef      	bne.n	80050ac <HAL_RCC_OscConfig+0x6e8>
 80050cc:	e001      	b.n	80050d2 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3734      	adds	r7, #52	; 0x34
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd90      	pop	{r4, r7, pc}

080050dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e12d      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050f0:	4b98      	ldr	r3, [pc, #608]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d91b      	bls.n	8005136 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b95      	ldr	r3, [pc, #596]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 0207 	bic.w	r2, r3, #7
 8005106:	4993      	ldr	r1, [pc, #588]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510e:	f7fc fbed 	bl	80018ec <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005114:	e008      	b.n	8005128 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005116:	f7fc fbe9 	bl	80018ec <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e111      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005128:	4b8a      	ldr	r3, [pc, #552]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d1ef      	bne.n	8005116 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fae3 	bl	8004712 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800514c:	f7fc fbce 	bl	80018ec <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005154:	f7fc fbca 	bl	80018ec <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0f2      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005166:	f7ff fbd0 	bl	800490a <LL_RCC_IsActiveFlag_HPRE>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f1      	beq.n	8005154 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0320 	and.w	r3, r3, #32
 8005178:	2b00      	cmp	r3, #0
 800517a:	d016      	beq.n	80051aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fada 	bl	800473a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005186:	f7fc fbb1 	bl	80018ec <HAL_GetTick>
 800518a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800518e:	f7fc fbad 	bl	80018ec <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0d5      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80051a0:	f7ff fbc5 	bl	800492e <LL_RCC_IsActiveFlag_C2HPRE>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f1      	beq.n	800518e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d016      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fad3 	bl	8004766 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051c0:	f7fc fb94 	bl	80018ec <HAL_GetTick>
 80051c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051c8:	f7fc fb90 	bl	80018ec <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0b8      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80051da:	f7ff fbbb 	bl	8004954 <LL_RCC_IsActiveFlag_SHDHPRE>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0f1      	beq.n	80051c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d016      	beq.n	800521e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff facd 	bl	8004794 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051fa:	f7fc fb77 	bl	80018ec <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005200:	e008      	b.n	8005214 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005202:	f7fc fb73 	bl	80018ec <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e09b      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005214:	f7ff fbb1 	bl	800497a <LL_RCC_IsActiveFlag_PPRE1>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f1      	beq.n	8005202 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d017      	beq.n	800525a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fac3 	bl	80047bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005236:	f7fc fb59 	bl	80018ec <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800523e:	f7fc fb55 	bl	80018ec <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e07d      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005250:	f7ff fba5 	bl	800499e <LL_RCC_IsActiveFlag_PPRE2>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f1      	beq.n	800523e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d043      	beq.n	80052ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d106      	bne.n	800527c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800526e:	f7ff f863 	bl	8004338 <LL_RCC_HSE_IsReady>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11e      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e067      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d106      	bne.n	8005292 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005284:	f7ff fafe 	bl	8004884 <LL_RCC_PLL_IsReady>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d113      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e05c      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800529a:	f7ff f9cb 	bl	8004634 <LL_RCC_MSI_IsReady>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d108      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e051      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80052a8:	f7ff f876 	bl	8004398 <LL_RCC_HSI_IsReady>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e04a      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fa09 	bl	80046d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c0:	f7fc fb14 	bl	80018ec <HAL_GetTick>
 80052c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c6:	e00a      	b.n	80052de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c8:	f7fc fb10 	bl	80018ec <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e036      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052de:	f7ff fa0c 	bl	80046fa <LL_RCC_GetSysClkSource>
 80052e2:	4602      	mov	r2, r0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d1ec      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ee:	4b19      	ldr	r3, [pc, #100]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d21b      	bcs.n	8005334 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fc:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 0207 	bic.w	r2, r3, #7
 8005304:	4913      	ldr	r1, [pc, #76]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fc faee 	bl	80018ec <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005312:	e008      	b.n	8005326 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005314:	f7fc faea 	bl	80018ec <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e012      	b.n	800534c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_ClockConfig+0x278>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d1ef      	bne.n	8005314 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005334:	f000 f880 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005338:	4603      	mov	r3, r0
 800533a:	4a07      	ldr	r2, [pc, #28]	; (8005358 <HAL_RCC_ClockConfig+0x27c>)
 800533c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800533e:	f7fc fae1 	bl	8001904 <HAL_GetTickPrio>
 8005342:	4603      	mov	r3, r0
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fa83 	bl	8001850 <HAL_InitTick>
 800534a:	4603      	mov	r3, r0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	58004000 	.word	0x58004000
 8005358:	20000080 	.word	0x20000080

0800535c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005362:	f7ff f9ca 	bl	80046fa <LL_RCC_GetSysClkSource>
 8005366:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800536e:	f7ff f986 	bl	800467e <LL_RCC_MSI_GetRange>
 8005372:	4603      	mov	r3, r0
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	4a2b      	ldr	r2, [pc, #172]	; (8005428 <HAL_RCC_GetSysClockFreq+0xcc>)
 800537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e04b      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d102      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800538a:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCC_GetSysClockFreq+0xd0>)
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e045      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b08      	cmp	r3, #8
 8005394:	d10a      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005396:	f7fe ff9f 	bl	80042d8 <LL_RCC_HSE_IsEnabledDiv2>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80053a0:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	e03a      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80053a6:	4b23      	ldr	r3, [pc, #140]	; (8005434 <HAL_RCC_GetSysClockFreq+0xd8>)
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e037      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80053ac:	f7ff faa1 	bl	80048f2 <LL_RCC_PLL_GetMainSource>
 80053b0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d003      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x64>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d003      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x6a>
 80053be:	e00d      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80053c0:	4b1a      	ldr	r3, [pc, #104]	; (800542c <HAL_RCC_GetSysClockFreq+0xd0>)
 80053c2:	60bb      	str	r3, [r7, #8]
        break;
 80053c4:	e015      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80053c6:	f7fe ff87 	bl	80042d8 <LL_RCC_HSE_IsEnabledDiv2>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d102      	bne.n	80053d6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80053d0:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_RCC_GetSysClockFreq+0xd4>)
 80053d2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80053d4:	e00d      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <HAL_RCC_GetSysClockFreq+0xd8>)
 80053d8:	60bb      	str	r3, [r7, #8]
        break;
 80053da:	e00a      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053dc:	f7ff f94f 	bl	800467e <LL_RCC_MSI_GetRange>
 80053e0:	4603      	mov	r3, r0
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ee:	60bb      	str	r3, [r7, #8]
        break;
 80053f0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80053f2:	f7ff fa59 	bl	80048a8 <LL_RCC_PLL_GetN>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	fb03 f402 	mul.w	r4, r3, r2
 80053fe:	f7ff fa6c 	bl	80048da <LL_RCC_PLL_GetDivider>
 8005402:	4603      	mov	r3, r0
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	3301      	adds	r3, #1
 8005408:	fbb4 f4f3 	udiv	r4, r4, r3
 800540c:	f7ff fa59 	bl	80048c2 <LL_RCC_PLL_GetR>
 8005410:	4603      	mov	r3, r0
 8005412:	0f5b      	lsrs	r3, r3, #29
 8005414:	3301      	adds	r3, #1
 8005416:	fbb4 f3f3 	udiv	r3, r4, r3
 800541a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800541c:	68fb      	ldr	r3, [r7, #12]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bd90      	pop	{r4, r7, pc}
 8005426:	bf00      	nop
 8005428:	0800b55c 	.word	0x0800b55c
 800542c:	00f42400 	.word	0x00f42400
 8005430:	003d0900 	.word	0x003d0900
 8005434:	007a1200 	.word	0x007a1200

08005438 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b598      	push	{r3, r4, r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800543c:	f7ff ff8e 	bl	800535c <HAL_RCC_GetSysClockFreq>
 8005440:	4604      	mov	r4, r0
 8005442:	f7ff f9cf 	bl	80047e4 <LL_RCC_GetAHBPrescaler>
 8005446:	4603      	mov	r3, r0
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a03      	ldr	r2, [pc, #12]	; (800545c <HAL_RCC_GetHCLKFreq+0x24>)
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd98      	pop	{r3, r4, r7, pc}
 800545c:	0800b4fc 	.word	0x0800b4fc

08005460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005460:	b598      	push	{r3, r4, r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005464:	f7ff ffe8 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005468:	4604      	mov	r4, r0
 800546a:	f7ff f9d5 	bl	8004818 <LL_RCC_GetAPB1Prescaler>
 800546e:	4603      	mov	r3, r0
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	4a04      	ldr	r2, [pc, #16]	; (8005488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd98      	pop	{r3, r4, r7, pc}
 8005488:	0800b53c 	.word	0x0800b53c

0800548c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800548c:	b598      	push	{r3, r4, r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005490:	f7ff ffd2 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005494:	4604      	mov	r4, r0
 8005496:	f7ff f9cb 	bl	8004830 <LL_RCC_GetAPB2Prescaler>
 800549a:	4603      	mov	r3, r0
 800549c:	0adb      	lsrs	r3, r3, #11
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd98      	pop	{r3, r4, r7, pc}
 80054b4:	0800b53c 	.word	0x0800b53c

080054b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2bb0      	cmp	r3, #176	; 0xb0
 80054c4:	d903      	bls.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80054c6:	4b15      	ldr	r3, [pc, #84]	; (800551c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e007      	b.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	4a11      	ldr	r2, [pc, #68]	; (800551c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80054d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80054de:	f7ff f98d 	bl	80047fc <LL_RCC_GetAHB4Prescaler>
 80054e2:	4603      	mov	r3, r0
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80054ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	0c9c      	lsrs	r4, r3, #18
 8005502:	f7fe fecb 	bl	800429c <HAL_PWREx_GetVoltageRange>
 8005506:	4603      	mov	r3, r0
 8005508:	4619      	mov	r1, r3
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f80c 	bl	8005528 <RCC_SetFlashLatency>
 8005510:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}
 800551a:	bf00      	nop
 800551c:	0800b55c 	.word	0x0800b55c
 8005520:	0800b4fc 	.word	0x0800b4fc
 8005524:	431bde83 	.word	0x431bde83

08005528 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b093      	sub	sp, #76	; 0x4c
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005532:	4b39      	ldr	r3, [pc, #228]	; (8005618 <RCC_SetFlashLatency+0xf0>)
 8005534:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800553a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800553e:	4a37      	ldr	r2, [pc, #220]	; (800561c <RCC_SetFlashLatency+0xf4>)
 8005540:	f107 031c 	add.w	r3, r7, #28
 8005544:	ca07      	ldmia	r2, {r0, r1, r2}
 8005546:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800554a:	4b35      	ldr	r3, [pc, #212]	; (8005620 <RCC_SetFlashLatency+0xf8>)
 800554c:	f107 040c 	add.w	r4, r7, #12
 8005550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005556:	2300      	movs	r3, #0
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d11c      	bne.n	800559c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005562:	2300      	movs	r3, #0
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
 8005566:	e015      	b.n	8005594 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005570:	4413      	add	r3, r2
 8005572:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d808      	bhi.n	800558e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800557c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005584:	4413      	add	r3, r2
 8005586:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800558a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800558c:	e022      	b.n	80055d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800558e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005590:	3301      	adds	r3, #1
 8005592:	643b      	str	r3, [r7, #64]	; 0x40
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	2b03      	cmp	r3, #3
 8005598:	d9e6      	bls.n	8005568 <RCC_SetFlashLatency+0x40>
 800559a:	e01b      	b.n	80055d4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800559c:	2300      	movs	r3, #0
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	e015      	b.n	80055ce <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80055a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055aa:	4413      	add	r3, r2
 80055ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d808      	bhi.n	80055c8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80055be:	4413      	add	r3, r2
 80055c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80055c6:	e005      	b.n	80055d4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80055c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ca:	3301      	adds	r3, #1
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d9e6      	bls.n	80055a2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <RCC_SetFlashLatency+0xfc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 0207 	bic.w	r2, r3, #7
 80055dc:	4911      	ldr	r1, [pc, #68]	; (8005624 <RCC_SetFlashLatency+0xfc>)
 80055de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e0:	4313      	orrs	r3, r2
 80055e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055e4:	f7fc f982 	bl	80018ec <HAL_GetTick>
 80055e8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055ea:	e008      	b.n	80055fe <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055ec:	f7fc f97e 	bl	80018ec <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e007      	b.n	800560e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <RCC_SetFlashLatency+0xfc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005608:	429a      	cmp	r2, r3
 800560a:	d1ef      	bne.n	80055ec <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	374c      	adds	r7, #76	; 0x4c
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}
 8005616:	bf00      	nop
 8005618:	0800b4c8 	.word	0x0800b4c8
 800561c:	0800b4d8 	.word	0x0800b4d8
 8005620:	0800b4e4 	.word	0x0800b4e4
 8005624:	58004000 	.word	0x58004000

08005628 <LL_RCC_MSI_EnablePLLMode>:
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800562c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <LL_APB1_GRP1_ForceReset>:
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800564e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_APB1_GRP1_ReleaseReset>:
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	43db      	mvns	r3, r3
 800567c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005680:	4013      	ands	r3, r2
 8005682:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005694:	f7ff ffc8 	bl	8005628 <LL_RCC_MSI_EnablePLLMode>
}
 8005698:	bf00      	nop
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80056a4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80056a8:	f7ff ffcd 	bl	8005646 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80056ac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80056b0:	f7ff ffdb 	bl	800566a <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	041b      	lsls	r3, r3, #16
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80056dc:	4a0b      	ldr	r2, [pc, #44]	; (800570c <HAL_RCCEx_CRSConfig+0x70>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCCEx_CRSConfig+0x70>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	4906      	ldr	r1, [pc, #24]	; (800570c <HAL_RCCEx_CRSConfig+0x70>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCCEx_CRSConfig+0x70>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <HAL_RCCEx_CRSConfig+0x70>)
 80056fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005700:	6013      	str	r3, [r2, #0]
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40006000 	.word	0x40006000

08005710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e049      	b.n	80057b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fa ffbe 	bl	80006b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f000 f9cc 	bl	8005aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d001      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e036      	b.n	8005846 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_TIM_Base_Start_IT+0x94>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <HAL_TIM_Base_Start_IT+0x44>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d115      	bne.n	8005830 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_TIM_Base_Start_IT+0x98>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b06      	cmp	r3, #6
 8005814:	d015      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x82>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581c:	d011      	beq.n	8005842 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0201 	orr.w	r2, r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	e008      	b.n	8005842 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e000      	b.n	8005844 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0202 	mvn.w	r2, #2
 8005888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f905 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8f7 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f908 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8db 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8cd 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8de 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f8b1 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8a3 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8b4 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b10      	cmp	r3, #16
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0210 	mvn.w	r2, #16
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2208      	movs	r2, #8
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f887 	bl	8005aae <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f879 	bl	8005a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f88a 	bl	8005ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0201 	mvn.w	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fa26 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8de 	bl	8005bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	d10e      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f8d1 	bl	8005bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f838 	bl	8005ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0220 	mvn.w	r2, #32
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f891 	bl	8005bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <TIM_Base_SetConfig+0xbc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_Base_SetConfig+0x20>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d108      	bne.n	8005b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <TIM_Base_SetConfig+0xbc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_Base_SetConfig+0x52>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d007      	beq.n	8005b3e <TIM_Base_SetConfig+0x52>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <TIM_Base_SetConfig+0xc0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_Base_SetConfig+0x52>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <TIM_Base_SetConfig+0xc4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <TIM_Base_SetConfig+0xbc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0xa0>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0b      	ldr	r2, [pc, #44]	; (8005bac <TIM_Base_SetConfig+0xc0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0xa0>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <TIM_Base_SetConfig+0xc4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d103      	bne.n	8005b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	615a      	str	r2, [r3, #20]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800

08005bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <LL_RCC_GetUSARTClockSource>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4013      	ands	r3, r2
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_GetLPUARTClockSource>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4013      	ands	r3, r2
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e042      	b.n	8005cc8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fa fd43 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2224      	movs	r2, #36	; 0x24
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fc7e 	bl	8006574 <UART_SetConfig>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e022      	b.n	8005cc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fe78 	bl	8006980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 feff 	bl	8006ac4 <UART_CheckIdleState>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e02e      	b.n	8005d40 <HAL_UART_DeInit+0x70>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2224      	movs	r2, #36	; 0x24
 8005ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fa fd50 	bl	80007b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d142      	bne.n	8005de6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_UART_Receive_IT+0x24>
 8005d66:	88fb      	ldrh	r3, [r7, #6]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e03b      	b.n	8005de8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Receive_IT+0x36>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e034      	b.n	8005de8 <HAL_UART_Receive_IT+0xa0>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <HAL_UART_Receive_IT+0xa8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01f      	beq.n	8005dd6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d018      	beq.n	8005dd6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	613b      	str	r3, [r7, #16]
   return(result);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	69f9      	ldr	r1, [r7, #28]
 8005dc8:	6a3a      	ldr	r2, [r7, #32]
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e6      	bne.n	8005da4 <HAL_UART_Receive_IT+0x5c>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 ff85 	bl	8006cec <UART_Start_Receive_IT>
 8005de2:	4603      	mov	r3, r0
 8005de4:	e000      	b.n	8005de8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
  }
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3728      	adds	r7, #40	; 0x28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40008000 	.word	0x40008000

08005df4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	; 0x28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d17a      	bne.n	8005f02 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_UART_Transmit_DMA+0x24>
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e073      	b.n	8005f04 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UART_Transmit_DMA+0x36>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e06c      	b.n	8005f04 <HAL_UART_Transmit_DMA+0x110>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2221      	movs	r2, #33	; 0x21
 8005e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d02c      	beq.n	8005eba <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <HAL_UART_Transmit_DMA+0x118>)
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6c:	4a28      	ldr	r2, [pc, #160]	; (8005f10 <HAL_UART_Transmit_DMA+0x11c>)
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e74:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <HAL_UART_Transmit_DMA+0x120>)
 8005e76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	4619      	mov	r1, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3328      	adds	r3, #40	; 0x28
 8005e90:	461a      	mov	r2, r3
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	f7fb ffc2 	bl	8001e1c <HAL_DMA_Start_IT>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00d      	beq.n	8005eba <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e024      	b.n	8005f04 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2240      	movs	r2, #64	; 0x40
 8005ec0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3308      	adds	r3, #8
 8005ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	623a      	str	r2, [r7, #32]
 8005eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	69f9      	ldr	r1, [r7, #28]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005f02:	2302      	movs	r3, #2
  }
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	; 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	08007043 	.word	0x08007043
 8005f10:	080070dd 	.word	0x080070dd
 8005f14:	080070f9 	.word	0x080070f9

08005f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b0ba      	sub	sp, #232	; 0xe8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f46:	4013      	ands	r3, r2
 8005f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11b      	bne.n	8005f8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 82d6 	beq.w	800652e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
      }
      return;
 8005f8a:	e2d0      	b.n	800652e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 811f 	beq.w	80061d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005f96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f9a:	4b8b      	ldr	r3, [pc, #556]	; (80061c8 <HAL_UART_IRQHandler+0x2b0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005fa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fa6:	4b89      	ldr	r3, [pc, #548]	; (80061cc <HAL_UART_IRQHandler+0x2b4>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8112 	beq.w	80061d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d011      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xc8>
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00b      	beq.n	8005fe0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd6:	f043 0201 	orr.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d011      	beq.n	8006010 <HAL_UART_IRQHandler+0xf8>
 8005fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d011      	beq.n	8006040 <HAL_UART_IRQHandler+0x128>
 800601c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2204      	movs	r2, #4
 800602e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006036:	f043 0202 	orr.w	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d017      	beq.n	800607c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800604c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006058:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800605c:	4b5a      	ldr	r3, [pc, #360]	; (80061c8 <HAL_UART_IRQHandler+0x2b0>)
 800605e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2208      	movs	r2, #8
 800606a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006072:	f043 0208 	orr.w	r2, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800607c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006084:	2b00      	cmp	r3, #0
 8006086:	d012      	beq.n	80060ae <HAL_UART_IRQHandler+0x196>
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800609c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a4:	f043 0220 	orr.w	r2, r3, #32
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 823c 	beq.w	8006532 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d013      	beq.n	80060ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d005      	beq.n	8006112 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800610a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04f      	beq.n	80061b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 ff2f 	bl	8006f76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d141      	bne.n	80061aa <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800613c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800615e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800616a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1d9      	bne.n	8006126 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d013      	beq.n	80061a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617e:	4a14      	ldr	r2, [pc, #80]	; (80061d0 <HAL_UART_IRQHandler+0x2b8>)
 8006180:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fb ff22 	bl	8001fd0 <HAL_DMA_Abort_IT>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d017      	beq.n	80061c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	e00f      	b.n	80061c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa fe38 	bl	8000e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	e00b      	b.n	80061c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fa fe34 	bl	8000e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e007      	b.n	80061c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fa fe30 	bl	8000e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80061c0:	e1b7      	b.n	8006532 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c2:	bf00      	nop
    return;
 80061c4:	e1b5      	b.n	8006532 <HAL_UART_IRQHandler+0x61a>
 80061c6:	bf00      	nop
 80061c8:	10000001 	.word	0x10000001
 80061cc:	04000120 	.word	0x04000120
 80061d0:	08007179 	.word	0x08007179

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f040 814a 	bne.w	8006472 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8143 	beq.w	8006472 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80061ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 813c 	beq.w	8006472 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2210      	movs	r2, #16
 8006200:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	f040 80b5 	bne.w	800637c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800621e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 8187 	beq.w	8006536 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800622e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006232:	429a      	cmp	r2, r3
 8006234:	f080 817f 	bcs.w	8006536 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800623e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0320 	and.w	r3, r3, #32
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 8086 	bne.w	8006360 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800626c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006282:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006286:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800628a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1da      	bne.n	8006254 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3308      	adds	r3, #8
 80062a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3308      	adds	r3, #8
 80062be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e1      	bne.n	800629e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800630c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e3      	bne.n	80062da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800632e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006330:	f023 0310 	bic.w	r3, r3, #16
 8006334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006342:	65bb      	str	r3, [r7, #88]	; 0x58
 8006344:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e4      	bne.n	8006320 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800635a:	4618      	mov	r0, r3
 800635c:	f7fb fdd9 	bl	8001f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800636c:	b29b      	uxth	r3, r3
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	b29b      	uxth	r3, r3
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8f1 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800637a:	e0dc      	b.n	8006536 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006388:	b29b      	uxth	r3, r3
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80ce 	beq.w	800653a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800639e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 80c9 	beq.w	800653a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e4      	bne.n	80063a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	623b      	str	r3, [r7, #32]
   return(result);
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063f4:	f023 0301 	bic.w	r3, r3, #1
 80063f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3308      	adds	r3, #8
 8006402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006406:	633a      	str	r2, [r7, #48]	; 0x30
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e1      	bne.n	80063de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	60fb      	str	r3, [r7, #12]
   return(result);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0310 	bic.w	r3, r3, #16
 8006442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	617b      	str	r3, [r7, #20]
   return(result);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e4      	bne.n	800642e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006468:	4619      	mov	r1, r3
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f876 	bl	800655c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006470:	e063      	b.n	800653a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00e      	beq.n	800649c <HAL_UART_IRQHandler+0x584>
 800647e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fb0d 	bl	8007ab4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800649a:	e051      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800649c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d014      	beq.n	80064d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d03a      	beq.n	800653e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
    }
    return;
 80064d0:	e035      	b.n	800653e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0x5da>
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fe5a 	bl	80071a4 <UART_EndTransmit_IT>
    return;
 80064f0:	e026      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_UART_IRQHandler+0x5fa>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 fae6 	bl	8007adc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006510:	e016      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d010      	beq.n	8006540 <HAL_UART_IRQHandler+0x628>
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006522:	2b00      	cmp	r3, #0
 8006524:	da0c      	bge.n	8006540 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 face 	bl	8007ac8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800652c:	e008      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
      return;
 800652e:	bf00      	nop
 8006530:	e006      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
    return;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
      return;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
      return;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <HAL_UART_IRQHandler+0x628>
    return;
 800653e:	bf00      	nop
  }
}
 8006540:	37e8      	adds	r7, #232	; 0xe8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop

08006548 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006574:	b5b0      	push	{r4, r5, r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4313      	orrs	r3, r2
 8006596:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4ba3      	ldr	r3, [pc, #652]	; (800682c <UART_SetConfig+0x2b8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	69f9      	ldr	r1, [r7, #28]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a98      	ldr	r2, [pc, #608]	; (8006830 <UART_SetConfig+0x2bc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	4313      	orrs	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	69f9      	ldr	r1, [r7, #28]
 80065f0:	430b      	orrs	r3, r1
 80065f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f023 010f 	bic.w	r1, r3, #15
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a89      	ldr	r2, [pc, #548]	; (8006834 <UART_SetConfig+0x2c0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d120      	bne.n	8006656 <UART_SetConfig+0xe2>
 8006614:	2003      	movs	r0, #3
 8006616:	f7ff faeb 	bl	8005bf0 <LL_RCC_GetUSARTClockSource>
 800661a:	4603      	mov	r3, r0
 800661c:	2b03      	cmp	r3, #3
 800661e:	d817      	bhi.n	8006650 <UART_SetConfig+0xdc>
 8006620:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <UART_SetConfig+0xb4>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006639 	.word	0x08006639
 800662c:	08006645 	.word	0x08006645
 8006630:	0800663f 	.word	0x0800663f
 8006634:	0800664b 	.word	0x0800664b
 8006638:	2301      	movs	r3, #1
 800663a:	76fb      	strb	r3, [r7, #27]
 800663c:	e038      	b.n	80066b0 <UART_SetConfig+0x13c>
 800663e:	2302      	movs	r3, #2
 8006640:	76fb      	strb	r3, [r7, #27]
 8006642:	e035      	b.n	80066b0 <UART_SetConfig+0x13c>
 8006644:	2304      	movs	r3, #4
 8006646:	76fb      	strb	r3, [r7, #27]
 8006648:	e032      	b.n	80066b0 <UART_SetConfig+0x13c>
 800664a:	2308      	movs	r3, #8
 800664c:	76fb      	strb	r3, [r7, #27]
 800664e:	e02f      	b.n	80066b0 <UART_SetConfig+0x13c>
 8006650:	2310      	movs	r3, #16
 8006652:	76fb      	strb	r3, [r7, #27]
 8006654:	e02c      	b.n	80066b0 <UART_SetConfig+0x13c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a75      	ldr	r2, [pc, #468]	; (8006830 <UART_SetConfig+0x2bc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d125      	bne.n	80066ac <UART_SetConfig+0x138>
 8006660:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006664:	f7ff fad4 	bl	8005c10 <LL_RCC_GetLPUARTClockSource>
 8006668:	4603      	mov	r3, r0
 800666a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800666e:	d017      	beq.n	80066a0 <UART_SetConfig+0x12c>
 8006670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006674:	d817      	bhi.n	80066a6 <UART_SetConfig+0x132>
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667a:	d00b      	beq.n	8006694 <UART_SetConfig+0x120>
 800667c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006680:	d811      	bhi.n	80066a6 <UART_SetConfig+0x132>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <UART_SetConfig+0x11a>
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668a:	d006      	beq.n	800669a <UART_SetConfig+0x126>
 800668c:	e00b      	b.n	80066a6 <UART_SetConfig+0x132>
 800668e:	2300      	movs	r3, #0
 8006690:	76fb      	strb	r3, [r7, #27]
 8006692:	e00d      	b.n	80066b0 <UART_SetConfig+0x13c>
 8006694:	2302      	movs	r3, #2
 8006696:	76fb      	strb	r3, [r7, #27]
 8006698:	e00a      	b.n	80066b0 <UART_SetConfig+0x13c>
 800669a:	2304      	movs	r3, #4
 800669c:	76fb      	strb	r3, [r7, #27]
 800669e:	e007      	b.n	80066b0 <UART_SetConfig+0x13c>
 80066a0:	2308      	movs	r3, #8
 80066a2:	76fb      	strb	r3, [r7, #27]
 80066a4:	e004      	b.n	80066b0 <UART_SetConfig+0x13c>
 80066a6:	2310      	movs	r3, #16
 80066a8:	76fb      	strb	r3, [r7, #27]
 80066aa:	e001      	b.n	80066b0 <UART_SetConfig+0x13c>
 80066ac:	2310      	movs	r3, #16
 80066ae:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5e      	ldr	r2, [pc, #376]	; (8006830 <UART_SetConfig+0x2bc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f040 808b 	bne.w	80067d2 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066bc:	7efb      	ldrb	r3, [r7, #27]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d823      	bhi.n	800670a <UART_SetConfig+0x196>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x154>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066f5 	.word	0x080066f5
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	080066fb 	.word	0x080066fb
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	0800670b 	.word	0x0800670b
 80066e8:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ec:	f7fe feb8 	bl	8005460 <HAL_RCC_GetPCLK1Freq>
 80066f0:	6178      	str	r0, [r7, #20]
        break;
 80066f2:	e00f      	b.n	8006714 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b50      	ldr	r3, [pc, #320]	; (8006838 <UART_SetConfig+0x2c4>)
 80066f6:	617b      	str	r3, [r7, #20]
        break;
 80066f8:	e00c      	b.n	8006714 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe fe2f 	bl	800535c <HAL_RCC_GetSysClockFreq>
 80066fe:	6178      	str	r0, [r7, #20]
        break;
 8006700:	e008      	b.n	8006714 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	617b      	str	r3, [r7, #20]
        break;
 8006708:	e004      	b.n	8006714 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	76bb      	strb	r3, [r7, #26]
        break;
 8006712:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 811a 	beq.w	8006950 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	4a46      	ldr	r2, [pc, #280]	; (800683c <UART_SetConfig+0x2c8>)
 8006722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006726:	461a      	mov	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	fbb3 f3f2 	udiv	r3, r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	4413      	add	r3, r2
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	d305      	bcc.n	800674c <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	d902      	bls.n	8006752 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	76bb      	strb	r3, [r7, #26]
 8006750:	e0fe      	b.n	8006950 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4618      	mov	r0, r3
 8006756:	f04f 0100 	mov.w	r1, #0
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	4a37      	ldr	r2, [pc, #220]	; (800683c <UART_SetConfig+0x2c8>)
 8006760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006764:	b29a      	uxth	r2, r3
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	f7f9 fd07 	bl	800017c <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4610      	mov	r0, r2
 8006774:	4619      	mov	r1, r3
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	020b      	lsls	r3, r1, #8
 8006780:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006784:	0202      	lsls	r2, r0, #8
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	6849      	ldr	r1, [r1, #4]
 800678a:	0849      	lsrs	r1, r1, #1
 800678c:	4608      	mov	r0, r1
 800678e:	f04f 0100 	mov.w	r1, #0
 8006792:	1814      	adds	r4, r2, r0
 8006794:	eb43 0501 	adc.w	r5, r3, r1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	461a      	mov	r2, r3
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7f9 fce9 	bl	800017c <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4613      	mov	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b8:	d308      	bcc.n	80067cc <UART_SetConfig+0x258>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c0:	d204      	bcs.n	80067cc <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e0c1      	b.n	8006950 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	76bb      	strb	r3, [r7, #26]
 80067d0:	e0be      	b.n	8006950 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067da:	d16a      	bne.n	80068b2 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80067dc:	7efb      	ldrb	r3, [r7, #27]
 80067de:	3b01      	subs	r3, #1
 80067e0:	2b07      	cmp	r3, #7
 80067e2:	d82d      	bhi.n	8006840 <UART_SetConfig+0x2cc>
 80067e4:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x278>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006841 	.word	0x08006841
 80067f8:	0800681b 	.word	0x0800681b
 80067fc:	08006841 	.word	0x08006841
 8006800:	08006841 	.word	0x08006841
 8006804:	08006841 	.word	0x08006841
 8006808:	08006823 	.word	0x08006823
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fe fe3e 	bl	800548c <HAL_RCC_GetPCLK2Freq>
 8006810:	6178      	str	r0, [r7, #20]
        break;
 8006812:	e01a      	b.n	800684a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006814:	4b08      	ldr	r3, [pc, #32]	; (8006838 <UART_SetConfig+0x2c4>)
 8006816:	617b      	str	r3, [r7, #20]
        break;
 8006818:	e017      	b.n	800684a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681a:	f7fe fd9f 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800681e:	6178      	str	r0, [r7, #20]
        break;
 8006820:	e013      	b.n	800684a <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006826:	617b      	str	r3, [r7, #20]
        break;
 8006828:	e00f      	b.n	800684a <UART_SetConfig+0x2d6>
 800682a:	bf00      	nop
 800682c:	cfff69f3 	.word	0xcfff69f3
 8006830:	40008000 	.word	0x40008000
 8006834:	40013800 	.word	0x40013800
 8006838:	00f42400 	.word	0x00f42400
 800683c:	0800b59c 	.word	0x0800b59c
      default:
        pclk = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	76bb      	strb	r3, [r7, #26]
        break;
 8006848:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d07f      	beq.n	8006950 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	4a48      	ldr	r2, [pc, #288]	; (8006978 <UART_SetConfig+0x404>)
 8006856:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800685a:	461a      	mov	r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006862:	005a      	lsls	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	085b      	lsrs	r3, r3, #1
 800686a:	441a      	add	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	b29b      	uxth	r3, r3
 8006876:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2b0f      	cmp	r3, #15
 800687c:	d916      	bls.n	80068ac <UART_SetConfig+0x338>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006884:	d212      	bcs.n	80068ac <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f023 030f 	bic.w	r3, r3, #15
 800688e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	b29b      	uxth	r3, r3
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	b29a      	uxth	r2, r3
 800689c:	89fb      	ldrh	r3, [r7, #14]
 800689e:	4313      	orrs	r3, r2
 80068a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	89fa      	ldrh	r2, [r7, #14]
 80068a8:	60da      	str	r2, [r3, #12]
 80068aa:	e051      	b.n	8006950 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	76bb      	strb	r3, [r7, #26]
 80068b0:	e04e      	b.n	8006950 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068b2:	7efb      	ldrb	r3, [r7, #27]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	2b07      	cmp	r3, #7
 80068b8:	d821      	bhi.n	80068fe <UART_SetConfig+0x38a>
 80068ba:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <UART_SetConfig+0x34c>)
 80068bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	080068e9 	.word	0x080068e9
 80068c8:	080068ff 	.word	0x080068ff
 80068cc:	080068ef 	.word	0x080068ef
 80068d0:	080068ff 	.word	0x080068ff
 80068d4:	080068ff 	.word	0x080068ff
 80068d8:	080068ff 	.word	0x080068ff
 80068dc:	080068f7 	.word	0x080068f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068e0:	f7fe fdd4 	bl	800548c <HAL_RCC_GetPCLK2Freq>
 80068e4:	6178      	str	r0, [r7, #20]
        break;
 80068e6:	e00f      	b.n	8006908 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <UART_SetConfig+0x408>)
 80068ea:	617b      	str	r3, [r7, #20]
        break;
 80068ec:	e00c      	b.n	8006908 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ee:	f7fe fd35 	bl	800535c <HAL_RCC_GetSysClockFreq>
 80068f2:	6178      	str	r0, [r7, #20]
        break;
 80068f4:	e008      	b.n	8006908 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068fa:	617b      	str	r3, [r7, #20]
        break;
 80068fc:	e004      	b.n	8006908 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	76bb      	strb	r3, [r7, #26]
        break;
 8006906:	bf00      	nop
    }

    if (pclk != 0U)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d020      	beq.n	8006950 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006912:	4a19      	ldr	r2, [pc, #100]	; (8006978 <UART_SetConfig+0x404>)
 8006914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006918:	461a      	mov	r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	d908      	bls.n	800694c <UART_SetConfig+0x3d8>
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d204      	bcs.n	800694c <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e001      	b.n	8006950 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800696c:	7ebb      	ldrb	r3, [r7, #26]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bdb0      	pop	{r4, r5, r7, pc}
 8006976:	bf00      	nop
 8006978:	0800b59c 	.word	0x0800b59c
 800697c:	00f42400 	.word	0x00f42400

08006980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7e:	d10a      	bne.n	8006a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ad4:	f7fa ff0a 	bl	80018ec <HAL_GetTick>
 8006ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d10e      	bne.n	8006b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f82f 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e025      	b.n	8006b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d10e      	bne.n	8006b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f819 	bl	8006b5a <UART_WaitOnFlagUntilTimeout>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e00f      	b.n	8006b52 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b09c      	sub	sp, #112	; 0x70
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6a:	e0a9      	b.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b72:	f000 80a5 	beq.w	8006cc0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b76:	f7fa feb9 	bl	80018ec <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d302      	bcc.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d140      	bne.n	8006c0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006be0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e069      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d051      	beq.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2a:	d149      	bne.n	8006cc0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
 8006c56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	613b      	str	r3, [r7, #16]
   return(result);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c88:	623a      	str	r2, [r7, #32]
 8006c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	6a3a      	ldr	r2, [r7, #32]
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e010      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69da      	ldr	r2, [r3, #28]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	bf0c      	ite	eq
 8006cd0:	2301      	moveq	r3, #1
 8006cd2:	2300      	movne	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	f43f af46 	beq.w	8006b6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3770      	adds	r7, #112	; 0x70
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b09d      	sub	sp, #116	; 0x74
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1e:	d10e      	bne.n	8006d3e <UART_Start_Receive_IT+0x52>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <UART_Start_Receive_IT+0x48>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d32:	e02d      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	22ff      	movs	r2, #255	; 0xff
 8006d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d3c:	e028      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <UART_Start_Receive_IT+0x76>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <UART_Start_Receive_IT+0x6c>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	22ff      	movs	r2, #255	; 0xff
 8006d52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d56:	e01b      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	227f      	movs	r2, #127	; 0x7f
 8006d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d60:	e016      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6a:	d10d      	bne.n	8006d88 <UART_Start_Receive_IT+0x9c>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <UART_Start_Receive_IT+0x92>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	227f      	movs	r2, #127	; 0x7f
 8006d78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d7c:	e008      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	223f      	movs	r2, #63	; 0x3f
 8006d82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d86:	e003      	b.n	8006d90 <UART_Start_Receive_IT+0xa4>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2222      	movs	r2, #34	; 0x22
 8006d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3308      	adds	r3, #8
 8006da6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006dc2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ddc:	d14d      	bne.n	8006e7a <UART_Start_Receive_IT+0x18e>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d347      	bcc.n	8006e7a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df2:	d107      	bne.n	8006e04 <UART_Start_Receive_IT+0x118>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4a39      	ldr	r2, [pc, #228]	; (8006ee4 <UART_Start_Receive_IT+0x1f8>)
 8006e00:	671a      	str	r2, [r3, #112]	; 0x70
 8006e02:	e002      	b.n	8006e0a <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a38      	ldr	r2, [pc, #224]	; (8006ee8 <UART_Start_Receive_IT+0x1fc>)
 8006e08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e32:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e64:	637a      	str	r2, [r7, #52]	; 0x34
 8006e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_Start_Receive_IT+0x158>
 8006e78:	e02c      	b.n	8006ed4 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	d107      	bne.n	8006e94 <UART_Start_Receive_IT+0x1a8>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a17      	ldr	r2, [pc, #92]	; (8006eec <UART_Start_Receive_IT+0x200>)
 8006e90:	671a      	str	r2, [r3, #112]	; 0x70
 8006e92:	e002      	b.n	8006e9a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a16      	ldr	r2, [pc, #88]	; (8006ef0 <UART_Start_Receive_IT+0x204>)
 8006e98:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ec0:	623b      	str	r3, [r7, #32]
 8006ec2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	69f9      	ldr	r1, [r7, #28]
 8006ec6:	6a3a      	ldr	r2, [r7, #32]
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e6      	bne.n	8006ea2 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3774      	adds	r7, #116	; 0x74
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	080077b5 	.word	0x080077b5
 8006ee8:	080074bd 	.word	0x080074bd
 8006eec:	0800735b 	.word	0x0800735b
 8006ef0:	080071fb 	.word	0x080071fb

08006ef4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b08f      	sub	sp, #60	; 0x3c
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006f44:	633b      	str	r3, [r7, #48]	; 0x30
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4e:	61ba      	str	r2, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006f6a:	bf00      	nop
 8006f6c:	373c      	adds	r7, #60	; 0x3c
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b095      	sub	sp, #84	; 0x54
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e6      	bne.n	8006f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e3      	bne.n	8006fb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d118      	bne.n	8007022 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f023 0310 	bic.w	r3, r3, #16
 8007004:	647b      	str	r3, [r7, #68]	; 0x44
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	6979      	ldr	r1, [r7, #20]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	613b      	str	r3, [r7, #16]
   return(result);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e6      	bne.n	8006ff0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007036:	bf00      	nop
 8007038:	3754      	adds	r7, #84	; 0x54
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b090      	sub	sp, #64	; 0x40
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	d137      	bne.n	80070ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	623b      	str	r3, [r7, #32]
   return(result);
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707c:	63bb      	str	r3, [r7, #56]	; 0x38
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3308      	adds	r3, #8
 8007084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007086:	633a      	str	r2, [r7, #48]	; 0x30
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800708c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800709a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
 80070b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	617b      	str	r3, [r7, #20]
   return(result);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070cc:	e002      	b.n	80070d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80070ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80070d0:	f7f9 fdd6 	bl	8000c80 <HAL_UART_TxCpltCallback>
}
 80070d4:	bf00      	nop
 80070d6:	3740      	adds	r7, #64	; 0x40
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7ff fa2c 	bl	8006548 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b80      	cmp	r3, #128	; 0x80
 8007122:	d109      	bne.n	8007138 <UART_DMAError+0x40>
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	2b21      	cmp	r3, #33	; 0x21
 8007128:	d106      	bne.n	8007138 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2200      	movs	r2, #0
 800712e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007132:	6978      	ldr	r0, [r7, #20]
 8007134:	f7ff fede 	bl	8006ef4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d109      	bne.n	800715a <UART_DMAError+0x62>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b22      	cmp	r3, #34	; 0x22
 800714a:	d106      	bne.n	800715a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2200      	movs	r2, #0
 8007150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007154:	6978      	ldr	r0, [r7, #20]
 8007156:	f7ff ff0e 	bl	8006f76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007160:	f043 0210 	orr.w	r2, r3, #16
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800716a:	6978      	ldr	r0, [r7, #20]
 800716c:	f7f9 fe54 	bl	8000e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007170:	bf00      	nop
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7f9 fe3e 	bl	8000e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071c0:	61fb      	str	r3, [r7, #28]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	6979      	ldr	r1, [r7, #20]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	613b      	str	r3, [r7, #16]
   return(result);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e6      	bne.n	80071ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7f9 fd47 	bl	8000c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f2:	bf00      	nop
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b096      	sub	sp, #88	; 0x58
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007208:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007212:	2b22      	cmp	r3, #34	; 0x22
 8007214:	f040 8095 	bne.w	8007342 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007222:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007226:	b2d9      	uxtb	r1, r3
 8007228:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800722c:	b2da      	uxtb	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	400a      	ands	r2, r1
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d178      	bne.n	8007352 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007274:	653b      	str	r3, [r7, #80]	; 0x50
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
 8007280:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e6      	bne.n	8007260 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3308      	adds	r3, #8
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	623b      	str	r3, [r7, #32]
   return(result);
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072b2:	633a      	str	r2, [r7, #48]	; 0x30
 80072b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d12e      	bne.n	800733a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	69b9      	ldr	r1, [r7, #24]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	617b      	str	r3, [r7, #20]
   return(result);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b10      	cmp	r3, #16
 8007320:	d103      	bne.n	800732a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff f912 	bl	800655c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007338:	e00b      	b.n	8007352 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7f9 fdbe 	bl	8000ebc <HAL_UART_RxCpltCallback>
}
 8007340:	e007      	b.n	8007352 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699a      	ldr	r2, [r3, #24]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0208 	orr.w	r2, r2, #8
 8007350:	619a      	str	r2, [r3, #24]
}
 8007352:	bf00      	nop
 8007354:	3758      	adds	r7, #88	; 0x58
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b096      	sub	sp, #88	; 0x58
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007368:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	2b22      	cmp	r3, #34	; 0x22
 8007374:	f040 8095 	bne.w	80074a2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007388:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800738c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007390:	4013      	ands	r3, r2
 8007392:	b29a      	uxth	r2, r3
 8007394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007396:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739c:	1c9a      	adds	r2, r3, #2
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	3b01      	subs	r3, #1
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d178      	bne.n	80074b2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	643b      	str	r3, [r7, #64]	; 0x40
 80073e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	61fb      	str	r3, [r7, #28]
   return(result);
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	64bb      	str	r3, [r7, #72]	; 0x48
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d12e      	bne.n	800749a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f023 0310 	bic.w	r3, r3, #16
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007460:	61bb      	str	r3, [r7, #24]
 8007462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007464:	6979      	ldr	r1, [r7, #20]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	e841 2300 	strex	r3, r2, [r1]
 800746c:	613b      	str	r3, [r7, #16]
   return(result);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1e6      	bne.n	8007442 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b10      	cmp	r3, #16
 8007480:	d103      	bne.n	800748a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2210      	movs	r2, #16
 8007488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff f862 	bl	800655c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007498:	e00b      	b.n	80074b2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7f9 fd0e 	bl	8000ebc <HAL_UART_RxCpltCallback>
}
 80074a0:	e007      	b.n	80074b2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f042 0208 	orr.w	r2, r2, #8
 80074b0:	619a      	str	r2, [r3, #24]
}
 80074b2:	bf00      	nop
 80074b4:	3758      	adds	r7, #88	; 0x58
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b0a6      	sub	sp, #152	; 0x98
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f2:	2b22      	cmp	r3, #34	; 0x22
 80074f4:	f040 814f 	bne.w	8007796 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007502:	e0f6      	b.n	80076f2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800750e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007512:	b2d9      	uxtb	r1, r3
 8007514:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007518:	b2da      	uxtb	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	400a      	ands	r2, r1
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800754a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d053      	beq.n	80075fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2201      	movs	r2, #1
 8007574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800757c:	f043 0201 	orr.w	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d011      	beq.n	80075b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007592:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2202      	movs	r2, #2
 80075a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ac:	f043 0204 	orr.w	r2, r3, #4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d011      	beq.n	80075e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2204      	movs	r2, #4
 80075d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075dc:	f043 0202 	orr.w	r2, r3, #2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7f9 fc11 	bl	8000e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d173      	bne.n	80076f2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800761a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800761e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800762c:	66bb      	str	r3, [r7, #104]	; 0x68
 800762e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800763a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e4      	bne.n	800760a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007664:	657a      	str	r2, [r7, #84]	; 0x54
 8007666:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800766a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e3      	bne.n	8007640 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768a:	2b01      	cmp	r3, #1
 800768c:	d12e      	bne.n	80076ec <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076b2:	643b      	str	r3, [r7, #64]	; 0x40
 80076b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e6      	bne.n	8007694 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d103      	bne.n	80076dc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2210      	movs	r2, #16
 80076da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fe ff39 	bl	800655c <HAL_UARTEx_RxEventCallback>
 80076ea:	e002      	b.n	80076f2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7f9 fbe5 	bl	8000ebc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d006      	beq.n	8007708 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80076fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	f47f aefe 	bne.w	8007504 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007712:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007716:	2b00      	cmp	r3, #0
 8007718:	d045      	beq.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007720:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007724:	429a      	cmp	r2, r3
 8007726:	d23e      	bcs.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3308      	adds	r3, #8
 800772e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	61fb      	str	r3, [r7, #28]
   return(result);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800773e:	673b      	str	r3, [r7, #112]	; 0x70
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800774a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e5      	bne.n	8007728 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007760:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f043 0320 	orr.w	r3, r3, #32
 8007776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007780:	61bb      	str	r3, [r7, #24]
 8007782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6979      	ldr	r1, [r7, #20]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	613b      	str	r3, [r7, #16]
   return(result);
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007794:	e007      	b.n	80077a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0208 	orr.w	r2, r2, #8
 80077a4:	619a      	str	r2, [r3, #24]
}
 80077a6:	bf00      	nop
 80077a8:	3798      	adds	r7, #152	; 0x98
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	080071fb 	.word	0x080071fb

080077b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b0a8      	sub	sp, #160	; 0xa0
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077c2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ea:	2b22      	cmp	r3, #34	; 0x22
 80077ec:	f040 8153 	bne.w	8007a96 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077fa:	e0fa      	b.n	80079f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800780e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007812:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007816:	4013      	ands	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007846:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b00      	cmp	r3, #0
 8007850:	d053      	beq.n	80078fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d011      	beq.n	8007882 <UART_RxISR_16BIT_FIFOEN+0xce>
 800785e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2201      	movs	r2, #1
 8007870:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d011      	beq.n	80078b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800788e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2202      	movs	r2, #2
 80078a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a8:	f043 0204 	orr.w	r2, r3, #4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d011      	beq.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2204      	movs	r2, #4
 80078d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d8:	f043 0202 	orr.w	r2, r3, #2
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7f9 fa93 	bl	8000e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007900:	b29b      	uxth	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d175      	bne.n	80079f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800792a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800792e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007936:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e4      	bne.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800794c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007964:	65ba      	str	r2, [r7, #88]	; 0x58
 8007966:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800796a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e1      	bne.n	800793c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d12e      	bne.n	80079ec <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a4:	f023 0310 	bic.w	r3, r3, #16
 80079a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079b2:	647b      	str	r3, [r7, #68]	; 0x44
 80079b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e6      	bne.n	8007994 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	f003 0310 	and.w	r3, r3, #16
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d103      	bne.n	80079dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2210      	movs	r2, #16
 80079da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7fe fdb9 	bl	800655c <HAL_UARTEx_RxEventCallback>
 80079ea:	e002      	b.n	80079f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7f9 fa65 	bl	8000ebc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d006      	beq.n	8007a08 <UART_RxISR_16BIT_FIFOEN+0x254>
 80079fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f47f aefa 	bne.w	80077fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a0e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d045      	beq.n	8007aa6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a20:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d23e      	bcs.n	8007aa6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	623b      	str	r3, [r7, #32]
   return(result);
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a48:	633a      	str	r2, [r7, #48]	; 0x30
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a14      	ldr	r2, [pc, #80]	; (8007ab0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007a60:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f043 0320 	orr.w	r3, r3, #32
 8007a76:	673b      	str	r3, [r7, #112]	; 0x70
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	69b9      	ldr	r1, [r7, #24]
 8007a86:	69fa      	ldr	r2, [r7, #28]
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a94:	e007      	b.n	8007aa6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699a      	ldr	r2, [r3, #24]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0208 	orr.w	r2, r2, #8
 8007aa4:	619a      	str	r2, [r3, #24]
}
 8007aa6:	bf00      	nop
 8007aa8:	37a0      	adds	r7, #160	; 0xa0
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	0800735b 	.word	0x0800735b

08007ab4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b00:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007b26:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007b2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007b54:	b084      	sub	sp, #16
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	f107 0014 	add.w	r0, r7, #20
 8007b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	b004      	add	sp, #16
 8007b94:	4770      	bx	lr
	...

08007b98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b09d      	sub	sp, #116	; 0x74
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	78db      	ldrb	r3, [r3, #3]
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d81f      	bhi.n	8007c0a <USB_ActivateEndpoint+0x72>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <USB_ActivateEndpoint+0x38>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007bfd 	.word	0x08007bfd
 8007bd8:	08007c13 	.word	0x08007c13
 8007bdc:	08007bef 	.word	0x08007bef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007be0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007be8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007bec:	e012      	b.n	8007c14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007bee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bf2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007bf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007bfa:	e00b      	b.n	8007c14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007bfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c04:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007c08:	e004      	b.n	8007c14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007c10:	e000      	b.n	8007c14 <USB_ActivateEndpoint+0x7c>
      break;
 8007c12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	441a      	add	r2, r3
 8007c1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	b21b      	sxth	r3, r3
 8007c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	b21a      	sxth	r2, r3
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	b21b      	sxth	r3, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	b21b      	sxth	r3, r3
 8007c5a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	7b1b      	ldrb	r3, [r3, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f040 8149 	bne.w	8007f1c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8084 	beq.w	8007d9c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	00da      	lsls	r2, r3, #3
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88db      	ldrh	r3, [r3, #6]
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	827b      	strh	r3, [r7, #18]
 8007cd6:	8a7b      	ldrh	r3, [r7, #18]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <USB_ActivateEndpoint+0x180>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	823b      	strh	r3, [r7, #16]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	8a3b      	ldrh	r3, [r7, #16]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78db      	ldrb	r3, [r3, #3]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d020      	beq.n	8007d62 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d36:	81bb      	strh	r3, [r7, #12]
 8007d38:	89bb      	ldrh	r3, [r7, #12]
 8007d3a:	f083 0320 	eor.w	r3, r3, #32
 8007d3e:	81bb      	strh	r3, [r7, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	89bb      	ldrh	r3, [r7, #12]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e2a6      	b.n	80082b0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d78:	81fb      	strh	r3, [r7, #14]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	441a      	add	r2, r3
 8007d84:	89fb      	ldrh	r3, [r7, #14]
 8007d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	8013      	strh	r3, [r2, #0]
 8007d9a:	e289      	b.n	80082b0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	4413      	add	r3, r2
 8007dae:	633b      	str	r3, [r7, #48]	; 0x30
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	00da      	lsls	r2, r3, #3
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	4413      	add	r3, r2
 8007dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	461a      	mov	r2, r3
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	4413      	add	r3, r2
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	00da      	lsls	r2, r3, #3
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	4413      	add	r3, r2
 8007dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b3e      	cmp	r3, #62	; 0x3e
 8007dfa:	d918      	bls.n	8007e2e <USB_ActivateEndpoint+0x296>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d102      	bne.n	8007e16 <USB_ActivateEndpoint+0x27e>
 8007e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e12:	3b01      	subs	r3, #1
 8007e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	029b      	lsls	r3, r3, #10
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	e029      	b.n	8007e82 <USB_ActivateEndpoint+0x2ea>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d112      	bne.n	8007e5c <USB_ActivateEndpoint+0x2c4>
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	881b      	ldrh	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	801a      	strh	r2, [r3, #0]
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e012      	b.n	8007e82 <USB_ActivateEndpoint+0x2ea>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <USB_ActivateEndpoint+0x2de>
 8007e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e72:	3301      	adds	r3, #1
 8007e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	029b      	lsls	r3, r3, #10
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01b      	beq.n	8007ed2 <USB_ActivateEndpoint+0x33a>
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb0:	843b      	strh	r3, [r7, #32]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	8c3b      	ldrh	r3, [r7, #32]
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee8:	83fb      	strh	r3, [r7, #30]
 8007eea:	8bfb      	ldrh	r3, [r7, #30]
 8007eec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ef0:	83fb      	strh	r3, [r7, #30]
 8007ef2:	8bfb      	ldrh	r3, [r7, #30]
 8007ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ef8:	83fb      	strh	r3, [r7, #30]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	8bfb      	ldrh	r3, [r7, #30]
 8007f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	8013      	strh	r3, [r2, #0]
 8007f1a:	e1c9      	b.n	80082b0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	78db      	ldrb	r3, [r3, #3]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d11e      	bne.n	8007f62 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	441a      	add	r2, r3
 8007f48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	8013      	strh	r3, [r2, #0]
 8007f60:	e01d      	b.n	8007f9e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fae:	4413      	add	r3, r2
 8007fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	00da      	lsls	r2, r3, #3
 8007fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	891b      	ldrh	r3, [r3, #8]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fd0:	801a      	strh	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	657b      	str	r3, [r7, #84]	; 0x54
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe2:	4413      	add	r3, r2
 8007fe4:	657b      	str	r3, [r7, #84]	; 0x54
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	00da      	lsls	r2, r3, #3
 8007fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fee:	4413      	add	r3, r2
 8007ff0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	895b      	ldrh	r3, [r3, #10]
 8007ffa:	085b      	lsrs	r3, r3, #1
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008004:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 8093 	bne.w	8008136 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4413      	add	r3, r2
 800801a:	881b      	ldrh	r3, [r3, #0]
 800801c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01b      	beq.n	8008064 <USB_ActivateEndpoint+0x4cc>
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	441a      	add	r2, r3
 800804e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800805c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008060:	b29b      	uxth	r3, r3
 8008062:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <USB_ActivateEndpoint+0x51c>
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80080a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80080cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80080d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080da:	873b      	strh	r3, [r7, #56]	; 0x38
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	441a      	add	r2, r3
 80080e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800810e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008112:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	441a      	add	r2, r3
 800811e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
 8008134:	e0bc      	b.n	80082b0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800814a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01d      	beq.n	800818e <USB_ActivateEndpoint+0x5f6>
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008168:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	441a      	add	r2, r3
 8008176:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800817a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800818a:	b29b      	uxth	r3, r3
 800818c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800819e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01d      	beq.n	80081e6 <USB_ActivateEndpoint+0x64e>
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	881b      	ldrh	r3, [r3, #0]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	441a      	add	r2, r3
 80081ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80081d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	78db      	ldrb	r3, [r3, #3]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d024      	beq.n	8008238 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008204:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008208:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800820c:	f083 0320 	eor.w	r3, r3, #32
 8008210:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	b29b      	uxth	r3, r3
 8008234:	8013      	strh	r3, [r2, #0]
 8008236:	e01d      	b.n	8008274 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29b      	uxth	r3, r3
 8008246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008270:	b29b      	uxth	r3, r3
 8008272:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	441a      	add	r2, r3
 8008298:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800829c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80082b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3774      	adds	r7, #116	; 0x74
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b08d      	sub	sp, #52	; 0x34
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	7b1b      	ldrb	r3, [r3, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 808e 	bne.w	80083f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d044      	beq.n	8008366 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	81bb      	strh	r3, [r7, #12]
 80082ea:	89bb      	ldrh	r3, [r7, #12]
 80082ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d01b      	beq.n	800832c <USB_DeactivateEndpoint+0x6c>
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	881b      	ldrh	r3, [r3, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800830a:	817b      	strh	r3, [r7, #10]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	441a      	add	r2, r3
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008328:	b29b      	uxth	r3, r3
 800832a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800833e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008342:	813b      	strh	r3, [r7, #8]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	441a      	add	r2, r3
 800834e:	893b      	ldrh	r3, [r7, #8]
 8008350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800835c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008360:	b29b      	uxth	r3, r3
 8008362:	8013      	strh	r3, [r2, #0]
 8008364:	e192      	b.n	800868c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	827b      	strh	r3, [r7, #18]
 8008374:	8a7b      	ldrh	r3, [r7, #18]
 8008376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d01b      	beq.n	80083b6 <USB_DeactivateEndpoint+0xf6>
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008394:	823b      	strh	r3, [r7, #16]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	441a      	add	r2, r3
 80083a0:	8a3b      	ldrh	r3, [r7, #16]
 80083a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083cc:	81fb      	strh	r3, [r7, #14]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	441a      	add	r2, r3
 80083d8:	89fb      	ldrh	r3, [r7, #14]
 80083da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	8013      	strh	r3, [r2, #0]
 80083ee:	e14d      	b.n	800868c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785b      	ldrb	r3, [r3, #1]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 80a5 	bne.w	8008544 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	843b      	strh	r3, [r7, #32]
 8008408:	8c3b      	ldrh	r3, [r7, #32]
 800840a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d01b      	beq.n	800844a <USB_DeactivateEndpoint+0x18a>
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	881b      	ldrh	r3, [r3, #0]
 800841e:	b29b      	uxth	r3, r3
 8008420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008428:	83fb      	strh	r3, [r7, #30]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	441a      	add	r2, r3
 8008434:	8bfb      	ldrh	r3, [r7, #30]
 8008436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800843a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	b29b      	uxth	r3, r3
 8008448:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	83bb      	strh	r3, [r7, #28]
 8008458:	8bbb      	ldrh	r3, [r7, #28]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01b      	beq.n	800849a <USB_DeactivateEndpoint+0x1da>
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008478:	837b      	strh	r3, [r7, #26]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	441a      	add	r2, r3
 8008484:	8b7b      	ldrh	r3, [r7, #26]
 8008486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008496:	b29b      	uxth	r3, r3
 8008498:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b0:	833b      	strh	r3, [r7, #24]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	441a      	add	r2, r3
 80084bc:	8b3b      	ldrh	r3, [r7, #24]
 80084be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e8:	82fb      	strh	r3, [r7, #22]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	8afb      	ldrh	r3, [r7, #22]
 80084f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008506:	b29b      	uxth	r3, r3
 8008508:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008520:	82bb      	strh	r3, [r7, #20]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	441a      	add	r2, r3
 800852c:	8abb      	ldrh	r3, [r7, #20]
 800852e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853e:	b29b      	uxth	r3, r3
 8008540:	8013      	strh	r3, [r2, #0]
 8008542:	e0a3      	b.n	800868c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01b      	beq.n	8008594 <USB_DeactivateEndpoint+0x2d4>
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008572:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	441a      	add	r2, r3
 800857e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008590:	b29b      	uxth	r3, r3
 8008592:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80085a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80085a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01b      	beq.n	80085e4 <USB_DeactivateEndpoint+0x324>
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	441a      	add	r2, r3
 80085ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008632:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866a:	847b      	strh	r3, [r7, #34]	; 0x22
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	441a      	add	r2, r3
 8008676:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008688:	b29b      	uxth	r3, r3
 800868a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3734      	adds	r7, #52	; 0x34
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b0c2      	sub	sp, #264	; 0x108
 800869e:	af00      	add	r7, sp, #0
 80086a0:	1d3b      	adds	r3, r7, #4
 80086a2:	6018      	str	r0, [r3, #0]
 80086a4:	463b      	mov	r3, r7
 80086a6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086a8:	463b      	mov	r3, r7
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f040 8509 	bne.w	80090c6 <USB_EPStartXfer+0xa2c>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086b4:	463b      	mov	r3, r7
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	463b      	mov	r3, r7
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d905      	bls.n	80086d0 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80086c4:	463b      	mov	r3, r7
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086ce:	e004      	b.n	80086da <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80086d0:	463b      	mov	r3, r7
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80086da:	463b      	mov	r3, r7
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	7b1b      	ldrb	r3, [r3, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d128      	bne.n	8008736 <USB_EPStartXfer+0x9c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80086e4:	463b      	mov	r3, r7
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6959      	ldr	r1, [r3, #20]
 80086ea:	463b      	mov	r3, r7
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	88da      	ldrh	r2, [r3, #6]
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	1d38      	adds	r0, r7, #4
 80086f8:	6800      	ldr	r0, [r0, #0]
 80086fa:	f001 f9da 	bl	8009ab2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800870c:	b29b      	uxth	r3, r3
 800870e:	461a      	mov	r2, r3
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
 8008716:	463b      	mov	r3, r7
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	00da      	lsls	r2, r3, #3
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	4413      	add	r3, r2
 8008722:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	801a      	strh	r2, [r3, #0]
 8008732:	f000 bc9f 	b.w	8009074 <USB_EPStartXfer+0x9da>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008736:	463b      	mov	r3, r7
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	78db      	ldrb	r3, [r3, #3]
 800873c:	2b02      	cmp	r3, #2
 800873e:	f040 8347 	bne.w	8008dd0 <USB_EPStartXfer+0x736>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008742:	463b      	mov	r3, r7
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a1a      	ldr	r2, [r3, #32]
 8008748:	463b      	mov	r3, r7
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	429a      	cmp	r2, r3
 8008750:	f240 82eb 	bls.w	8008d2a <USB_EPStartXfer+0x690>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008754:	1d3b      	adds	r3, r7, #4
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	463b      	mov	r3, r7
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	b29b      	uxth	r3, r3
 8008766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008772:	1d3b      	adds	r3, r7, #4
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	463b      	mov	r3, r7
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	441a      	add	r2, r3
 8008780:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008794:	b29b      	uxth	r3, r3
 8008796:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087aa:	1d3b      	adds	r3, r7, #4
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	463b      	mov	r3, r7
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8159 	beq.w	8008a78 <USB_EPStartXfer+0x3de>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	633b      	str	r3, [r7, #48]	; 0x30
 80087cc:	463b      	mov	r3, r7
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d164      	bne.n	80088a0 <USB_EPStartXfer+0x206>
 80087d6:	1d3b      	adds	r3, r7, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28
 80087dc:	1d3b      	adds	r3, r7, #4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	4413      	add	r3, r2
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ee:	463b      	mov	r3, r7
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	00da      	lsls	r2, r3, #3
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	4413      	add	r3, r2
 80087fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008804:	2b3e      	cmp	r3, #62	; 0x3e
 8008806:	d91c      	bls.n	8008842 <USB_EPStartXfer+0x1a8>
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <USB_EPStartXfer+0x18e>
 800881e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008822:	3b01      	subs	r3, #1
 8008824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008828:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800882c:	b29b      	uxth	r3, r3
 800882e:	029b      	lsls	r3, r3, #10
 8008830:	b29b      	uxth	r3, r3
 8008832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800883a:	b29a      	uxth	r2, r3
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	e04a      	b.n	80088d8 <USB_EPStartXfer+0x23e>
 8008842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008846:	2b00      	cmp	r3, #0
 8008848:	d112      	bne.n	8008870 <USB_EPStartXfer+0x1d6>
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008854:	b29a      	uxth	r2, r3
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008868:	b29a      	uxth	r2, r3
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	801a      	strh	r2, [r3, #0]
 800886e:	e033      	b.n	80088d8 <USB_EPStartXfer+0x23e>
 8008870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800887a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d004      	beq.n	8008890 <USB_EPStartXfer+0x1f6>
 8008886:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800888a:	3301      	adds	r3, #1
 800888c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008890:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008894:	b29b      	uxth	r3, r3
 8008896:	029b      	lsls	r3, r3, #10
 8008898:	b29a      	uxth	r2, r3
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	e01b      	b.n	80088d8 <USB_EPStartXfer+0x23e>
 80088a0:	463b      	mov	r3, r7
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	785b      	ldrb	r3, [r3, #1]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d116      	bne.n	80088d8 <USB_EPStartXfer+0x23e>
 80088aa:	1d3b      	adds	r3, r7, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	4413      	add	r3, r2
 80088ba:	633b      	str	r3, [r7, #48]	; 0x30
 80088bc:	463b      	mov	r3, r7
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	00da      	lsls	r2, r3, #3
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	4413      	add	r3, r2
 80088c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80088d8:	463b      	mov	r3, r7
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	895b      	ldrh	r3, [r3, #10]
 80088de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088e2:	463b      	mov	r3, r7
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6959      	ldr	r1, [r3, #20]
 80088e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088f2:	1d38      	adds	r0, r7, #4
 80088f4:	6800      	ldr	r0, [r0, #0]
 80088f6:	f001 f8dc 	bl	8009ab2 <USB_WritePMA>
            ep->xfer_buff += len;
 80088fa:	463b      	mov	r3, r7
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008904:	441a      	add	r2, r3
 8008906:	463b      	mov	r3, r7
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a1a      	ldr	r2, [r3, #32]
 8008912:	463b      	mov	r3, r7
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	429a      	cmp	r2, r3
 800891a:	d909      	bls.n	8008930 <USB_EPStartXfer+0x296>
            {
              ep->xfer_len_db -= len;
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6a1a      	ldr	r2, [r3, #32]
 8008922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008926:	1ad2      	subs	r2, r2, r3
 8008928:	463b      	mov	r3, r7
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	621a      	str	r2, [r3, #32]
 800892e:	e008      	b.n	8008942 <USB_EPStartXfer+0x2a8>
            }
            else
            {
              len = ep->xfer_len_db;
 8008930:	463b      	mov	r3, r7
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800893a:	463b      	mov	r3, r7
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2200      	movs	r2, #0
 8008940:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008942:	463b      	mov	r3, r7
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	785b      	ldrb	r3, [r3, #1]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d164      	bne.n	8008a16 <USB_EPStartXfer+0x37c>
 800894c:	1d3b      	adds	r3, r7, #4
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	1d3b      	adds	r3, r7, #4
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895a:	b29b      	uxth	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	4413      	add	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	463b      	mov	r3, r7
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	00da      	lsls	r2, r3, #3
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	4413      	add	r3, r2
 8008970:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008974:	617b      	str	r3, [r7, #20]
 8008976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897a:	2b3e      	cmp	r3, #62	; 0x3e
 800897c:	d91c      	bls.n	80089b8 <USB_EPStartXfer+0x31e>
 800897e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008982:	095b      	lsrs	r3, r3, #5
 8008984:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	2b00      	cmp	r3, #0
 8008992:	d104      	bne.n	800899e <USB_EPStartXfer+0x304>
 8008994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008998:	3b01      	subs	r3, #1
 800899a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800899e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	801a      	strh	r2, [r3, #0]
 80089b6:	e04d      	b.n	8008a54 <USB_EPStartXfer+0x3ba>
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d112      	bne.n	80089e6 <USB_EPStartXfer+0x34c>
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089de:	b29a      	uxth	r2, r3
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	801a      	strh	r2, [r3, #0]
 80089e4:	e036      	b.n	8008a54 <USB_EPStartXfer+0x3ba>
 80089e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ea:	085b      	lsrs	r3, r3, #1
 80089ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <USB_EPStartXfer+0x36c>
 80089fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a00:	3301      	adds	r3, #1
 8008a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	029b      	lsls	r3, r3, #10
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	801a      	strh	r2, [r3, #0]
 8008a14:	e01e      	b.n	8008a54 <USB_EPStartXfer+0x3ba>
 8008a16:	463b      	mov	r3, r7
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	785b      	ldrb	r3, [r3, #1]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d119      	bne.n	8008a54 <USB_EPStartXfer+0x3ba>
 8008a20:	1d3b      	adds	r3, r7, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	623b      	str	r3, [r7, #32]
 8008a26:	1d3b      	adds	r3, r7, #4
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	4413      	add	r3, r2
 8008a36:	623b      	str	r3, [r7, #32]
 8008a38:	463b      	mov	r3, r7
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	00da      	lsls	r2, r3, #3
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	4413      	add	r3, r2
 8008a44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a48:	61fb      	str	r3, [r7, #28]
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a54:	463b      	mov	r3, r7
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	891b      	ldrh	r3, [r3, #8]
 8008a5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a5e:	463b      	mov	r3, r7
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6959      	ldr	r1, [r3, #20]
 8008a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a6e:	1d38      	adds	r0, r7, #4
 8008a70:	6800      	ldr	r0, [r0, #0]
 8008a72:	f001 f81e 	bl	8009ab2 <USB_WritePMA>
 8008a76:	e2fd      	b.n	8009074 <USB_EPStartXfer+0x9da>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a78:	463b      	mov	r3, r7
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	785b      	ldrb	r3, [r3, #1]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d164      	bne.n	8008b4c <USB_EPStartXfer+0x4b2>
 8008a82:	1d3b      	adds	r3, r7, #4
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a88:	1d3b      	adds	r3, r7, #4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	461a      	mov	r2, r3
 8008a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a96:	4413      	add	r3, r2
 8008a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	00da      	lsls	r2, r3, #3
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ab2:	d91c      	bls.n	8008aee <USB_EPStartXfer+0x454>
 8008ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab8:	095b      	lsrs	r3, r3, #5
 8008aba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ac2:	f003 031f 	and.w	r3, r3, #31
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <USB_EPStartXfer+0x43a>
 8008aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ad4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	029b      	lsls	r3, r3, #10
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aea:	801a      	strh	r2, [r3, #0]
 8008aec:	e04d      	b.n	8008b8a <USB_EPStartXfer+0x4f0>
 8008aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d112      	bne.n	8008b1c <USB_EPStartXfer+0x482>
 8008af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b04:	801a      	strh	r2, [r3, #0]
 8008b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e036      	b.n	8008b8a <USB_EPStartXfer+0x4f0>
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <USB_EPStartXfer+0x4a2>
 8008b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b36:	3301      	adds	r3, #1
 8008b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e01e      	b.n	8008b8a <USB_EPStartXfer+0x4f0>
 8008b4c:	463b      	mov	r3, r7
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d119      	bne.n	8008b8a <USB_EPStartXfer+0x4f0>
 8008b56:	1d3b      	adds	r3, r7, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b5c:	1d3b      	adds	r3, r7, #4
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	461a      	mov	r2, r3
 8008b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6a:	4413      	add	r3, r2
 8008b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b6e:	463b      	mov	r3, r7
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	00da      	lsls	r2, r3, #3
 8008b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b78:	4413      	add	r3, r2
 8008b7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	891b      	ldrh	r3, [r3, #8]
 8008b90:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b94:	463b      	mov	r3, r7
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6959      	ldr	r1, [r3, #20]
 8008b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ba4:	1d38      	adds	r0, r7, #4
 8008ba6:	6800      	ldr	r0, [r0, #0]
 8008ba8:	f000 ff83 	bl	8009ab2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008bac:	463b      	mov	r3, r7
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695a      	ldr	r2, [r3, #20]
 8008bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bb6:	441a      	add	r2, r3
 8008bb8:	463b      	mov	r3, r7
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bbe:	463b      	mov	r3, r7
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6a1a      	ldr	r2, [r3, #32]
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d909      	bls.n	8008be2 <USB_EPStartXfer+0x548>
            {
              ep->xfer_len_db -= len;
 8008bce:	463b      	mov	r3, r7
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6a1a      	ldr	r2, [r3, #32]
 8008bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd8:	1ad2      	subs	r2, r2, r3
 8008bda:	463b      	mov	r3, r7
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	621a      	str	r2, [r3, #32]
 8008be0:	e008      	b.n	8008bf4 <USB_EPStartXfer+0x55a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008bec:	463b      	mov	r3, r7
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d164      	bne.n	8008cce <USB_EPStartXfer+0x634>
 8008c04:	1d3b      	adds	r3, r7, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	4413      	add	r3, r2
 8008c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c1c:	463b      	mov	r3, r7
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	00da      	lsls	r2, r3, #3
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	4413      	add	r3, r2
 8008c28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c32:	2b3e      	cmp	r3, #62	; 0x3e
 8008c34:	d91c      	bls.n	8008c70 <USB_EPStartXfer+0x5d6>
 8008c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d104      	bne.n	8008c56 <USB_EPStartXfer+0x5bc>
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c50:	3b01      	subs	r3, #1
 8008c52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	029b      	lsls	r3, r3, #10
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	801a      	strh	r2, [r3, #0]
 8008c6e:	e04a      	b.n	8008d06 <USB_EPStartXfer+0x66c>
 8008c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USB_EPStartXfer+0x604>
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e033      	b.n	8008d06 <USB_EPStartXfer+0x66c>
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <USB_EPStartXfer+0x624>
 8008cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cb8:	3301      	adds	r3, #1
 8008cba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	029b      	lsls	r3, r3, #10
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	801a      	strh	r2, [r3, #0]
 8008ccc:	e01b      	b.n	8008d06 <USB_EPStartXfer+0x66c>
 8008cce:	463b      	mov	r3, r7
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d116      	bne.n	8008d06 <USB_EPStartXfer+0x66c>
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce6:	4413      	add	r3, r2
 8008ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cea:	463b      	mov	r3, r7
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	00da      	lsls	r2, r3, #3
 8008cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d06:	463b      	mov	r3, r7
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	895b      	ldrh	r3, [r3, #10]
 8008d0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d10:	463b      	mov	r3, r7
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6959      	ldr	r1, [r3, #20]
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d20:	1d38      	adds	r0, r7, #4
 8008d22:	6800      	ldr	r0, [r0, #0]
 8008d24:	f000 fec5 	bl	8009ab2 <USB_WritePMA>
 8008d28:	e1a4      	b.n	8009074 <USB_EPStartXfer+0x9da>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008d34:	1d3b      	adds	r3, r7, #4
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	463b      	mov	r3, r7
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	463b      	mov	r3, r7
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	441a      	add	r2, r3
 8008d60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d78:	1d3b      	adds	r3, r7, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d8c:	4413      	add	r3, r2
 8008d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d90:	463b      	mov	r3, r7
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	00da      	lsls	r2, r3, #3
 8008d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008daa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008dac:	463b      	mov	r3, r7
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	891b      	ldrh	r3, [r3, #8]
 8008db2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008db6:	463b      	mov	r3, r7
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6959      	ldr	r1, [r3, #20]
 8008dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008dc6:	1d38      	adds	r0, r7, #4
 8008dc8:	6800      	ldr	r0, [r0, #0]
 8008dca:	f000 fe72 	bl	8009ab2 <USB_WritePMA>
 8008dce:	e151      	b.n	8009074 <USB_EPStartXfer+0x9da>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008dd0:	463b      	mov	r3, r7
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6a1a      	ldr	r2, [r3, #32]
 8008dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dda:	1ad2      	subs	r2, r2, r3
 8008ddc:	463b      	mov	r3, r7
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008de2:	1d3b      	adds	r3, r7, #4
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	463b      	mov	r3, r7
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 809b 	beq.w	8008f34 <USB_EPStartXfer+0x89a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dfe:	1d3b      	adds	r3, r7, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	673b      	str	r3, [r7, #112]	; 0x70
 8008e04:	463b      	mov	r3, r7
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d164      	bne.n	8008ed8 <USB_EPStartXfer+0x83e>
 8008e0e:	1d3b      	adds	r3, r7, #4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e14:	1d3b      	adds	r3, r7, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e22:	4413      	add	r3, r2
 8008e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e26:	463b      	mov	r3, r7
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	00da      	lsls	r2, r3, #3
 8008e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e30:	4413      	add	r3, r2
 8008e32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008e36:	667b      	str	r3, [r7, #100]	; 0x64
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008e3e:	d91c      	bls.n	8008e7a <USB_EPStartXfer+0x7e0>
 8008e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <USB_EPStartXfer+0x7c6>
 8008e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	029b      	lsls	r3, r3, #10
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e76:	801a      	strh	r2, [r3, #0]
 8008e78:	e04a      	b.n	8008f10 <USB_EPStartXfer+0x876>
 8008e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d112      	bne.n	8008ea8 <USB_EPStartXfer+0x80e>
 8008e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	e033      	b.n	8008f10 <USB_EPStartXfer+0x876>
 8008ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <USB_EPStartXfer+0x82e>
 8008ebe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	029b      	lsls	r3, r3, #10
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ed4:	801a      	strh	r2, [r3, #0]
 8008ed6:	e01b      	b.n	8008f10 <USB_EPStartXfer+0x876>
 8008ed8:	463b      	mov	r3, r7
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d116      	bne.n	8008f10 <USB_EPStartXfer+0x876>
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ef0:	4413      	add	r3, r2
 8008ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	00da      	lsls	r2, r3, #3
 8008efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f10:	463b      	mov	r3, r7
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	895b      	ldrh	r3, [r3, #10]
 8008f16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6959      	ldr	r1, [r3, #20]
 8008f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f2a:	1d38      	adds	r0, r7, #4
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f000 fdc0 	bl	8009ab2 <USB_WritePMA>
 8008f32:	e09f      	b.n	8009074 <USB_EPStartXfer+0x9da>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	785b      	ldrb	r3, [r3, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d164      	bne.n	8009008 <USB_EPStartXfer+0x96e>
 8008f3e:	1d3b      	adds	r3, r7, #4
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f44:	1d3b      	adds	r3, r7, #4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f52:	4413      	add	r3, r2
 8008f54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f56:	463b      	mov	r3, r7
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	00da      	lsls	r2, r3, #3
 8008f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f60:	4413      	add	r3, r2
 8008f62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f66:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f6e:	d91c      	bls.n	8008faa <USB_EPStartXfer+0x910>
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <USB_EPStartXfer+0x8f6>
 8008f86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	029b      	lsls	r3, r3, #10
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa6:	801a      	strh	r2, [r3, #0]
 8008fa8:	e053      	b.n	8009052 <USB_EPStartXfer+0x9b8>
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d112      	bne.n	8008fd8 <USB_EPStartXfer+0x93e>
 8008fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc0:	801a      	strh	r2, [r3, #0]
 8008fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd4:	801a      	strh	r2, [r3, #0]
 8008fd6:	e03c      	b.n	8009052 <USB_EPStartXfer+0x9b8>
 8008fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fdc:	085b      	lsrs	r3, r3, #1
 8008fde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <USB_EPStartXfer+0x95e>
 8008fee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ff8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	029b      	lsls	r3, r3, #10
 8009000:	b29a      	uxth	r2, r3
 8009002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009004:	801a      	strh	r2, [r3, #0]
 8009006:	e024      	b.n	8009052 <USB_EPStartXfer+0x9b8>
 8009008:	463b      	mov	r3, r7
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d11f      	bne.n	8009052 <USB_EPStartXfer+0x9b8>
 8009012:	1d3b      	adds	r3, r7, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800901a:	1d3b      	adds	r3, r7, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800902a:	4413      	add	r3, r2
 800902c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009030:	463b      	mov	r3, r7
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	00da      	lsls	r2, r3, #3
 8009038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800903c:	4413      	add	r3, r2
 800903e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904a:	b29a      	uxth	r2, r3
 800904c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009050:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009052:	463b      	mov	r3, r7
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	891b      	ldrh	r3, [r3, #8]
 8009058:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905c:	463b      	mov	r3, r7
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6959      	ldr	r1, [r3, #20]
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009066:	b29b      	uxth	r3, r3
 8009068:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800906c:	1d38      	adds	r0, r7, #4
 800906e:	6800      	ldr	r0, [r0, #0]
 8009070:	f000 fd1f 	bl	8009ab2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009074:	1d3b      	adds	r3, r7, #4
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	463b      	mov	r3, r7
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	b29b      	uxth	r3, r3
 8009086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908e:	817b      	strh	r3, [r7, #10]
 8009090:	897b      	ldrh	r3, [r7, #10]
 8009092:	f083 0310 	eor.w	r3, r3, #16
 8009096:	817b      	strh	r3, [r7, #10]
 8009098:	897b      	ldrh	r3, [r7, #10]
 800909a:	f083 0320 	eor.w	r3, r3, #32
 800909e:	817b      	strh	r3, [r7, #10]
 80090a0:	1d3b      	adds	r3, r7, #4
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	463b      	mov	r3, r7
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	897b      	ldrh	r3, [r7, #10]
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
 80090c4:	e3b5      	b.n	8009832 <USB_EPStartXfer+0x1198>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80090c6:	463b      	mov	r3, r7
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	7b1b      	ldrb	r3, [r3, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 8090 	bne.w	80091f2 <USB_EPStartXfer+0xb58>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80090d2:	463b      	mov	r3, r7
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	463b      	mov	r3, r7
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d90e      	bls.n	8009100 <USB_EPStartXfer+0xa66>
      {
        len = ep->maxpacket;
 80090e2:	463b      	mov	r3, r7
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80090ec:	463b      	mov	r3, r7
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	463b      	mov	r3, r7
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	619a      	str	r2, [r3, #24]
 80090fe:	e008      	b.n	8009112 <USB_EPStartXfer+0xa78>
      }
      else
      {
        len = ep->xfer_len;
 8009100:	463b      	mov	r3, r7
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800910a:	463b      	mov	r3, r7
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2200      	movs	r2, #0
 8009110:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009112:	1d3b      	adds	r3, r7, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800911a:	1d3b      	adds	r3, r7, #4
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009122:	b29b      	uxth	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800912a:	4413      	add	r3, r2
 800912c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009130:	463b      	mov	r3, r7
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	00da      	lsls	r2, r3, #3
 8009138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800913c:	4413      	add	r3, r2
 800913e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	2b3e      	cmp	r3, #62	; 0x3e
 800914c:	d91d      	bls.n	800918a <USB_EPStartXfer+0xaf0>
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	2b00      	cmp	r3, #0
 8009162:	d104      	bne.n	800916e <USB_EPStartXfer+0xad4>
 8009164:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009168:	3b01      	subs	r3, #1
 800916a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800916e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009172:	b29b      	uxth	r3, r3
 8009174:	029b      	lsls	r3, r3, #10
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800917c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009180:	b29a      	uxth	r2, r3
 8009182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009186:	801a      	strh	r2, [r3, #0]
 8009188:	e325      	b.n	80097d6 <USB_EPStartXfer+0x113c>
 800918a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918e:	2b00      	cmp	r3, #0
 8009190:	d116      	bne.n	80091c0 <USB_EPStartXfer+0xb26>
 8009192:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009196:	881b      	ldrh	r3, [r3, #0]
 8009198:	b29b      	uxth	r3, r3
 800919a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800919e:	b29a      	uxth	r2, r3
 80091a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091a4:	801a      	strh	r2, [r3, #0]
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e30a      	b.n	80097d6 <USB_EPStartXfer+0x113c>
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c4:	085b      	lsrs	r3, r3, #1
 80091c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <USB_EPStartXfer+0xb46>
 80091d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091da:	3301      	adds	r3, #1
 80091dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	029b      	lsls	r3, r3, #10
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ee:	801a      	strh	r2, [r3, #0]
 80091f0:	e2f1      	b.n	80097d6 <USB_EPStartXfer+0x113c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80091f2:	463b      	mov	r3, r7
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	78db      	ldrb	r3, [r3, #3]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	f040 818f 	bne.w	800951c <USB_EPStartXfer+0xe82>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80091fe:	463b      	mov	r3, r7
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	785b      	ldrb	r3, [r3, #1]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d175      	bne.n	80092f4 <USB_EPStartXfer+0xc5a>
 8009208:	1d3b      	adds	r3, r7, #4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009210:	1d3b      	adds	r3, r7, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009218:	b29b      	uxth	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009220:	4413      	add	r3, r2
 8009222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009226:	463b      	mov	r3, r7
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	00da      	lsls	r2, r3, #3
 800922e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009232:	4413      	add	r3, r2
 8009234:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800923c:	463b      	mov	r3, r7
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	2b3e      	cmp	r3, #62	; 0x3e
 8009244:	d91f      	bls.n	8009286 <USB_EPStartXfer+0xbec>
 8009246:	463b      	mov	r3, r7
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009252:	463b      	mov	r3, r7
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	2b00      	cmp	r3, #0
 800925e:	d104      	bne.n	800926a <USB_EPStartXfer+0xbd0>
 8009260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009264:	3b01      	subs	r3, #1
 8009266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	b29b      	uxth	r3, r3
 8009270:	029b      	lsls	r3, r3, #10
 8009272:	b29b      	uxth	r3, r3
 8009274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800927c:	b29a      	uxth	r2, r3
 800927e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	e05c      	b.n	8009340 <USB_EPStartXfer+0xca6>
 8009286:	463b      	mov	r3, r7
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d116      	bne.n	80092be <USB_EPStartXfer+0xc24>
 8009290:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800929c:	b29a      	uxth	r2, r3
 800929e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092a2:	801a      	strh	r2, [r3, #0]
 80092a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092ba:	801a      	strh	r2, [r3, #0]
 80092bc:	e040      	b.n	8009340 <USB_EPStartXfer+0xca6>
 80092be:	463b      	mov	r3, r7
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ca:	463b      	mov	r3, r7
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <USB_EPStartXfer+0xc48>
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	3301      	adds	r3, #1
 80092de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e025      	b.n	8009340 <USB_EPStartXfer+0xca6>
 80092f4:	463b      	mov	r3, r7
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	785b      	ldrb	r3, [r3, #1]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d120      	bne.n	8009340 <USB_EPStartXfer+0xca6>
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009306:	1d3b      	adds	r3, r7, #4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800930e:	b29b      	uxth	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009316:	4413      	add	r3, r2
 8009318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800931c:	463b      	mov	r3, r7
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	00da      	lsls	r2, r3, #3
 8009324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009328:	4413      	add	r3, r2
 800932a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800932e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009332:	463b      	mov	r3, r7
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	b29a      	uxth	r2, r3
 800933a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800933e:	801a      	strh	r2, [r3, #0]
 8009340:	1d3b      	adds	r3, r7, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009348:	463b      	mov	r3, r7
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	785b      	ldrb	r3, [r3, #1]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d175      	bne.n	800943e <USB_EPStartXfer+0xda4>
 8009352:	1d3b      	adds	r3, r7, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009362:	b29b      	uxth	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936a:	4413      	add	r3, r2
 800936c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009370:	463b      	mov	r3, r7
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	00da      	lsls	r2, r3, #3
 8009378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800937c:	4413      	add	r3, r2
 800937e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009386:	463b      	mov	r3, r7
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	2b3e      	cmp	r3, #62	; 0x3e
 800938e:	d91f      	bls.n	80093d0 <USB_EPStartXfer+0xd36>
 8009390:	463b      	mov	r3, r7
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	095b      	lsrs	r3, r3, #5
 8009398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800939c:	463b      	mov	r3, r7
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d104      	bne.n	80093b4 <USB_EPStartXfer+0xd1a>
 80093aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ae:	3b01      	subs	r3, #1
 80093b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	029b      	lsls	r3, r3, #10
 80093bc:	b29b      	uxth	r3, r3
 80093be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093cc:	801a      	strh	r2, [r3, #0]
 80093ce:	e058      	b.n	8009482 <USB_EPStartXfer+0xde8>
 80093d0:	463b      	mov	r3, r7
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d116      	bne.n	8009408 <USB_EPStartXfer+0xd6e>
 80093da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ec:	801a      	strh	r2, [r3, #0]
 80093ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29a      	uxth	r2, r3
 8009400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009404:	801a      	strh	r2, [r3, #0]
 8009406:	e03c      	b.n	8009482 <USB_EPStartXfer+0xde8>
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	085b      	lsrs	r3, r3, #1
 8009410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009414:	463b      	mov	r3, r7
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d004      	beq.n	800942c <USB_EPStartXfer+0xd92>
 8009422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009426:	3301      	adds	r3, #1
 8009428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800942c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009430:	b29b      	uxth	r3, r3
 8009432:	029b      	lsls	r3, r3, #10
 8009434:	b29a      	uxth	r2, r3
 8009436:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e021      	b.n	8009482 <USB_EPStartXfer+0xde8>
 800943e:	463b      	mov	r3, r7
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d11c      	bne.n	8009482 <USB_EPStartXfer+0xde8>
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009450:	b29b      	uxth	r3, r3
 8009452:	461a      	mov	r2, r3
 8009454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009458:	4413      	add	r3, r2
 800945a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800945e:	463b      	mov	r3, r7
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	00da      	lsls	r2, r3, #3
 8009466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800946a:	4413      	add	r3, r2
 800946c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009470:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009474:	463b      	mov	r3, r7
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	b29a      	uxth	r2, r3
 800947c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009480:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009482:	463b      	mov	r3, r7
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 81a4 	beq.w	80097d6 <USB_EPStartXfer+0x113c>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800948e:	1d3b      	adds	r3, r7, #4
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	463b      	mov	r3, r7
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d005      	beq.n	80094ba <USB_EPStartXfer+0xe20>
 80094ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <USB_EPStartXfer+0xe3c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 8187 	bne.w	80097d6 <USB_EPStartXfer+0x113c>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 8180 	bne.w	80097d6 <USB_EPStartXfer+0x113c>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	463b      	mov	r3, r7
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80094f4:	1d3b      	adds	r3, r7, #4
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	463b      	mov	r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	441a      	add	r2, r3
 8009502:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800950a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009512:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009516:	b29b      	uxth	r3, r3
 8009518:	8013      	strh	r3, [r2, #0]
 800951a:	e15c      	b.n	80097d6 <USB_EPStartXfer+0x113c>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800951c:	463b      	mov	r3, r7
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	78db      	ldrb	r3, [r3, #3]
 8009522:	2b01      	cmp	r3, #1
 8009524:	f040 8155 	bne.w	80097d2 <USB_EPStartXfer+0x1138>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009528:	463b      	mov	r3, r7
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	463b      	mov	r3, r7
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	429a      	cmp	r2, r3
 8009536:	d90e      	bls.n	8009556 <USB_EPStartXfer+0xebc>
        {
          len = ep->maxpacket;
 8009538:	463b      	mov	r3, r7
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009542:	463b      	mov	r3, r7
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699a      	ldr	r2, [r3, #24]
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	1ad2      	subs	r2, r2, r3
 800954e:	463b      	mov	r3, r7
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	619a      	str	r2, [r3, #24]
 8009554:	e008      	b.n	8009568 <USB_EPStartXfer+0xece>
        }
        else
        {
          len = ep->xfer_len;
 8009556:	463b      	mov	r3, r7
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009560:	463b      	mov	r3, r7
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2200      	movs	r2, #0
 8009566:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009568:	463b      	mov	r3, r7
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d16f      	bne.n	8009652 <USB_EPStartXfer+0xfb8>
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009582:	b29b      	uxth	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800958a:	4413      	add	r3, r2
 800958c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009590:	463b      	mov	r3, r7
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	00da      	lsls	r2, r3, #3
 8009598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800959c:	4413      	add	r3, r2
 800959e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095aa:	2b3e      	cmp	r3, #62	; 0x3e
 80095ac:	d91d      	bls.n	80095ea <USB_EPStartXfer+0xf50>
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	095b      	lsrs	r3, r3, #5
 80095b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d104      	bne.n	80095ce <USB_EPStartXfer+0xf34>
 80095c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c8:	3b01      	subs	r3, #1
 80095ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80095ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	029b      	lsls	r3, r3, #10
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	e058      	b.n	800969c <USB_EPStartXfer+0x1002>
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d116      	bne.n	8009620 <USB_EPStartXfer+0xf86>
 80095f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095fe:	b29a      	uxth	r2, r3
 8009600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009604:	801a      	strh	r2, [r3, #0]
 8009606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009616:	b29a      	uxth	r2, r3
 8009618:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800961c:	801a      	strh	r2, [r3, #0]
 800961e:	e03d      	b.n	800969c <USB_EPStartXfer+0x1002>
 8009620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USB_EPStartXfer+0xfa6>
 8009636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800963a:	3301      	adds	r3, #1
 800963c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009644:	b29b      	uxth	r3, r3
 8009646:	029b      	lsls	r3, r3, #10
 8009648:	b29a      	uxth	r2, r3
 800964a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800964e:	801a      	strh	r2, [r3, #0]
 8009650:	e024      	b.n	800969c <USB_EPStartXfer+0x1002>
 8009652:	463b      	mov	r3, r7
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d11f      	bne.n	800969c <USB_EPStartXfer+0x1002>
 800965c:	1d3b      	adds	r3, r7, #4
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009664:	1d3b      	adds	r3, r7, #4
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800966c:	b29b      	uxth	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009674:	4413      	add	r3, r2
 8009676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800967a:	463b      	mov	r3, r7
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	00da      	lsls	r2, r3, #3
 8009682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009686:	4413      	add	r3, r2
 8009688:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800968c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009694:	b29a      	uxth	r2, r3
 8009696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	1d3b      	adds	r3, r7, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80096a4:	463b      	mov	r3, r7
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	785b      	ldrb	r3, [r3, #1]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d16f      	bne.n	800978e <USB_EPStartXfer+0x10f4>
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096b6:	1d3b      	adds	r3, r7, #4
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096be:	b29b      	uxth	r3, r3
 80096c0:	461a      	mov	r2, r3
 80096c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096c6:	4413      	add	r3, r2
 80096c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80096cc:	463b      	mov	r3, r7
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	00da      	lsls	r2, r3, #3
 80096d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096d8:	4413      	add	r3, r2
 80096da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e6:	2b3e      	cmp	r3, #62	; 0x3e
 80096e8:	d91d      	bls.n	8009726 <USB_EPStartXfer+0x108c>
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d104      	bne.n	800970a <USB_EPStartXfer+0x1070>
 8009700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009704:	3b01      	subs	r3, #1
 8009706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800970a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800970e:	b29b      	uxth	r3, r3
 8009710:	029b      	lsls	r3, r3, #10
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800971c:	b29a      	uxth	r2, r3
 800971e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e057      	b.n	80097d6 <USB_EPStartXfer+0x113c>
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800972a:	2b00      	cmp	r3, #0
 800972c:	d116      	bne.n	800975c <USB_EPStartXfer+0x10c2>
 800972e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800973a:	b29a      	uxth	r2, r3
 800973c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009752:	b29a      	uxth	r2, r3
 8009754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009758:	801a      	strh	r2, [r3, #0]
 800975a:	e03c      	b.n	80097d6 <USB_EPStartXfer+0x113c>
 800975c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <USB_EPStartXfer+0x10e2>
 8009772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009776:	3301      	adds	r3, #1
 8009778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800977c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009780:	b29b      	uxth	r3, r3
 8009782:	029b      	lsls	r3, r3, #10
 8009784:	b29a      	uxth	r2, r3
 8009786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	e023      	b.n	80097d6 <USB_EPStartXfer+0x113c>
 800978e:	463b      	mov	r3, r7
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d11e      	bne.n	80097d6 <USB_EPStartXfer+0x113c>
 8009798:	1d3b      	adds	r3, r7, #4
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	461a      	mov	r2, r3
 80097a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097a8:	4413      	add	r3, r2
 80097aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097ae:	463b      	mov	r3, r7
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	00da      	lsls	r2, r3, #3
 80097b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097ba:	4413      	add	r3, r2
 80097bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e001      	b.n	80097d6 <USB_EPStartXfer+0x113c>
      }
      else
      {
        return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e02e      	b.n	8009834 <USB_EPStartXfer+0x119a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097d6:	1d3b      	adds	r3, r7, #4
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	463b      	mov	r3, r7
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80097f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80097fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009800:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009804:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009808:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800980c:	1d3b      	adds	r3, r7, #4
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	463b      	mov	r3, r7
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800981e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800982a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982e:	b29b      	uxth	r3, r3
 8009830:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d020      	beq.n	8009892 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009866:	81bb      	strh	r3, [r7, #12]
 8009868:	89bb      	ldrh	r3, [r7, #12]
 800986a:	f083 0310 	eor.w	r3, r3, #16
 800986e:	81bb      	strh	r3, [r7, #12]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	441a      	add	r2, r3
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988c:	b29b      	uxth	r3, r3
 800988e:	8013      	strh	r3, [r2, #0]
 8009890:	e01f      	b.n	80098d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a8:	81fb      	strh	r3, [r7, #14]
 80098aa:	89fb      	ldrh	r3, [r7, #14]
 80098ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098b0:	81fb      	strh	r3, [r7, #14]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	441a      	add	r2, r3
 80098bc:	89fb      	ldrh	r3, [r7, #14]
 80098be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	7b1b      	ldrb	r3, [r3, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 809d 	bne.w	8009a2e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d04c      	beq.n	8009996 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	823b      	strh	r3, [r7, #16]
 800990a:	8a3b      	ldrh	r3, [r7, #16]
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01b      	beq.n	800994c <USB_EPClearStall+0x6c>
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	881b      	ldrh	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992a:	81fb      	strh	r3, [r7, #14]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	441a      	add	r2, r3
 8009936:	89fb      	ldrh	r3, [r7, #14]
 8009938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800993c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009948:	b29b      	uxth	r3, r3
 800994a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	78db      	ldrb	r3, [r3, #3]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d06c      	beq.n	8009a2e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996a:	81bb      	strh	r3, [r7, #12]
 800996c:	89bb      	ldrh	r3, [r7, #12]
 800996e:	f083 0320 	eor.w	r3, r3, #32
 8009972:	81bb      	strh	r3, [r7, #12]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	441a      	add	r2, r3
 800997e:	89bb      	ldrh	r3, [r7, #12]
 8009980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009990:	b29b      	uxth	r3, r3
 8009992:	8013      	strh	r3, [r2, #0]
 8009994:	e04b      	b.n	8009a2e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4413      	add	r3, r2
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	82fb      	strh	r3, [r7, #22]
 80099a4:	8afb      	ldrh	r3, [r7, #22]
 80099a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01b      	beq.n	80099e6 <USB_EPClearStall+0x106>
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c4:	82bb      	strh	r3, [r7, #20]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	441a      	add	r2, r3
 80099d0:	8abb      	ldrh	r3, [r7, #20]
 80099d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099fc:	827b      	strh	r3, [r7, #18]
 80099fe:	8a7b      	ldrh	r3, [r7, #18]
 8009a00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a04:	827b      	strh	r3, [r7, #18]
 8009a06:	8a7b      	ldrh	r3, [r7, #18]
 8009a08:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a0c:	827b      	strh	r3, [r7, #18]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	8a7b      	ldrh	r3, [r7, #18]
 8009a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d103      	bne.n	8009a56 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2280      	movs	r2, #128	; 0x80
 8009a52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b08d      	sub	sp, #52	; 0x34
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	60f8      	str	r0, [r7, #12]
 8009aba:	60b9      	str	r1, [r7, #8]
 8009abc:	4611      	mov	r1, r2
 8009abe:	461a      	mov	r2, r3
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	80fb      	strh	r3, [r7, #6]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ac8:	88bb      	ldrh	r3, [r7, #4]
 8009aca:	3301      	adds	r3, #1
 8009acc:	085b      	lsrs	r3, r3, #1
 8009ace:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae8:	e01b      	b.n	8009b22 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	3301      	adds	r3, #1
 8009af4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	3302      	adds	r3, #2
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	3301      	adds	r3, #1
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e0      	bne.n	8009aea <USB_WritePMA+0x38>
  }
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	3734      	adds	r7, #52	; 0x34
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b08b      	sub	sp, #44	; 0x2c
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	4611      	mov	r1, r2
 8009b42:	461a      	mov	r2, r3
 8009b44:	460b      	mov	r3, r1
 8009b46:	80fb      	strh	r3, [r7, #6]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b4c:	88bb      	ldrh	r3, [r7, #4]
 8009b4e:	085b      	lsrs	r3, r3, #1
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b5c:	88fa      	ldrh	r2, [r7, #6]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b66:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b6c:	e018      	b.n	8009ba0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	3302      	adds	r3, #2
 8009b7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	3301      	adds	r3, #1
 8009b88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	3301      	adds	r3, #1
 8009b98:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e3      	bne.n	8009b6e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009ba6:	88bb      	ldrh	r3, [r7, #4]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d007      	beq.n	8009bc2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	701a      	strb	r2, [r3, #0]
  }
}
 8009bc2:	bf00      	nop
 8009bc4:	372c      	adds	r7, #44	; 0x2c
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bda:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bde:	f7f7 fd49 	bl	8001674 <USBD_static_malloc>
 8009be2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	e066      	b.n	8009cc4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7c1b      	ldrb	r3, [r3, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d119      	bne.n	8009c3a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	2181      	movs	r1, #129	; 0x81
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f7f7 fc0b 	bl	800142a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1e:	2202      	movs	r2, #2
 8009c20:	2101      	movs	r1, #1
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7f7 fc01 	bl	800142a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2210      	movs	r2, #16
 8009c34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009c38:	e016      	b.n	8009c68 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c3a:	2340      	movs	r3, #64	; 0x40
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2181      	movs	r1, #129	; 0x81
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f7 fbf2 	bl	800142a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	2202      	movs	r2, #2
 8009c50:	2101      	movs	r1, #1
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f7 fbe9 	bl	800142a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2210      	movs	r2, #16
 8009c64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c68:	2308      	movs	r3, #8
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	2182      	movs	r1, #130	; 0x82
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7f7 fbdb 	bl	800142a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7c1b      	ldrb	r3, [r3, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d109      	bne.n	8009cb2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ca8:	2101      	movs	r1, #1
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7f7 fcad 	bl	800160a <USBD_LL_PrepareReceive>
 8009cb0:	e007      	b.n	8009cc2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cb8:	2340      	movs	r3, #64	; 0x40
 8009cba:	2101      	movs	r1, #1
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7f7 fca4 	bl	800160a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009cd8:	2181      	movs	r1, #129	; 0x81
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7f7 fbcb 	bl	8001476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7f7 fbc4 	bl	8001476 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009cf6:	2182      	movs	r1, #130	; 0x82
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7f7 fbbc 	bl	8001476 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00e      	beq.n	8009d36 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7f7 fcb1 	bl	8001690 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d101      	bne.n	8009d68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e0af      	b.n	8009ec8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d03f      	beq.n	8009df4 <USBD_CDC_Setup+0xb4>
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	f040 809f 	bne.w	8009eb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d02e      	beq.n	8009de0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	b25b      	sxtb	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	da16      	bge.n	8009dba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009d98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	88d2      	ldrh	r2, [r2, #6]
 8009d9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	88db      	ldrh	r3, [r3, #6]
 8009da4:	2b07      	cmp	r3, #7
 8009da6:	bf28      	it	cs
 8009da8:	2307      	movcs	r3, #7
 8009daa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	89fa      	ldrh	r2, [r7, #14]
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 faa5 	bl	800b302 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009db8:	e085      	b.n	8009ec6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	785a      	ldrb	r2, [r3, #1]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	88db      	ldrh	r3, [r3, #6]
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009dd0:	6939      	ldr	r1, [r7, #16]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	88db      	ldrh	r3, [r3, #6]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fabe 	bl	800b35a <USBD_CtlPrepareRx>
      break;
 8009dde:	e072      	b.n	8009ec6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	7850      	ldrb	r0, [r2, #1]
 8009dec:	2200      	movs	r2, #0
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	4798      	blx	r3
      break;
 8009df2:	e068      	b.n	8009ec6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b0b      	cmp	r3, #11
 8009dfa:	d852      	bhi.n	8009ea2 <USBD_CDC_Setup+0x162>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USBD_CDC_Setup+0xc4>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e35 	.word	0x08009e35
 8009e08:	08009eb1 	.word	0x08009eb1
 8009e0c:	08009ea3 	.word	0x08009ea3
 8009e10:	08009ea3 	.word	0x08009ea3
 8009e14:	08009ea3 	.word	0x08009ea3
 8009e18:	08009ea3 	.word	0x08009ea3
 8009e1c:	08009ea3 	.word	0x08009ea3
 8009e20:	08009ea3 	.word	0x08009ea3
 8009e24:	08009ea3 	.word	0x08009ea3
 8009e28:	08009ea3 	.word	0x08009ea3
 8009e2c:	08009e5f 	.word	0x08009e5f
 8009e30:	08009e89 	.word	0x08009e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d107      	bne.n	8009e50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e40:	f107 030a 	add.w	r3, r7, #10
 8009e44:	2202      	movs	r2, #2
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fa5a 	bl	800b302 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e4e:	e032      	b.n	8009eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f001 f9e4 	bl	800b220 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e5c:	e02b      	b.n	8009eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d107      	bne.n	8009e7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e6a:	f107 030d 	add.w	r3, r7, #13
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 fa45 	bl	800b302 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e78:	e01d      	b.n	8009eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f9cf 	bl	800b220 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e82:	2303      	movs	r3, #3
 8009e84:	75fb      	strb	r3, [r7, #23]
          break;
 8009e86:	e016      	b.n	8009eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d00f      	beq.n	8009eb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 f9c2 	bl	800b220 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ea0:	e008      	b.n	8009eb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f001 f9bb 	bl	800b220 <USBD_CtlError>
          ret = USBD_FAIL;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	75fb      	strb	r3, [r7, #23]
          break;
 8009eae:	e002      	b.n	8009eb6 <USBD_CDC_Setup+0x176>
          break;
 8009eb0:	bf00      	nop
 8009eb2:	e008      	b.n	8009ec6 <USBD_CDC_Setup+0x186>
          break;
 8009eb4:	bf00      	nop
      }
      break;
 8009eb6:	e006      	b.n	8009ec6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 f9b0 	bl	800b220 <USBD_CtlError>
      ret = USBD_FAIL;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e04f      	b.n	8009f92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	440b      	add	r3, r1
 8009f08:	3318      	adds	r3, #24
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d029      	beq.n	8009f64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	440b      	add	r3, r1
 8009f1e:	3318      	adds	r3, #24
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	78f9      	ldrb	r1, [r7, #3]
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	460b      	mov	r3, r1
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	440b      	add	r3, r1
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4403      	add	r3, r0
 8009f30:	3338      	adds	r3, #56	; 0x38
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f38:	fb03 f301 	mul.w	r3, r3, r1
 8009f3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d110      	bne.n	8009f64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	3318      	adds	r3, #24
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f56:	78f9      	ldrb	r1, [r7, #3]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7f7 fb33 	bl	80015c8 <USBD_LL_Transmit>
 8009f62:	e015      	b.n	8009f90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e015      	b.n	8009fe8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7f7 fb43 	bl	800164c <USBD_LL_GetRxDataSize>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ffe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	e01b      	b.n	800a042 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d015      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x50>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a01a:	2bff      	cmp	r3, #255	; 0xff
 800a01c:	d010      	beq.n	800a040 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a02c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a034:	b292      	uxth	r2, r2
 800a036:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	22ff      	movs	r2, #255	; 0xff
 800a03c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2243      	movs	r2, #67	; 0x43
 800a058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a05a:	4b03      	ldr	r3, [pc, #12]	; (800a068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr
 800a068:	20000114 	.word	0x20000114

0800a06c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2243      	movs	r2, #67	; 0x43
 800a078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a07a:	4b03      	ldr	r3, [pc, #12]	; (800a088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr
 800a088:	200000d0 	.word	0x200000d0

0800a08c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2243      	movs	r2, #67	; 0x43
 800a098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a09a:	4b03      	ldr	r3, [pc, #12]	; (800a0a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	20000158 	.word	0x20000158

0800a0ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0ba:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	2000008c 	.word	0x2000008c

0800a0cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e004      	b.n	800a0ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b087      	sub	sp, #28
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a108:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a110:	2303      	movs	r3, #3
 800a112:	e008      	b.n	800a126 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	371c      	adds	r7, #28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a142:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d101      	bne.n	800a14e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e004      	b.n	800a158 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a172:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a174:	2301      	movs	r3, #1
 800a176:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a182:	2303      	movs	r3, #3
 800a184:	e01a      	b.n	800a1bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d114      	bne.n	800a1ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2201      	movs	r2, #1
 800a194:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a1ae:	2181      	movs	r1, #129	; 0x81
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7f7 fa09 	bl	80015c8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e016      	b.n	800a210 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7c1b      	ldrb	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d109      	bne.n	800a1fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7f7 fa07 	bl	800160a <USBD_LL_PrepareReceive>
 800a1fc:	e007      	b.n	800a20e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a204:	2340      	movs	r3, #64	; 0x40
 800a206:	2101      	movs	r1, #1
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7f7 f9fe 	bl	800160a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	4613      	mov	r3, r2
 800a224:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e01f      	b.n	800a270 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	79fa      	ldrb	r2, [r7, #7]
 800a262:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7f7 f86f 	bl	8001348 <USBD_LL_Init>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e016      	b.n	800a2be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	f107 020e 	add.w	r2, r7, #14
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4798      	blx	r3
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7f7 f890 	bl	80013f4 <USBD_LL_Start>
 800a2d4:	4603      	mov	r3, r0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	78fa      	ldrb	r2, [r7, #3]
 800a318:	4611      	mov	r1, r2
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	4798      	blx	r3
 800a31e:	4603      	mov	r3, r0
 800a320:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	4611      	mov	r1, r2
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3
  }

  return USBD_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 ff1c 	bl	800b1ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a390:	f003 031f 	and.w	r3, r3, #31
 800a394:	2b02      	cmp	r3, #2
 800a396:	d01a      	beq.n	800a3ce <USBD_LL_SetupStage+0x72>
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d822      	bhi.n	800a3e2 <USBD_LL_SetupStage+0x86>
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <USBD_LL_SetupStage+0x4a>
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d00a      	beq.n	800a3ba <USBD_LL_SetupStage+0x5e>
 800a3a4:	e01d      	b.n	800a3e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9ee 	bl	800a790 <USBD_StdDevReq>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b8:	e020      	b.n	800a3fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa52 	bl	800a86c <USBD_StdItfReq>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a3cc:	e016      	b.n	800a3fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa91 	bl	800a8fe <USBD_StdEPReq>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e0:	e00c      	b.n	800a3fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7f7 f85f 	bl	80014b4 <USBD_LL_StallEP>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3fa:	bf00      	nop
  }

  return ret;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b086      	sub	sp, #24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	460b      	mov	r3, r1
 800a410:	607a      	str	r2, [r7, #4]
 800a412:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d138      	bne.n	800a48c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a420:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d14a      	bne.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	429a      	cmp	r2, r3
 800a436:	d913      	bls.n	800a460 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	1ad2      	subs	r2, r2, r3
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	68da      	ldr	r2, [r3, #12]
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	4293      	cmp	r3, r2
 800a450:	bf28      	it	cs
 800a452:	4613      	movcs	r3, r2
 800a454:	461a      	mov	r2, r3
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 ff9b 	bl	800b394 <USBD_CtlContinueRx>
 800a45e:	e030      	b.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d10b      	bne.n	800a484 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d005      	beq.n	800a484 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 ff96 	bl	800b3b6 <USBD_CtlSendStatus>
 800a48a:	e01a      	b.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b03      	cmp	r3, #3
 800a496:	d114      	bne.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00e      	beq.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	7afa      	ldrb	r2, [r7, #11]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	4798      	blx	r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
 800a4c0:	e000      	b.n	800a4c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3718      	adds	r7, #24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d16b      	bne.n	800a5b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3314      	adds	r3, #20
 800a4e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d156      	bne.n	800a59e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d914      	bls.n	800a526 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	1ad2      	subs	r2, r2, r3
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	461a      	mov	r2, r3
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 ff10 	bl	800b338 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7f7 f873 	bl	800160a <USBD_LL_PrepareReceive>
 800a524:	e03b      	b.n	800a59e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d11c      	bne.n	800a56c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	685a      	ldr	r2, [r3, #4]
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d316      	bcc.n	800a56c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a548:	429a      	cmp	r2, r3
 800a54a:	d20f      	bcs.n	800a56c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a54c:	2200      	movs	r2, #0
 800a54e:	2100      	movs	r1, #0
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fef1 	bl	800b338 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a55e:	2300      	movs	r3, #0
 800a560:	2200      	movs	r2, #0
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f7f7 f850 	bl	800160a <USBD_LL_PrepareReceive>
 800a56a:	e018      	b.n	800a59e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b03      	cmp	r3, #3
 800a576:	d10b      	bne.n	800a590 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d005      	beq.n	800a590 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a590:	2180      	movs	r1, #128	; 0x80
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7f6 ff8e 	bl	80014b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 ff1f 	bl	800b3dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d122      	bne.n	800a5ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff fe98 	bl	800a2de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a5b6:	e01a      	b.n	800a5ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b03      	cmp	r3, #3
 800a5c2:	d114      	bne.n	800a5ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00e      	beq.n	800a5ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	7afa      	ldrb	r2, [r7, #11]
 800a5da:	4611      	mov	r1, r2
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	4798      	blx	r3
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a5e4:	7dfb      	ldrb	r3, [r7, #23]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	e000      	b.n	800a5f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3718      	adds	r7, #24
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a628:	2303      	movs	r3, #3
 800a62a:	e02f      	b.n	800a68c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00f      	beq.n	800a656 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d009      	beq.n	800a656 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6852      	ldr	r2, [r2, #4]
 800a64e:	b2d2      	uxtb	r2, r2
 800a650:	4611      	mov	r1, r2
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a656:	2340      	movs	r3, #64	; 0x40
 800a658:	2200      	movs	r2, #0
 800a65a:	2100      	movs	r1, #0
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7f6 fee4 	bl	800142a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2240      	movs	r2, #64	; 0x40
 800a66e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a672:	2340      	movs	r3, #64	; 0x40
 800a674:	2200      	movs	r2, #0
 800a676:	2180      	movs	r1, #128	; 0x80
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f7f6 fed6 	bl	800142a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2240      	movs	r2, #64	; 0x40
 800a688:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d106      	bne.n	800a702 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a722:	2303      	movs	r3, #3
 800a724:	e012      	b.n	800a74c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d10b      	bne.n	800a74a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	3301      	adds	r3, #1
 800a76a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a772:	8a3b      	ldrh	r3, [r7, #16]
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	b21a      	sxth	r2, r3
 800a778:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	b21b      	sxth	r3, r3
 800a780:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a782:	89fb      	ldrh	r3, [r7, #14]
}
 800a784:	4618      	mov	r0, r3
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7a6:	2b40      	cmp	r3, #64	; 0x40
 800a7a8:	d005      	beq.n	800a7b6 <USBD_StdDevReq+0x26>
 800a7aa:	2b40      	cmp	r3, #64	; 0x40
 800a7ac:	d853      	bhi.n	800a856 <USBD_StdDevReq+0xc6>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00b      	beq.n	800a7ca <USBD_StdDevReq+0x3a>
 800a7b2:	2b20      	cmp	r3, #32
 800a7b4:	d14f      	bne.n	800a856 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c8:	e04a      	b.n	800a860 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d83b      	bhi.n	800a84a <USBD_StdDevReq+0xba>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <USBD_StdDevReq+0x48>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a82d 	.word	0x0800a82d
 800a7dc:	0800a841 	.word	0x0800a841
 800a7e0:	0800a84b 	.word	0x0800a84b
 800a7e4:	0800a837 	.word	0x0800a837
 800a7e8:	0800a84b 	.word	0x0800a84b
 800a7ec:	0800a80b 	.word	0x0800a80b
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a84b 	.word	0x0800a84b
 800a7f8:	0800a823 	.word	0x0800a823
 800a7fc:	0800a815 	.word	0x0800a815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f9de 	bl	800abc4 <USBD_GetDescriptor>
          break;
 800a808:	e024      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fb43 	bl	800ae98 <USBD_SetAddress>
          break;
 800a812:	e01f      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fb82 	bl	800af20 <USBD_SetConfig>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
          break;
 800a820:	e018      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fc21 	bl	800b06c <USBD_GetConfig>
          break;
 800a82a:	e013      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fc52 	bl	800b0d8 <USBD_GetStatus>
          break;
 800a834:	e00e      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fc81 	bl	800b140 <USBD_SetFeature>
          break;
 800a83e:	e009      	b.n	800a854 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc90 	bl	800b168 <USBD_ClrFeature>
          break;
 800a848:	e004      	b.n	800a854 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fce7 	bl	800b220 <USBD_CtlError>
          break;
 800a852:	bf00      	nop
      }
      break;
 800a854:	e004      	b.n	800a860 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fce1 	bl	800b220 <USBD_CtlError>
      break;
 800a85e:	bf00      	nop
  }

  return ret;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop

0800a86c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a882:	2b40      	cmp	r3, #64	; 0x40
 800a884:	d005      	beq.n	800a892 <USBD_StdItfReq+0x26>
 800a886:	2b40      	cmp	r3, #64	; 0x40
 800a888:	d82f      	bhi.n	800a8ea <USBD_StdItfReq+0x7e>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <USBD_StdItfReq+0x26>
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d12b      	bne.n	800a8ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d81d      	bhi.n	800a8dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	889b      	ldrh	r3, [r3, #4]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d813      	bhi.n	800a8d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	4798      	blx	r3
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	88db      	ldrh	r3, [r3, #6]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d110      	bne.n	800a8e6 <USBD_StdItfReq+0x7a>
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10d      	bne.n	800a8e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fd73 	bl	800b3b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8d0:	e009      	b.n	800a8e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fca3 	bl	800b220 <USBD_CtlError>
          break;
 800a8da:	e004      	b.n	800a8e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fc9e 	bl	800b220 <USBD_CtlError>
          break;
 800a8e4:	e000      	b.n	800a8e8 <USBD_StdItfReq+0x7c>
          break;
 800a8e6:	bf00      	nop
      }
      break;
 800a8e8:	e004      	b.n	800a8f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fc97 	bl	800b220 <USBD_CtlError>
      break;
 800a8f2:	bf00      	nop
  }

  return ret;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	889b      	ldrh	r3, [r3, #4]
 800a910:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a91a:	2b40      	cmp	r3, #64	; 0x40
 800a91c:	d007      	beq.n	800a92e <USBD_StdEPReq+0x30>
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	f200 8145 	bhi.w	800abae <USBD_StdEPReq+0x2b0>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00c      	beq.n	800a942 <USBD_StdEPReq+0x44>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	f040 8140 	bne.w	800abae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]
      break;
 800a940:	e13a      	b.n	800abb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	2b03      	cmp	r3, #3
 800a948:	d007      	beq.n	800a95a <USBD_StdEPReq+0x5c>
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	f300 8129 	bgt.w	800aba2 <USBD_StdEPReq+0x2a4>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d07f      	beq.n	800aa54 <USBD_StdEPReq+0x156>
 800a954:	2b01      	cmp	r3, #1
 800a956:	d03c      	beq.n	800a9d2 <USBD_StdEPReq+0xd4>
 800a958:	e123      	b.n	800aba2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b02      	cmp	r3, #2
 800a964:	d002      	beq.n	800a96c <USBD_StdEPReq+0x6e>
 800a966:	2b03      	cmp	r3, #3
 800a968:	d016      	beq.n	800a998 <USBD_StdEPReq+0x9a>
 800a96a:	e02c      	b.n	800a9c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00d      	beq.n	800a98e <USBD_StdEPReq+0x90>
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b80      	cmp	r3, #128	; 0x80
 800a976:	d00a      	beq.n	800a98e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a978:	7bbb      	ldrb	r3, [r7, #14]
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7f6 fd99 	bl	80014b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a982:	2180      	movs	r1, #128	; 0x80
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7f6 fd95 	bl	80014b4 <USBD_LL_StallEP>
 800a98a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a98c:	e020      	b.n	800a9d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fc45 	bl	800b220 <USBD_CtlError>
              break;
 800a996:	e01b      	b.n	800a9d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	885b      	ldrh	r3, [r3, #2]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10e      	bne.n	800a9be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00b      	beq.n	800a9be <USBD_StdEPReq+0xc0>
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b80      	cmp	r3, #128	; 0x80
 800a9aa:	d008      	beq.n	800a9be <USBD_StdEPReq+0xc0>
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	88db      	ldrh	r3, [r3, #6]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7f6 fd7b 	bl	80014b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fcf9 	bl	800b3b6 <USBD_CtlSendStatus>

              break;
 800a9c4:	e004      	b.n	800a9d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc29 	bl	800b220 <USBD_CtlError>
              break;
 800a9ce:	bf00      	nop
          }
          break;
 800a9d0:	e0ec      	b.n	800abac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d002      	beq.n	800a9e4 <USBD_StdEPReq+0xe6>
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d016      	beq.n	800aa10 <USBD_StdEPReq+0x112>
 800a9e2:	e030      	b.n	800aa46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00d      	beq.n	800aa06 <USBD_StdEPReq+0x108>
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b80      	cmp	r3, #128	; 0x80
 800a9ee:	d00a      	beq.n	800aa06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7f6 fd5d 	bl	80014b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9fa:	2180      	movs	r1, #128	; 0x80
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7f6 fd59 	bl	80014b4 <USBD_LL_StallEP>
 800aa02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa04:	e025      	b.n	800aa52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fc09 	bl	800b220 <USBD_CtlError>
              break;
 800aa0e:	e020      	b.n	800aa52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	885b      	ldrh	r3, [r3, #2]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d11b      	bne.n	800aa50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d004      	beq.n	800aa2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7f6 fd63 	bl	80014f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fcc2 	bl	800b3b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aa44:	e004      	b.n	800aa50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fbe9 	bl	800b220 <USBD_CtlError>
              break;
 800aa4e:	e000      	b.n	800aa52 <USBD_StdEPReq+0x154>
              break;
 800aa50:	bf00      	nop
          }
          break;
 800aa52:	e0ab      	b.n	800abac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d002      	beq.n	800aa66 <USBD_StdEPReq+0x168>
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d032      	beq.n	800aaca <USBD_StdEPReq+0x1cc>
 800aa64:	e097      	b.n	800ab96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d007      	beq.n	800aa7c <USBD_StdEPReq+0x17e>
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	2b80      	cmp	r3, #128	; 0x80
 800aa70:	d004      	beq.n	800aa7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fbd3 	bl	800b220 <USBD_CtlError>
                break;
 800aa7a:	e091      	b.n	800aba0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da0b      	bge.n	800aa9c <USBD_StdEPReq+0x19e>
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	3310      	adds	r3, #16
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	4413      	add	r3, r2
 800aa98:	3304      	adds	r3, #4
 800aa9a:	e00b      	b.n	800aab4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	3304      	adds	r3, #4
 800aab4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2202      	movs	r2, #2
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fc1d 	bl	800b302 <USBD_CtlSendData>
              break;
 800aac8:	e06a      	b.n	800aba0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aaca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	da11      	bge.n	800aaf6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aad2:	7bbb      	ldrb	r3, [r7, #14]
 800aad4:	f003 020f 	and.w	r2, r3, #15
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	3324      	adds	r3, #36	; 0x24
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d117      	bne.n	800ab1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb96 	bl	800b220 <USBD_CtlError>
                  break;
 800aaf4:	e054      	b.n	800aba0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	f003 020f 	and.w	r2, r3, #15
 800aafc:	6879      	ldr	r1, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	440b      	add	r3, r1
 800ab08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab12:	6839      	ldr	r1, [r7, #0]
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fb83 	bl	800b220 <USBD_CtlError>
                  break;
 800ab1a:	e041      	b.n	800aba0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da0b      	bge.n	800ab3c <USBD_StdEPReq+0x23e>
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	3310      	adds	r3, #16
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	4413      	add	r3, r2
 800ab38:	3304      	adds	r3, #4
 800ab3a:	e00b      	b.n	800ab54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab3c:	7bbb      	ldrb	r3, [r7, #14]
 800ab3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	3304      	adds	r3, #4
 800ab54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <USBD_StdEPReq+0x264>
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b80      	cmp	r3, #128	; 0x80
 800ab60:	d103      	bne.n	800ab6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e00e      	b.n	800ab88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab6a:	7bbb      	ldrb	r3, [r7, #14]
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7f6 fcde 	bl	8001530 <USBD_LL_IsStallEP>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]
 800ab80:	e002      	b.n	800ab88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fbb7 	bl	800b302 <USBD_CtlSendData>
              break;
 800ab94:	e004      	b.n	800aba0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fb41 	bl	800b220 <USBD_CtlError>
              break;
 800ab9e:	bf00      	nop
          }
          break;
 800aba0:	e004      	b.n	800abac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 fb3b 	bl	800b220 <USBD_CtlError>
          break;
 800abaa:	bf00      	nop
      }
      break;
 800abac:	e004      	b.n	800abb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fb35 	bl	800b220 <USBD_CtlError>
      break;
 800abb6:	bf00      	nop
  }

  return ret;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
	...

0800abc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	0a1b      	lsrs	r3, r3, #8
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	3b01      	subs	r3, #1
 800abe4:	2b06      	cmp	r3, #6
 800abe6:	f200 8128 	bhi.w	800ae3a <USBD_GetDescriptor+0x276>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <USBD_GetDescriptor+0x2c>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac0d 	.word	0x0800ac0d
 800abf4:	0800ac25 	.word	0x0800ac25
 800abf8:	0800ac65 	.word	0x0800ac65
 800abfc:	0800ae3b 	.word	0x0800ae3b
 800ac00:	0800ae3b 	.word	0x0800ae3b
 800ac04:	0800addb 	.word	0x0800addb
 800ac08:	0800ae07 	.word	0x0800ae07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
      break;
 800ac22:	e112      	b.n	800ae4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7c1b      	ldrb	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10d      	bne.n	800ac48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac34:	f107 0208 	add.w	r2, r7, #8
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
 800ac3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	2202      	movs	r2, #2
 800ac44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac46:	e100      	b.n	800ae4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	f107 0208 	add.w	r2, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	2202      	movs	r2, #2
 800ac60:	701a      	strb	r2, [r3, #0]
      break;
 800ac62:	e0f2      	b.n	800ae4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	885b      	ldrh	r3, [r3, #2]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	f200 80ac 	bhi.w	800adc8 <USBD_GetDescriptor+0x204>
 800ac70:	a201      	add	r2, pc, #4	; (adr r2, 800ac78 <USBD_GetDescriptor+0xb4>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800ac91 	.word	0x0800ac91
 800ac7c:	0800acc5 	.word	0x0800acc5
 800ac80:	0800acf9 	.word	0x0800acf9
 800ac84:	0800ad2d 	.word	0x0800ad2d
 800ac88:	0800ad61 	.word	0x0800ad61
 800ac8c:	0800ad95 	.word	0x0800ad95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 0108 	add.w	r1, r7, #8
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb2:	e091      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fab2 	bl	800b220 <USBD_CtlError>
            err++;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	3301      	adds	r3, #1
 800acc0:	72fb      	strb	r3, [r7, #11]
          break;
 800acc2:	e089      	b.n	800add8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	7c12      	ldrb	r2, [r2, #16]
 800acdc:	f107 0108 	add.w	r1, r7, #8
 800ace0:	4610      	mov	r0, r2
 800ace2:	4798      	blx	r3
 800ace4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ace6:	e077      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa98 	bl	800b220 <USBD_CtlError>
            err++;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	3301      	adds	r3, #1
 800acf4:	72fb      	strb	r3, [r7, #11]
          break;
 800acf6:	e06f      	b.n	800add8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00b      	beq.n	800ad1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
 800ad10:	f107 0108 	add.w	r1, r7, #8
 800ad14:	4610      	mov	r0, r2
 800ad16:	4798      	blx	r3
 800ad18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1a:	e05d      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa7e 	bl	800b220 <USBD_CtlError>
            err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2a:	e055      	b.n	800add8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00b      	beq.n	800ad50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	7c12      	ldrb	r2, [r2, #16]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad4e:	e043      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fa64 	bl	800b220 <USBD_CtlError>
            err++;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad5e:	e03b      	b.n	800add8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad82:	e029      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fa4a 	bl	800b220 <USBD_CtlError>
            err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
          break;
 800ad92:	e021      	b.n	800add8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00b      	beq.n	800adb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adb6:	e00f      	b.n	800add8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa30 	bl	800b220 <USBD_CtlError>
            err++;
 800adc0:	7afb      	ldrb	r3, [r7, #11]
 800adc2:	3301      	adds	r3, #1
 800adc4:	72fb      	strb	r3, [r7, #11]
          break;
 800adc6:	e007      	b.n	800add8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa28 	bl	800b220 <USBD_CtlError>
          err++;
 800add0:	7afb      	ldrb	r3, [r7, #11]
 800add2:	3301      	adds	r3, #1
 800add4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800add6:	bf00      	nop
      }
      break;
 800add8:	e037      	b.n	800ae4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	7c1b      	ldrb	r3, [r3, #16]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d109      	bne.n	800adf6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adf4:	e029      	b.n	800ae4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 fa11 	bl	800b220 <USBD_CtlError>
        err++;
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	3301      	adds	r3, #1
 800ae02:	72fb      	strb	r3, [r7, #11]
      break;
 800ae04:	e021      	b.n	800ae4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	7c1b      	ldrb	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10d      	bne.n	800ae2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	4798      	blx	r3
 800ae1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3301      	adds	r3, #1
 800ae24:	2207      	movs	r2, #7
 800ae26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae28:	e00f      	b.n	800ae4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f9f7 	bl	800b220 <USBD_CtlError>
        err++;
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	3301      	adds	r3, #1
 800ae36:	72fb      	strb	r3, [r7, #11]
      break;
 800ae38:	e007      	b.n	800ae4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f9ef 	bl	800b220 <USBD_CtlError>
      err++;
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	3301      	adds	r3, #1
 800ae46:	72fb      	strb	r3, [r7, #11]
      break;
 800ae48:	bf00      	nop
  }

  if (err != 0U)
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d11e      	bne.n	800ae8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	88db      	ldrh	r3, [r3, #6]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d016      	beq.n	800ae86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae58:	893b      	ldrh	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00e      	beq.n	800ae7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	88da      	ldrh	r2, [r3, #6]
 800ae62:	893b      	ldrh	r3, [r7, #8]
 800ae64:	4293      	cmp	r3, r2
 800ae66:	bf28      	it	cs
 800ae68:	4613      	movcs	r3, r2
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae6e:	893b      	ldrh	r3, [r7, #8]
 800ae70:	461a      	mov	r2, r3
 800ae72:	68f9      	ldr	r1, [r7, #12]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fa44 	bl	800b302 <USBD_CtlSendData>
 800ae7a:	e009      	b.n	800ae90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f9ce 	bl	800b220 <USBD_CtlError>
 800ae84:	e004      	b.n	800ae90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa95 	bl	800b3b6 <USBD_CtlSendStatus>
 800ae8c:	e000      	b.n	800ae90 <USBD_GetDescriptor+0x2cc>
    return;
 800ae8e:	bf00      	nop
  }
}
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop

0800ae98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	889b      	ldrh	r3, [r3, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d131      	bne.n	800af0e <USBD_SetAddress+0x76>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d12d      	bne.n	800af0e <USBD_SetAddress+0x76>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	885b      	ldrh	r3, [r3, #2]
 800aeb6:	2b7f      	cmp	r3, #127	; 0x7f
 800aeb8:	d829      	bhi.n	800af0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	885b      	ldrh	r3, [r3, #2]
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d104      	bne.n	800aedc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f9a3 	bl	800b220 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeda:	e01d      	b.n	800af18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	7bfa      	ldrb	r2, [r7, #15]
 800aee0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7f6 fb4e 	bl	800158a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fa61 	bl	800b3b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d004      	beq.n	800af04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2202      	movs	r2, #2
 800aefe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af02:	e009      	b.n	800af18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0c:	e004      	b.n	800af18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f985 	bl	800b220 <USBD_CtlError>
  }
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	885b      	ldrh	r3, [r3, #2]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	4b4c      	ldr	r3, [pc, #304]	; (800b068 <USBD_SetConfig+0x148>)
 800af36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af38:	4b4b      	ldr	r3, [pc, #300]	; (800b068 <USBD_SetConfig+0x148>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d905      	bls.n	800af4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f96c 	bl	800b220 <USBD_CtlError>
    return USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e088      	b.n	800b05e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b02      	cmp	r3, #2
 800af56:	d002      	beq.n	800af5e <USBD_SetConfig+0x3e>
 800af58:	2b03      	cmp	r3, #3
 800af5a:	d025      	beq.n	800afa8 <USBD_SetConfig+0x88>
 800af5c:	e071      	b.n	800b042 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af5e:	4b42      	ldr	r3, [pc, #264]	; (800b068 <USBD_SetConfig+0x148>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d01c      	beq.n	800afa0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800af66:	4b40      	ldr	r3, [pc, #256]	; (800b068 <USBD_SetConfig+0x148>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af70:	4b3d      	ldr	r3, [pc, #244]	; (800b068 <USBD_SetConfig+0x148>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff f9bc 	bl	800a2f4 <USBD_SetClassConfig>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af80:	7bfb      	ldrb	r3, [r7, #15]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f949 	bl	800b220 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af8e:	e065      	b.n	800b05c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa10 	bl	800b3b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2203      	movs	r2, #3
 800af9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af9e:	e05d      	b.n	800b05c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa08 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800afa6:	e059      	b.n	800b05c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afa8:	4b2f      	ldr	r3, [pc, #188]	; (800b068 <USBD_SetConfig+0x148>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d112      	bne.n	800afd6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afb8:	4b2b      	ldr	r3, [pc, #172]	; (800b068 <USBD_SetConfig+0x148>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afc2:	4b29      	ldr	r3, [pc, #164]	; (800b068 <USBD_SetConfig+0x148>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff f9af 	bl	800a32c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f9f1 	bl	800b3b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afd4:	e042      	b.n	800b05c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <USBD_SetConfig+0x148>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d02a      	beq.n	800b03a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff f99d 	bl	800a32c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aff2:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <USBD_SetConfig+0x148>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800affc:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <USBD_SetConfig+0x148>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7ff f976 	bl	800a2f4 <USBD_SetClassConfig>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00f      	beq.n	800b032 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f903 	bl	800b220 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff f982 	bl	800a32c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b030:	e014      	b.n	800b05c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9bf 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800b038:	e010      	b.n	800b05c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f9bb 	bl	800b3b6 <USBD_CtlSendStatus>
      break;
 800b040:	e00c      	b.n	800b05c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f8eb 	bl	800b220 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <USBD_SetConfig+0x148>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff f96b 	bl	800a32c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	73fb      	strb	r3, [r7, #15]
      break;
 800b05a:	bf00      	nop
  }

  return ret;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000438 	.word	0x20000438

0800b06c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d004      	beq.n	800b088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f8cd 	bl	800b220 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b086:	e023      	b.n	800b0d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b02      	cmp	r3, #2
 800b092:	dc02      	bgt.n	800b09a <USBD_GetConfig+0x2e>
 800b094:	2b00      	cmp	r3, #0
 800b096:	dc03      	bgt.n	800b0a0 <USBD_GetConfig+0x34>
 800b098:	e015      	b.n	800b0c6 <USBD_GetConfig+0x5a>
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d00b      	beq.n	800b0b6 <USBD_GetConfig+0x4a>
 800b09e:	e012      	b.n	800b0c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f927 	bl	800b302 <USBD_CtlSendData>
        break;
 800b0b4:	e00c      	b.n	800b0d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f91f 	bl	800b302 <USBD_CtlSendData>
        break;
 800b0c4:	e004      	b.n	800b0d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f8a9 	bl	800b220 <USBD_CtlError>
        break;
 800b0ce:	bf00      	nop
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d81e      	bhi.n	800b12e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d004      	beq.n	800b102 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f890 	bl	800b220 <USBD_CtlError>
        break;
 800b100:	e01a      	b.n	800b138 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f043 0202 	orr.w	r2, r3, #2
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	330c      	adds	r3, #12
 800b122:	2202      	movs	r2, #2
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f8eb 	bl	800b302 <USBD_CtlSendData>
      break;
 800b12c:	e004      	b.n	800b138 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f875 	bl	800b220 <USBD_CtlError>
      break;
 800b136:	bf00      	nop
  }
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d106      	bne.n	800b160 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f92b 	bl	800b3b6 <USBD_CtlSendStatus>
  }
}
 800b160:	bf00      	nop
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	3b01      	subs	r3, #1
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d80b      	bhi.n	800b198 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	885b      	ldrh	r3, [r3, #2]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d10c      	bne.n	800b1a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f910 	bl	800b3b6 <USBD_CtlSendStatus>
      }
      break;
 800b196:	e004      	b.n	800b1a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f840 	bl	800b220 <USBD_CtlError>
      break;
 800b1a0:	e000      	b.n	800b1a4 <USBD_ClrFeature+0x3c>
      break;
 800b1a2:	bf00      	nop
  }
}
 800b1a4:	bf00      	nop
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff fabc 	bl	800a754 <SWAPBYTE>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7ff faaf 	bl	800a754 <SWAPBYTE>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3301      	adds	r3, #1
 800b202:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3301      	adds	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff faa2 	bl	800a754 <SWAPBYTE>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	80da      	strh	r2, [r3, #6]
}
 800b218:	bf00      	nop
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b22a:	2180      	movs	r1, #128	; 0x80
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7f6 f941 	bl	80014b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b232:	2100      	movs	r1, #0
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7f6 f93d 	bl	80014b4 <USBD_LL_StallEP>
}
 800b23a:	bf00      	nop
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b086      	sub	sp, #24
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d036      	beq.n	800b2c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b25c:	6938      	ldr	r0, [r7, #16]
 800b25e:	f000 f836 	bl	800b2ce <USBD_GetLen>
 800b262:	4603      	mov	r3, r0
 800b264:	3301      	adds	r3, #1
 800b266:	b29b      	uxth	r3, r3
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	68ba      	ldr	r2, [r7, #8]
 800b274:	4413      	add	r3, r2
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	7812      	ldrb	r2, [r2, #0]
 800b27a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	3301      	adds	r3, #1
 800b280:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	4413      	add	r3, r2
 800b288:	2203      	movs	r2, #3
 800b28a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	3301      	adds	r3, #1
 800b290:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b292:	e013      	b.n	800b2bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b294:	7dfb      	ldrb	r3, [r7, #23]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	4413      	add	r3, r2
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	7812      	ldrb	r2, [r2, #0]
 800b29e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
    idx++;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e7      	bne.n	800b294 <USBD_GetString+0x52>
 800b2c4:	e000      	b.n	800b2c8 <USBD_GetString+0x86>
    return;
 800b2c6:	bf00      	nop
  }
}
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2de:	e005      	b.n	800b2ec <USBD_GetLen+0x1e>
  {
    len++;
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1f5      	bne.n	800b2e0 <USBD_GetLen+0x12>
  }

  return len;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2202      	movs	r2, #2
 800b312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	2100      	movs	r1, #0
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7f6 f94d 	bl	80015c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	2100      	movs	r1, #0
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f7f6 f93c 	bl	80015c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	60f8      	str	r0, [r7, #12]
 800b362:	60b9      	str	r1, [r7, #8]
 800b364:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2203      	movs	r2, #3
 800b36a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	2100      	movs	r1, #0
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7f6 f940 	bl	800160a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7f6 f92f 	bl	800160a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2204      	movs	r2, #4
 800b3c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7f6 f8fb 	bl	80015c8 <USBD_LL_Transmit>

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2205      	movs	r2, #5
 800b3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f6 f909 	bl	800160a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
	...

0800b404 <__libc_init_array>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	4d0d      	ldr	r5, [pc, #52]	; (800b43c <__libc_init_array+0x38>)
 800b408:	4c0d      	ldr	r4, [pc, #52]	; (800b440 <__libc_init_array+0x3c>)
 800b40a:	1b64      	subs	r4, r4, r5
 800b40c:	10a4      	asrs	r4, r4, #2
 800b40e:	2600      	movs	r6, #0
 800b410:	42a6      	cmp	r6, r4
 800b412:	d109      	bne.n	800b428 <__libc_init_array+0x24>
 800b414:	4d0b      	ldr	r5, [pc, #44]	; (800b444 <__libc_init_array+0x40>)
 800b416:	4c0c      	ldr	r4, [pc, #48]	; (800b448 <__libc_init_array+0x44>)
 800b418:	f000 f820 	bl	800b45c <_init>
 800b41c:	1b64      	subs	r4, r4, r5
 800b41e:	10a4      	asrs	r4, r4, #2
 800b420:	2600      	movs	r6, #0
 800b422:	42a6      	cmp	r6, r4
 800b424:	d105      	bne.n	800b432 <__libc_init_array+0x2e>
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42c:	4798      	blx	r3
 800b42e:	3601      	adds	r6, #1
 800b430:	e7ee      	b.n	800b410 <__libc_init_array+0xc>
 800b432:	f855 3b04 	ldr.w	r3, [r5], #4
 800b436:	4798      	blx	r3
 800b438:	3601      	adds	r6, #1
 800b43a:	e7f2      	b.n	800b422 <__libc_init_array+0x1e>
 800b43c:	0800b5bc 	.word	0x0800b5bc
 800b440:	0800b5bc 	.word	0x0800b5bc
 800b444:	0800b5bc 	.word	0x0800b5bc
 800b448:	0800b5c0 	.word	0x0800b5c0

0800b44c <memset>:
 800b44c:	4402      	add	r2, r0
 800b44e:	4603      	mov	r3, r0
 800b450:	4293      	cmp	r3, r2
 800b452:	d100      	bne.n	800b456 <memset+0xa>
 800b454:	4770      	bx	lr
 800b456:	f803 1b01 	strb.w	r1, [r3], #1
 800b45a:	e7f9      	b.n	800b450 <memset+0x4>

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
